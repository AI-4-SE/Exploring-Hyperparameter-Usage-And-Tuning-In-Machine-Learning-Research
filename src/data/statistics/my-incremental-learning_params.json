{
    "dataHandler/IncrementalLoader.py": {
        "torch": {
            "DataLoader_246": {
                "variable": {
                    "value": "train_loader_full",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IncrementalLoader(train_data.train_data, train_data.train_labels, 500, 100, [], transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "data_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_144": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(Variable(data_tensor), True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_156": {
                "variable": {
                    "value": "features_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_temp.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_copy[0:exmp_no]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataHandler/dataset.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "instance",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.uniform(low=-1, high=1, size=(32, 32))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mnistMissingExperiment.py": {
        "torch": {
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "train_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataHandler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "train_iterator_nmc",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader_nmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataHandler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "test_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataHandler.IncrementalLoader(dataset.test_data.test_data, dataset.test_data.test_labels, dataset.labels_per_class_test, dataset.classes, [], transform=dataset.test_transform, cuda=args.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "model/densenet.py": {
        "torch": {
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOutChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(out)), 8))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc(out))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(self.bn1(out)), 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "input": {
                    "value": "F.relu(self.bn1(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_112": {
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_114": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(out)), 8))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc(out))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/misc_functions.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "im_as_ten",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_as_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(cv2im)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(im_as_arr[..., ::-1])",
                            "Call"
                        ],
                        [
                            "im_as_arr.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/res_utils.py": {
        "torch": {
            "AvgPool2d_9": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet32.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_83": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "self.fc(embedded) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_162": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "self.fc(embedded) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "self.fc(embedded) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_127": {
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "self.fc(embedded) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/testModel.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.conv2_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.conv2_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.conv2_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.conv5_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_18": {
                "variable": {
                    "value": "self.conv5_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noClasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "self.conv2_bn1(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_49": {
                "input": {
                    "value": "self.fc(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_27": {
                "input": {
                    "value": "self.conv2_bn2(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "input": {
                    "value": "self.conv2_bn3(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "input": {
                    "value": "self.conv5_drop(self.conv5_bn3(self.conv5(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "self.fc(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "self.conv2_bn1(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "self.fc2(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "self.fc2(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "runExperiment.py": {
        "torch": {
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "train_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [0, 1], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "train_iterator_nmc",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader_nmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [0, 1], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "test_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.test_data.test_data, dataset.test_data.test_labels, dataset.labels_per_class_test, dataset.classes, [0, 1], transform=dataset.test_transform, cuda=args.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_150": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "myModel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "myModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ModelFactory.get_model(args.model_type, args.dataset)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(myModel)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_240": {
                "variable": {
                    "value": "optimizer_jm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel_jm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "myModel_jm",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "myModel_jm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ModelFactory.get_model(args.model_type, args.dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "nn.DataParallel(myModel_jm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/evaluator.py": {
        "torch": {
            "from_numpy_173": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_74": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_89": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_121": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_123": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "scaleTemp",
                            "variable"
                        ],
                        [
                            "scale / np.linalg.norm(scale, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "scaleTemp",
                            "variable"
                        ],
                        [
                            "scale / np.linalg.norm(scale, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_303": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_175": {
                "input": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "outputTemp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "outputTemp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_334": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data, True).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "model(data, True).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "output * Variable(scale.float())",
                            "BinOp"
                        ],
                        [
                            "model(data, scale=Variable(scale.float()))",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(outputTemp)",
                            "Call"
                        ],
                        [
                            "output.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(output)",
                            "Call"
                        ],
                        [
                            "model(data, scale=Variable(scale.float()))",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(outputTemp)",
                            "Call"
                        ],
                        [
                            "output.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer.py": {
        "torch": {
            "SGD_212": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_242": {
                "variable": {
                    "value": "X_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "X - X_mean.expand_as(X)",
                            "BinOp"
                        ],
                        [
                            "np.arange(0, len_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_246": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "all_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_463": {
                "variable": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*output_projection.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_489": {
                "variable": {
                    "value": "jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobian_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.calc_jacobian_loop(inputs, grad_output.clone(), output_projection, use_fixed_model, i) for i in range(output_projection.size()[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_614": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_617": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_x_i",
                            "variable"
                        ],
                        [
                            "a.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ],
                        [
                            "a.contiguous().view(self.args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "attention",
                            "variable"
                        ],
                        [
                            "torch.norm(a, dim=(1, 2)).unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_617": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_938": {
                "variable": {
                    "value": "Z_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian[:, im_num, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_222": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_jm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "all_embedded_jm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_embedded_jm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_552": {
                "variable": {
                    "value": "grad_output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x1.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_567": {
                "variable": {
                    "value": "grad_output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x1_.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_635": {
                "variable": {
                    "value": "embedded_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_636": {
                "variable": {
                    "value": "x1_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16 * 32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_637": {
                "variable": {
                    "value": "x2_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16 * 32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_680": {
                "variable": {
                    "value": "old_classes_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(oldClassesIndices > 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_681": {
                "variable": {
                    "value": "new_classes_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(oldClassesIndices == 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_706": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_fixed.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_fixed_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.get_model_outputs(self, inputs, use_model_jm, use_fixed_model)",
                            "Call"
                        ],
                        [
                            "self.model(Variable(data_normal_loss))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(y_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_895": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_902": {
                "variable": {
                    "value": "pretrain_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_906": {
                "variable": {
                    "value": "pretrain_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_jm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "self.optimizer_jm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_jm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_246": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "X - X_mean.expand_as(X)",
                            "BinOp"
                        ],
                        [
                            "np.arange(0, len_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_247": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "X - X_mean.expand_as(X)",
                            "BinOp"
                        ],
                        [
                            "np.arange(0, len_x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "U[:, :k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_425": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_x_i",
                            "variable"
                        ],
                        [
                            "a.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ],
                        [
                            "a.contiguous().view(self.args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "attention",
                            "variable"
                        ],
                        [
                            "torch.norm(a, dim=(1, 2)).unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_505": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_fixed.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_fixed_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.get_model_outputs(self, inputs, use_model_jm, use_fixed_model)",
                            "Call"
                        ],
                        [
                            "self.model(Variable(data_normal_loss))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*output_projection.size())",
                            "Call"
                        ],
                        [
                            "grad_output.cuda()",
                            "Call"
                        ],
                        [
                            "grad_output_col.view(grad_output.shape)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "not use_fixed_model",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_516": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_fixed.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_fixed_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_jm.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.get_model_outputs(self, inputs, use_model_jm, use_fixed_model)",
                            "Call"
                        ],
                        [
                            "self.model(Variable(data_normal_loss))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*output_projection.size())",
                            "Call"
                        ],
                        [
                            "grad_output.cuda()",
                            "Call"
                        ],
                        [
                            "grad_output_col.view(grad_output.shape)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "not use_fixed_model",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_622": {
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embedded, self.pca_jm)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_622": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_640": {
                "variable": {
                    "value": "embedded_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_641": {
                "variable": {
                    "value": "x1_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6 * 16 * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_642": {
                "variable": {
                    "value": "x2_random_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "kl_div_710": {
                "variable": {
                    "value": "classification_loss_jm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_jm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_jm(Variable(data_normal_loss))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(y_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_897": {
                "obj": {
                    "value": "self.model_jm.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name + '_jm.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_582": {
                "tensors": {
                    "value": "jacobian_list_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.calc_jacobian_loop(inputs_x1, grad_output_x.clone(), x1_, use_fixed_model, i) for i in range(x1_.size()[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_583": {
                "tensors": {
                    "value": "jacobian_list_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.calc_jacobian_loop(inputs_x2, grad_output_x.clone(), x2_, use_fixed_model, i) for i in range(x2_.size()[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_614": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_680": {
                "input": {
                    "value": "oldClassesIndices > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_681": {
                "input": {
                    "value": "oldClassesIndices == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_719": {
                "variable": {
                    "value": "old_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target <= max(self.older_classes)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "kl_div_731": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(data_distillation_loss), T=myT)",
                            "Call"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(pred2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_744": {
                "variable": {
                    "value": "loss3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_jm(Variable(data_distillation_loss), T=myT)",
                            "Call"
                        ],
                        [
                            "output_jm",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(pred3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_783": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embedded, self.pca_jm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pca_jm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_784": {
                "variable": {
                    "value": "embedded_model_fixed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_model_fixed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embedded_model_fixed, self.pca_jm)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pca_jm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_799": {
                "input": {
                    "value": "norm_embedded - norm_embedded_fixed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_770": {
                "input": {
                    "value": "jacobian_item[old_indices] - jacobian_fixed_item[old_indices]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "mv_89": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec": {
                    "value": "Y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_97": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_34": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}