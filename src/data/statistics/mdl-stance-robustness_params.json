{
    "data_utils/metrics.py": {
        "sklearn": {
            "accuracy_score_8": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "f1_score_11": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "f1_score_14": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_score_17": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_20": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_23": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_26": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_29": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_32": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_35": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "module/bert_optim.py": {
        "torch": {
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_125": {
                "input": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)], 0)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(exp_inf, exp_inf.new().long())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "module/common.py": {
        "torch": {
            "sigmoid_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "erf_15": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/dropout_wrapper.py": {
        "torch": {
            "dropout_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_27": {
                "input": {
                    "value": "(1 - self.dropout_p) * (x.data.new(x.size(0), x.size(2)).zero_() + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/my_optim.py": {
        "torch": {
            "Parameter_102": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "data": {
                    "value": "_norm(weight, dim).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/san.py": {
        "torch": {
            "Parameter_76": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_43": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, (x1 - x2).abs(), x1 * x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_89": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(att_scores, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x1, x2, (x1 - x2).abs(), x1 * x2], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2], 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_scores_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask[idx].view(x.size(0), 1).expand_as(inp) * F.softmax(inp, 1) for (idx, inp) in enumerate(scores_list)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_104": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x_sum, h0)",
                            "Call"
                        ],
                        [
                            "torch.stack(tmp_scores_list, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(scores, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(scores)",
                            "Call"
                        ],
                        [
                            "scores_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_105": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x_sum, h0)",
                            "Call"
                        ],
                        [
                            "torch.stack(tmp_scores_list, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(scores, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(scores)",
                            "Call"
                        ],
                        [
                            "scores_list[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bernoulli_22": {
                "input": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - dropout_p) * (new_data.zero_() + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_101": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(1.0 / (1 - dropout_p) * torch.bernoulli(new_data), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "generate_mask(self.alpha.data.new(x.size(0), self.num_turn), self.mem_random_drop, self.training)",
                            "Call"
                        ],
                        [
                            "[m.contiguous() for m in torch.unbind(mask, 1)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "input": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn(x, h0, x_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/similarity.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, key.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "scores + (x1_logits.expand_as(scores) + x2_logits.expand_as(scores))",
                            "BinOp"
                        ],
                        [
                            "x1_o.bmm(x2_o.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(proj.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x1_logits.expand_as(shape) + x2_logits.expand_as(shape)",
                            "BinOp"
                        ],
                        [
                            "x1_dot.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(self.f(self.FC(x_flat))).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "scores + (x1_logits.expand_as(scores) + x2_logits.expand_as(scores))",
                            "BinOp"
                        ],
                        [
                            "x1_o.bmm(x2_o.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(proj.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x1_logits.expand_as(shape) + x2_logits.expand_as(shape)",
                            "BinOp"
                        ],
                        [
                            "x1_dot.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(self.f(self.FC(x_flat))).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.attn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size + x_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * y, torch.abs(x - y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_538": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.qkv_head_dim[0]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_555": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_558": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.contiguous().view(src_len, bsz * self.num_heads, self.qkv_head_dim[2]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_45": {
                "variable": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.scalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, 1) / self.hidden_size ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.sclalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_113": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_114": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_149": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_150": {
                "variable": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_151": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_216": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.data.new(logits.size(1)).zero_() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_264": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "rvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_332": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_360": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_390": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_422": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_487": {
                "variable": {
                    "value": "self.proj_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim, self.hidden_size) for dim in self.qkv_dim[0:2]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "diag_552": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.data.new(attn_weights.size(1)).zero_() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_552": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_51": {
                "variable": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_86": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_490": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(y) if self.transform_on else y",
                            "IfExp"
                        ],
                        [
                            "self.dropout(proj)",
                            "Call"
                        ],
                        [
                            "self.proj_modules",
                            "Attribute"
                        ],
                        [
                            "weight_norm(proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_487": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_438": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/sub_layers.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_25": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mt_dnn/matcher.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.dropout_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.scoring_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "out_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mt_dnn/model.py": {
        "torch": {}
    },
    "predict.py": {
        "torch": {
            "load_291": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/strip_model.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_50": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "{'state': old_state_dict, 'config': my_config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.fout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_299": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}