{
    "active/badge_sampling.py": {
        "sklearn": {
            "pairwise_distances_56": {
                "variable": {
                    "value": "D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[X[ind]]",
                            "List"
                        ]
                    ]
                }
            },
            "pairwise_distances_58": {
                "variable": {
                    "value": "newD",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "[mu[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_111": {
                "input": {
                    "value": "cout",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "active/core_set_alt.py": {
        "sklearn": {
            "pairwise_distances_28": {
                "variable": {
                    "value": "dist_ctr",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "X_set",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pairwise_distances_36": {
                "variable": {
                    "value": "dist_new_ctr",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "X[[idx], :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "pool_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "active/kmeans.py": {
        "sklearn": {
            "KMeans_26": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SequentialSampler_19": {
                "variable": {
                    "value": "pool_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "pool_handler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_handler('pool')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "pool_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_handler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_handler('pool')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "pool_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(pool_handler)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(100, int(len(pool_handler) / 100))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "active/policy_helpers.py": {
        "sklearn": {},
        "torch": {
            "mean_78": {
                "variable": {
                    "value": "lab_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_model_embeddings(model, device, train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prop.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(pool_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if ind in sel_ind else 0 for ind in range(state.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "un_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if ind in un_sel_ind else 0 for ind in range(state.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "di_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if ind in di_sel_ind else 0 for ind in range(state.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if ind in sel_ind else 0 for ind in range(state.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(clustering)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_80": {
                "variable": {
                    "value": "pool_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_model_embeddings(model, device, pool_dataset)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_125": {
                "tensors": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_state(model, device, pool_subset, train_dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "bincount_81": {
                "input": {
                    "value": "train_dataset.tensors[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_159": {},
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "[lab_emb, pool_emb, sample_emb, train_label_statistics, train_pred_label_statistics, get_one_hot(pool_predictions[ind])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[lab_emb, gradient_embeddings[ind]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "[lab_emb, sample_emb, train_label_statistics, train_pred_label_statistics, gradient_embeddings[ind], get_one_hot(pool_predictions[ind])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[lab_emb, train_label_statistics, train_pred_label_statistics, gradient_embeddings[ind]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[lab_emb, sample_emb, train_label_statistics, train_pred_label_statistics, get_one_hot(pool_predictions[ind])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_182": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_embeddings(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "input": {
                    "value": "cout",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_helper.py": {
        "sklearn": {
            "accuracy_score_161": {
                "variable": {
                    "value": "valid_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_182": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "classification_report_184": {
                "variable": {
                    "value": "test_report",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "confusion_matrix_185": {
                "variable": {
                    "value": "test_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "f1_score_183": {
                "y_true": {
                    "value": "ground_truth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "prop.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ],
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.TRAIN_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_84": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bincount_85": {
                "variable": {
                    "value": "class_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_data.tensors[1].flatten().int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(states, actions.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.TRAIN_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ],
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.TRAIN_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ],
                        [
                            "StateActionActionDataset(actions=all_actions, states=all_states)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.TRAIN_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_157": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_179": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "all_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "class_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bincount(train_data.tensors[1].flatten().int())",
                            "Call"
                        ],
                        [
                            "class_weights.float() / torch.sum(class_weights)",
                            "BinOp"
                        ],
                        [
                            "class_weights[[-1, 0]]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "alil_mnist/AL-baselines.py": {
        "tensorflow": {
            "ConfigProto_53": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alil_mnist/ALIL-simulation.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_15": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alil_mnist/ALIL-transfer.py": {
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alil_mnist/model.py": {
        "tensorflow": {}
    },
    "alil_mnist/train-classifier.py": {
        "tensorflow": {
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_51": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "alil_mnist/utils.py": {
        "tensorflow": {
            "set_verbosity_111": {
                "level": {
                    "value": "logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "active/acq_metrics.py": {
        "torch": {
            "softmax_8": {
                "variable": {
                    "value": "mc_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_11": {
                "variable": {
                    "value": "expected_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(predictions, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mode_20": {
                "variable": {
                    "value": "(modes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(predictions, dim=2)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_10": {
                "input": {
                    "value": "torch.sum(mc_samples * torch.log(mc_samples + 1e-10), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "expected_p * torch.log(expected_p + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "mc_samples * torch.log(mc_samples + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_12": {
                "input": {
                    "value": "expected_p + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "mc_samples + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "active/coreset_robust.py": {
        "torch": {
            "ConcatDataset_75": {
                "variable": {
                    "value": "full_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[pool_dataset, train_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "active/ensemble.py": {
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "pool_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_49": {
                "variable": {
                    "value": "ordered_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "active/entropy_sampling.py": {
        "torch": {
            "DataLoader_21": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_37": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.predict_prob(model, self.device, pool_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.predict_prob(model, self.device, pool_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_30": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "active/learn_to_learn.py": {
        "torch": {
            "stack_149": {
                "variable": {
                    "value": "prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(embeddings[idx_list].mean(0)) for idx_list in support_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "28 * 28 + 28 * 28",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_size / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_size / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(input_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_embedding, dataset_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_66": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_71": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_139": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_dataset, sel_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "self.learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "prop.LAL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "embeddings[idx_list].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "prop.LAL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "active/least_confidence.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.predict_prob(model, self.device, pool_dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "active/mc_dropout.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "pool_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pool_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_28": {
                "variable": {
                    "value": "ordered_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_mc_pool_preds(model, device, pool_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "prediction_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "active/policy_learner.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "state_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_state(model, device, pool_dataset, train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "pol_out_un",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pol_out_un",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pol_out_un).cpu().flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_59": {
                "variable": {
                    "value": "pol_out_un",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "pol_out_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pol_out_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pol_out_div).cpu().flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "pol_out_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(policy_outputs).cpu().flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "policy_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_24": {
                "f": {
                    "value": "prop.POLICY_FILEPATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_62": {
                "input": {
                    "value": "pol_out_un",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pol_out_un).cpu().flatten()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(n / 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_63": {
                "input": {
                    "value": "pol_out_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pol_out_div).cpu().flatten()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(n / 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_47": {
                "input": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(policy_outputs).cpu().flatten()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "active/strategy.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_tensordataset(self.dataset_pool, ~self.idxs_lb)",
                            "Call"
                        ],
                        [
                            "self.make_tensordataset(self.dataset_pool, self.idxs_lb)",
                            "Call"
                        ],
                        [
                            "self.dataset_pool",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "prop.VAL_BATCH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_60": {
                "*tensors": {
                    "value": "data[ind][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_42": {
                "condition": {
                    "value": "self.dataset_pool.tensors[1] == label",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "active_learn.py": {
        "torch": {
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/cifar10.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_25": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_32": {
                "variable": {
                    "value": "testy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_34": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/cifar100.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_24": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "testy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_33": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/data_helpers.py": {
        "torch": {
            "cat_11": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.tensors[0], b.tensors[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_12": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.tensors[1], b.tensors[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorDataset_7": {
                "*tensors": {
                    "value": "data[ind][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_13": {
                "*tensors": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_29": {
                "condition": {
                    "value": "dataset.tensors[1] == label",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "data/emnist.py": {
        "torch": {
            "TensorDataset_20": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_27": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/fmnist.py": {
        "torch": {
            "TensorDataset_22": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_31": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/kmnist.py": {
        "torch": {
            "TensorDataset_22": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_31": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/mnist.py": {
        "torch": {
            "TensorDataset_21": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_28": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/svhn.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_23": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_30": {
                "variable": {
                    "value": "testy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_31": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/policy_training_helpers.py": {
        "torch": {
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_120": {
                "input": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "policy(state.to(device)).flatten()",
                            "Call"
                        ],
                        [
                            "policy(state.to(device)).flatten()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "prop.ACQ_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_125": {
                "input": {
                    "value": "policy_output_diversity.reshape(prop.K)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(prop.ACQ_SIZE / 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_126": {
                "input": {
                    "value": "policy_output_uncertainty.reshape(prop.K)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(prop.ACQ_SIZE / 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_131": {
                "input": {
                    "value": "policy_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "policy(state.to(device)).flatten()",
                            "Call"
                        ],
                        [
                            "policy(state.to(device)).flatten()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "prop.ACQ_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/CNN.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "NUM_CHANNELS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop.CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_same(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "padding_same(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prop.TO_EMBEDDING",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NUM_CLASSES",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax(e1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=model_params['fc1_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.common_code(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "model_params['fc1_dropout']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'fc1_dropout': 0.25, 'fc2_dropout': 0.5}",
                            "Dict"
                        ]
                    ]
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax(e1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=model_params['fc1_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.common_code(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "model_params['fc2_dropout']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'fc1_dropout': 0.25, 'fc2_dropout': 0.5}",
                            "Dict"
                        ]
                    ]
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/MLP.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.lm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.lm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NUM_CLASSES",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lm1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_27": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(emb, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(emb, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "model_params['fc2_dropout']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'fc1_dropout': 0.25, 'fc2_dropout': 0.5}",
                            "Dict"
                        ]
                    ]
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lm1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(emb, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(emb, p=model_params['fc2_dropout'], training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lm1(x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "model_params['fc2_dropout']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'fc1_dropout': 0.25, 'fc2_dropout': 0.5}",
                            "Dict"
                        ]
                    ]
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lm1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/Policy.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.common_code",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_un",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_22": {
                "variable": {
                    "value": "self.sigmoid_un",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc_di",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_24": {
                "variable": {
                    "value": "self.sigmoid_di",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_clustering",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.sigmoid_clustering",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop.POLICY_INPUT_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model_helpers.py": {
        "torch": {}
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NUM_CLASSES",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.mode_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_104": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.5, training=self.mode_training)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(emb)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_140": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_policy.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "prop.POLICY_FOLDER + '/policy_{}.pth'.format(episode)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "curr_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "curr_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}