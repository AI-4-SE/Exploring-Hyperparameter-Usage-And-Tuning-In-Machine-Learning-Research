{
    "src/retriever/utils.py": {
        "sklearn": {
            "murmurhash3_32_46": {
                "positive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "SequentialSampler_688": {
                "variable": {
                    "value": "train_sampler_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(train_exs_with_doc, model, train_docs, single_answer=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_689": {
                "variable": {
                    "value": "train_loader_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(train_exs_with_doc, model, train_docs, single_answer=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SequentialSampler(train_dataset_with_doc)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "vector.batchify_with_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_699": {
                "variable": {
                    "value": "dev_sampler_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dev_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(dev_exs_with_doc, model, dev_docs, single_answer=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_700": {
                "variable": {
                    "value": "dev_loader_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(dev_exs_with_doc, model, dev_docs, single_answer=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "dev_sampler_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SequentialSampler(dev_dataset_with_doc)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "vector.batchify_with_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_710": {
                "variable": {
                    "value": "test_sampler_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(test_exs_with_doc, model, test_docs, single_answer=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_711": {
                "variable": {
                    "value": "test_loader_with_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ReaderDataset_with_Doc(test_exs_with_doc, model, test_docs, single_answer=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler_with_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SequentialSampler(test_dataset_with_doc)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "vector.batchify_with_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_231": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_232": {
                "variable": {
                    "value": "idx_random",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(weights)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "int(vector.num_docs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_317": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_318": {
                "variable": {
                    "value": "idx_random",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(weights)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "int(vector.num_docs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_547": {
                "obj": {
                    "value": "target_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[e] for e in target_s]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "manual_seed_795": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_791": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_797": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/reader/data.py": {
        "torch": {}
    },
    "src/reader/layers.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_114": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_115": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_128": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "alpha_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, y.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_325": {
                "variable": {
                    "value": "xy_column",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_325": {
                "variable": {
                    "value": "xy_column",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_327": {
                "variable": {
                    "value": "xy_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy.permute(2, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_327": {
                "variable": {
                    "value": "xy_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_357": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_proj.bmm(y_proj.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward_unpadded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "self._forward_padded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "self._forward_unpadded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x_mask.size(1) - output.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, Variable(padding)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward_unpadded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "self._forward_padded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "self._forward_unpadded(x, x_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_199": {
                "variable": {
                    "value": "x_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(x.view(-1, x.size(2))).view(x.size())",
                            "Call"
                        ],
                        [
                            "F.relu(x_proj)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_201": {
                "variable": {
                    "value": "y_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(y.view(-1, y.size(2))).view(y.size())",
                            "Call"
                        ],
                        [
                            "F.relu(y_proj)",
                            "Call"
                        ],
                        [
                            "y",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_260": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xWy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xWy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_375": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(rnn_input, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lengths)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.PackedSequence(dropout_input, rnn_input.batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_140": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_146": {
                "sequence": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/reader/model.py": {
        "torch": {}
    },
    "src/reader/rnn_reader.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_114": {
                "variable": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x1)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x1_emb, p=self.args.dropout_emb, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x2)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x2_emb, p=self.args.dropout_emb, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "drnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x1_emb]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/reader/rnn_selector.py": {
        "torch": {
            "Embedding_29": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "doc_hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "question_hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_112": {
                "variable": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x1)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x1_emb, p=self.args.dropout_emb, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_114": {
                "variable": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x2)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x2_emb, p=self.args.dropout_emb, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "drnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x1_emb]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "input": {
                    "value": "self.ans_attn(doc_hiddens, question_hidden, x1_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_147": {
                "input": {
                    "value": "self.ans_attn1(doc_hiddens, question_hidden, x1_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/reader/vector.py": {
        "torch": {
            "zeros_34": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(ex['document'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(ex['document'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ],
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "features[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ],
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "features[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_196": {
                "obj": {
                    "value": "batch[0][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[3] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "y_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[4] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}