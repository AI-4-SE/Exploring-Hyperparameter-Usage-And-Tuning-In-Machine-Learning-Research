{
    "torchmeta/datasets/bach.py": {
        "sklearn": {
            "fetch_openml_398": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "BachClassDataset.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fetch_openml_246": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "self.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneHotEncoder_289": {
                "variable": {
                    "value": "ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/datasets/letter.py": {
        "sklearn": {
            "fetch_openml_247": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "LetterClassDataset.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fetch_openml_175": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "self.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/datasets/one_hundred_plants_margin.py": {
        "sklearn": {
            "fetch_openml_299": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "PlantsMarginClassDataset.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fetch_openml_213": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "self.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/datasets/one_hundred_plants_shape.py": {
        "sklearn": {
            "fetch_openml_300": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "PlantsShapeClassDataset.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fetch_openml_213": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "self.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/datasets/one_hundred_plants_texture.py": {
        "sklearn": {
            "fetch_openml_299": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "PlantsTextureClassDataset.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fetch_openml_213": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "self.open_ml_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "docs/scripts/api_reference.py": {
        "torch": {}
    },
    "examples/anil/model.py": {
        "torch": {
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/anil/train.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "meta_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "outer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_61": {
                "variable": {
                    "value": "inner_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_70": {
                "input": {
                    "value": "test_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(test_input, params=params)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/anil/utils.py": {
        "torch": {
            "max_24": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "predictions.eq(targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/maml-higher/train.py": {
        "torch": {
            "max_67": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_94": {
                "variable": {
                    "value": "inner_optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "meta_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_178": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "predictions.eq(targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "outer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_118": {
                "variable": {
                    "value": "inner_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmodel(train_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_123": {
                "input": {
                    "value": "test_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmodel(test_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/maml/model.py": {
        "torch": {
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/maml/train.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "meta_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_129": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "outer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_64": {
                "variable": {
                    "value": "inner_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_73": {
                "input": {
                    "value": "test_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(test_input, params=params)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/maml/utils.py": {
        "torch": {
            "max_24": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "predictions.eq(targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/matching-network/model.py": {
        "torch": {
            "Sequential_4": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_5": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_6": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_8": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/matching-network/train.py": {
        "torch": {
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_114": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "test_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matching_log_probas(train_embeddings, train_targets, test_embeddings, args.num_ways)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_predictions == test_targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/protonet/model.py": {
        "torch": {
            "Sequential_4": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_5": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_6": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_8": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/protonet/train.py": {
        "torch": {
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/protonet/utils.py": {
        "torch": {
            "sum_24": {
                "variable": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(prototypes.unsqueeze(1) - embeddings.unsqueeze(2)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_26": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((prototypes.unsqueeze(1) - embeddings.unsqueeze(2)) ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "predictions.eq(targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/datasets/tcga.py": {
        "torch": {
            "randperm_483": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(keys)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_425": {
                "n": {
                    "value": "len(dataframe.index)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/modules/activation.py": {
        "torch": {}
    },
    "torchmeta/modules/batchnorm.py": {
        "torch": {
            "batch_norm_33": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('weight', None)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('bias', None)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "1.0 / float(self.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/modules/container.py": {
        "torch": {}
    },
    "torchmeta/modules/conv.py": {
        "torch": {}
    },
    "torchmeta/modules/linear.py": {
        "torch": {
            "linear_14": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('bias', None)",
                            "Call"
                        ],
                        [
                            "params.get('bias', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "bilinear_23": {
                "input1": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "input2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('bias', None)",
                            "Call"
                        ],
                        [
                            "params.get('bias', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchmeta/modules/module.py": {
        "torch": {}
    },
    "torchmeta/modules/normalization.py": {
        "torch": {
            "layer_norm_15": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('weight', None)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('bias', None)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/modules/parallel.py": {
        "torch": {
            "is_grad_enabled_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/modules/sparse.py": {
        "torch": {
            "embedding_13": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_bag_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "offsets": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_sample_weights": {
                    "value": "per_sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "include_last_offset": {
                    "value": "self.include_last_offset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/datasets/test_datasets_helpers.py": {
        "torch": {}
    },
    "torchmeta/tests/datasets/test_datasets_helpers_tabular.py": {
        "torch": {}
    },
    "torchmeta/tests/modules/test_activation.py": {
        "torch": {
            "MultiheadAttention_20": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "add_bias_kv": {
                    "value": "add_bias_kv",
                    "type": "variable",
                    "possible_values": []
                },
                "kdim": {
                    "value": "kdim",
                    "type": "variable",
                    "possible_values": []
                },
                "vdim": {
                    "value": "vdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "out_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5 if kdim is None else kdim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_71": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5 if vdim is None else vdim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MultiheadAttention_90": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "add_bias_kv": {
                    "value": "add_bias_kv",
                    "type": "variable",
                    "possible_values": []
                },
                "kdim": {
                    "value": "kdim",
                    "type": "variable",
                    "possible_values": []
                },
                "vdim": {
                    "value": "vdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_124": {
                "variable": {
                    "value": "params[out_proj.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_127": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_128": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5 if kdim is None else kdim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_129": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5 if vdim is None else vdim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "q_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "k_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "meta_model.kdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "v_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "meta_model.vdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "in_proj_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "out_proj_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "bias_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_61": {
                "variable": {
                    "value": "bias_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "params[q_proj_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "params[k_proj_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "meta_model.kdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_103": {
                "variable": {
                    "value": "params[v_proj_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "meta_model.vdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "params[in_proj_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "params[in_proj_bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_114": {
                "variable": {
                    "value": "params[out_proj.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "params[bias_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "params[bias_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_container.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 3, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "weight0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "bias0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "bias2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 3, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "weight0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_68": {
                "variable": {
                    "value": "bias0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "params[2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "params[2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_conv.py": {
        "torch": {
            "Conv1d_19": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_26": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_55": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_85": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_114": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_137": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 7, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_144": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_153": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "29",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_169": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 7, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else 2",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ],
                        [
                            "0 if padding_mode is None else (2, 3, 5)",
                            "IfExp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ],
                        [
                            "padding_mode or 'zeros'",
                            "BoolOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_173": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "29",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_31": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "params[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "params[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_149": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_177": {
                "variable": {
                    "value": "params[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_linear.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_21": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_45": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bilinear_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_70": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bilinear_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_95": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_102": {
                "variable": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_103": {
                "variable": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "params[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_75": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "params[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_module.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_parallel.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "weight_0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.02, 0.03], [0.05, 0.07], [0.11, 0.13]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "bias_0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.17, 0.19, 0.23]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "weight_2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.29, 0.31, 0.37]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.02, 0.03]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.05]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_99": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_103": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_109": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/modules/test_sparse.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_24": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "EmbeddingBag_53": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "EmbeddingBag_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "params[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_81": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/utils/test_dataloaders.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/utils/test_gradient_based.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "model.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0, 5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.0, 5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_69": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "model(test_inputs, params=params_3)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.0, 5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_121": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "model(test_inputs, params=params_3)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.0, 5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_224": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * model(test_inputs, params=params) ** 2",
                            "BinOp"
                        ],
                        [
                            "model(test_inputs, params=params_3)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_43": {
                "input": {
                    "value": "params['weight'].data == torch.tensor([[-9.5, -20.0, -29.5]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_73": {
                "input": {
                    "value": "grads[0].data == torch.tensor([[3780.0, 8505.0, 13230.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_105": {
                "input": {
                    "value": "params['weight'].data == torch.tensor([[-104.0, -129.5, -154.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_125": {
                "input": {
                    "value": "grads[0].data == torch.tensor([[-825.0, -1650.0, -2475.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_155": {
                "input": {
                    "value": "params_1['weight'].data == torch.tensor([[-21.0, -43.0, -64.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_181": {
                "input": {
                    "value": "params_2['weight'].data == torch.tensor([[278.0, 555.0, 833.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_207": {
                "input": {
                    "value": "params_3['weight'].data == torch.tensor([[-3609.0, -7219.0, -10828.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_228": {
                "input": {
                    "value": "grads[0].data == torch.tensor([[-5020.0, -10043.0, -15066.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[-9.5, -20.0, -29.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[[3780.0, 8505.0, 13230.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[[-104.0, -129.5, -154.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[[-825.0, -1650.0, -2475.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[[-21.0, -43.0, -64.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[[278.0, 555.0, 833.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "[[-3609.0, -7219.0, -10828.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "data": {
                    "value": "[[-5020.0, -10043.0, -15066.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/utils/test_matching.py": {
        "torch": {
            "as_tensor_17": {
                "variable": {
                    "value": "embeddings1_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings1_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_18": {
                "variable": {
                    "value": "embeddings2_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings2_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_46": {
                "variable": {
                    "value": "embeddings1_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings1_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_47": {
                "variable": {
                    "value": "embeddings2_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings2_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_75": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_76": {
                "variable": {
                    "value": "test_embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_77": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(num_classes, size=(2, 3))",
                            "Call"
                        ],
                        [
                            "np.random.randint(num_classes, size=(2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_98": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 3, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_99": {
                "variable": {
                    "value": "test_embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(2, 5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_100": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(num_classes, size=(2, 3))",
                            "Call"
                        ],
                        [
                            "np.random.randint(num_classes, size=(2, 3))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchmeta/tests/utils/test_prototype.py": {
        "torch": {
            "as_tensor_16": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=(2, 5))",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=(2, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_37": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(2, 5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_38": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=(2, 5))",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=(2, 5))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchmeta/tests/utils/test_r2d2.py": {
        "torch": {
            "as_tensor_23": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_24": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 3).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "targets_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "mse_loss_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(embeddings_th, params=params)",
                            "Call"
                        ],
                        [
                            "model(embeddings_th, params=params)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(targets_th, num_classes=num_classes).float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_80": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 3).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_95": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_97": {
                "variable": {
                    "value": "test_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "size": {
                    "value": "(11,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(test_embeddings, params=params)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(num_classes, size=(11,))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_116": {
                "variable": {
                    "value": "embeddings_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 7).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_117": {
                "variable": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=(5,))",
                            "Call"
                        ],
                        [
                            "np.random.randn(5, 3).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_142": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(embeddings_th, params=params)",
                            "Call"
                        ],
                        [
                            "model(embeddings_th, params=params)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(targets_np)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "solution.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "solution.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "solution.bias ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "solution.bias ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/tests/utils/test_wrappers.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "wrapped_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NonEpisodicWrapper(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/transforms/categorical.py": {
        "torch": {
            "randperm_60": {
                "variable": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/transforms/splitters.py": {
        "torch": {}
    },
    "torchmeta/transforms/tabular_transforms.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "numpy_array",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/utils/data/dataloader.py": {
        "torch": {}
    },
    "torchmeta/utils/data/sampler.py": {
        "torch": {}
    },
    "torchmeta/utils/data/task.py": {
        "torch": {}
    },
    "torchmeta/utils/data/wrappers.py": {
        "torch": {}
    },
    "torchmeta/utils/gradient_based.py": {
        "torch": {
            "grad_49": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "not first_order",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/utils/matching.py": {
        "torch": {
            "sum_42": {
                "variable": {
                    "value": "sq_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "sq_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "sq_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_44": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "embeddings2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_45": {
                "variable": {
                    "value": "inverse_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(sq_norm1 * sq_norm2, min=eps ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_89": {
                "variable": {
                    "value": "logsumexp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_cosine_similarity(embeddings, test_embeddings, eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_91": {
                "variable": {
                    "value": "(max_similarities, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_cosine_similarity(embeddings, test_embeddings, eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_92": {
                "variable": {
                    "value": "exp_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities - max_similarities",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_202": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matching_log_probas(train_embeddings, train_targets, test_embeddings, num_classes, eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_45": {
                "input": {
                    "value": "sq_norm1 * sq_norm2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_similarities.new_zeros((batch_size, num_classes, num_samples))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchmeta/utils/metrics.py": {
        "torch": {
            "pad_14": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_width, size[1] - width - pad_width, pad_height, size[0] - height - pad_height)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.5.0",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnet152",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logits.view(batch_size, num_images, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_prototypes(train_logits, train_targets, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "test_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone(padded_test_inputs.view(-1, 3, 224, 224))",
                            "Call"
                        ],
                        [
                            "test_logits.view(batch_size, num_test_images, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(test_logits, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(weights, test_logits.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "test_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(train_features, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "test_logits.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "log_odds_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log1p(-test_log_probas.exp()) - test_log_probas",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_94": {
                "input": {
                    "value": "test_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone(padded_test_inputs.view(-1, 3, 224, 224))",
                            "Call"
                        ],
                        [
                            "test_logits.view(batch_size, num_test_images, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(test_logits, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(weights, test_logits.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log1p_98": {
                "input": {
                    "value": "-test_log_probas.exp()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchmeta/utils/prototype.py": {
        "torch": {
            "max_43": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ones.new_zeros((batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "get_num_samples(targets, num_classes, dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "torch.max(num_samples, torch.ones_like(num_samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_75": {
                "variable": {
                    "value": "squared_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(prototypes.unsqueeze(2) - embeddings.unsqueeze(1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_10": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_77": {
                "input": {
                    "value": "-squared_distances",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ones.new_zeros((batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "get_num_samples(targets, num_classes, dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "torch.max(num_samples, torch.ones_like(num_samples))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchmeta/utils/r2d2.py": {
        "torch": {
            "one_hot_91": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(targets, num_classes=num_classes).to(dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "targets / sqrt(num_samples)",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_106": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embeddings.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_110": {
                "variable": {
                    "value": "solution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings, embeddings.t()) + reg_lambda * eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(embeddings.t(), embeddings) + reg_lambda * eye",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(targets, num_classes=num_classes).to(dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "targets / sqrt(num_samples)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_111": {
                "variable": {
                    "value": "weight_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "solution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.solve(A, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_113": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "embedding_size + bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embeddings.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(targets, num_classes=num_classes).to(dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "targets / sqrt(num_samples)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "solve_118": {
                "variable": {
                    "value": "weight_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings, embeddings.t()) + reg_lambda * eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(embeddings.t(), embeddings) + reg_lambda * eye",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings.t(), targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_109": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ones, embeddings], dim=1)",
                            "Call"
                        ],
                        [
                            "embeddings / sqrt(num_samples)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "input": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ones, embeddings], dim=1)",
                            "Call"
                        ],
                        [
                            "embeddings / sqrt(num_samples)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}