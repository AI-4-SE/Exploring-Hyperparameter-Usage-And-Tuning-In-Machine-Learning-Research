{
    "swag/posteriors/subspaces.py": {
        "sklearn": {
            "TruncatedSVD_129": {
                "variable": {
                    "value": "pca_decomp",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rank.item()",
                            "Call"
                        ],
                        [
                            "self.pca_rank",
                            "Attribute"
                        ],
                        [
                            "max(1, min(pca_rank, self.rank.item()))",
                            "Call"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randomized_svd_132": {
                "variable": {
                    "value": "(_, s, Vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "M": {
                    "value": "cov_mat_sqrt_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cov_mat_sqrt.clone().numpy()",
                            "Call"
                        ],
                        [
                            "cov_mat_sqrt_np / max(1, self.rank.item() - 1) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "n_components": {
                    "value": "pca_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rank.item()",
                            "Call"
                        ],
                        [
                            "self.pca_rank",
                            "Attribute"
                        ],
                        [
                            "max(1, min(pca_rank, self.rank.item()))",
                            "Call"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "self.cov_mat_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.cov_mat_sqrt, vector.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_89": {
                "variable": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rank + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "self.cov_mat_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.cov_mat_sqrt, vector.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_178": {
                "variable": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cov_mat_sqrt.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "self.subspace",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'rank'].item()",
                            "Call"
                        ],
                        [
                            "rank in range(len(eigs))",
                            "Call"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_parameters",
                            "Method Argument"
                        ],
                        [
                            "num_parameters",
                            "Method Argument"
                        ],
                        [
                            "num_parameters",
                            "Method Argument"
                        ],
                        [
                            "num_parameters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "self.cov_mat_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s[:, None] * Vt[:s.size, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "self.cov_mat_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s[:, None] * Vt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_81": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_89": {
                "data": {
                    "value": "self.max_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/rethinking_generalization/gp_train_cifar_binary_corrupted.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loaders['train'].dataset.data",
                            "Attribute"
                        ],
                        [
                            "train_x[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(train_x)",
                            "Call"
                        ],
                        [
                            "train_x.reshape((train_x.shape[0], -1)).float() / 5000",
                            "BinOp"
                        ],
                        [
                            "train_x.float().cuda()",
                            "Call"
                        ],
                        [
                            "train_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(loaders['train'].dataset.targets)",
                            "Call"
                        ],
                        [
                            "train_y[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(train_y)",
                            "Call"
                        ],
                        [
                            "train_y.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'bin_model_corrupted{}.pth'.format(args.corrupted_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loaders['test'].dataset.data",
                            "Attribute"
                        ],
                        [
                            "test_x[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(test_x).float() / 5000",
                            "BinOp"
                        ],
                        [
                            "test_x.reshape((test_x.shape[0], -1)).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/rethinking_generalization/gp_train_cifar_one_vs_all.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('train_x.npy')",
                            "Call"
                        ],
                        [
                            "np.concatenate([train_x[mask][:nsamples], train_x[np.logical_not(mask)][:nsamples]], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_x)",
                            "Call"
                        ],
                        [
                            "train_x.reshape((train_x.shape[0], -1)).float() / args.scale",
                            "BinOp"
                        ],
                        [
                            "train_x.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.load('train_x.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_x)",
                            "Call"
                        ],
                        [
                            "train_x.reshape((train_x.shape[0], -1)).float() / args.scale",
                            "BinOp"
                        ],
                        [
                            "train_x.cuda()",
                            "Call"
                        ],
                        [
                            "train_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(train_y_file)",
                            "Call"
                        ],
                        [
                            "np.concatenate([train_y[mask][:nsamples], train_y[np.logical_not(mask)][:nsamples]], axis=0)",
                            "Call"
                        ],
                        [
                            "(train_y != cls).astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_y)",
                            "Call"
                        ],
                        [
                            "train_y.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.load(train_y_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_y)",
                            "Call"
                        ],
                        [
                            "train_y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(train_y_file)",
                            "Call"
                        ],
                        [
                            "np.concatenate([train_y[mask][:nsamples], train_y[np.logical_not(mask)][:nsamples]], axis=0)",
                            "Call"
                        ],
                        [
                            "(train_y != cls).astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_y)",
                            "Call"
                        ],
                        [
                            "train_y.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.load(train_y_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_y)",
                            "Call"
                        ],
                        [
                            "train_y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('train_x.npy')",
                            "Call"
                        ],
                        [
                            "np.concatenate([train_x[mask][:nsamples], train_x[np.logical_not(mask)][:nsamples]], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_x)",
                            "Call"
                        ],
                        [
                            "train_x.reshape((train_x.shape[0], -1)).float() / args.scale",
                            "BinOp"
                        ],
                        [
                            "train_x.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.load('train_x.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_x)",
                            "Call"
                        ],
                        [
                            "train_x.reshape((train_x.shape[0], -1)).float() / args.scale",
                            "BinOp"
                        ],
                        [
                            "train_x.cuda()",
                            "Call"
                        ],
                        [
                            "train_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_76": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}model{}.pth'.format(prefix, cls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('test_x.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_x).float() / args.scale",
                            "BinOp"
                        ],
                        [
                            "test_x.reshape((test_x.shape[0], -1)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train/eval_multiswag.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt in enumerate(args.swag_ckpts)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "swag_model.subspace.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train/run_swag.py": {
        "torch": {
            "SGD_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_156": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.swag_resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "swag_model.subspace.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "memory_allocated_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swag/camvid.py": {
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "colored_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "label.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "swag/data.py": {
        "torch": {
            "DataLoader_28": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='train', joint_transform=joint_transform, transform=transform_train, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "dataset": {
                    "value": "ft_train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='train', joint_transform=ft_joint_transform, transform=transform_train, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "ft_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='val', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='test', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='train', joint_transform=joint_transform, transform=transform_train, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True and shuffle_train",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='test', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='train', joint_transform=joint_transform, transform=transform_train, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='test', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='train', joint_transform=joint_transform, transform=transform_train, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True and shuffle_train",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='test', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_336": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(root=path, split='test', joint_transform=None, transform=transform_test, **kwargs)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='train', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "get_imagenette160(path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ds(root=path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_328": {
                "dataset": {
                    "value": "tmp_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds(root=path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True and shuffle_train",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/losses.py": {
        "torch": {
            "cross_entropy_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "kl_div_52": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_88": {
                "variable": {
                    "value": "inputs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "variable": {
                    "value": "inputs_perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input + scaled_epsilon * inputs_grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ne_109": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "el",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(y_true) * void_class",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true * mask",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_136": {
                "variable": {
                    "value": "output_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "output[:, 0].view_as(target)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, 1, :, :, :].abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_52": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_108": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_31": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, 1].view_as(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_34": {
                "input": {
                    "value": "(mean - target) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/joint_transforms.py": {
        "torch": {
            "from_numpy_147": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "swag/models/layers.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DenseLayer(in_channels + i * growth_rate, growth_rate) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "variable": {
                    "value": "self.convTrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_54": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/lenet5.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.conv_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.fc_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(800, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes.item()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/mlp.py": {
        "torch": {
            "Parameter_44": {
                "variable": {
                    "value": "base.log_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.ones(1) * 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "torch.ones(1) * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(in_layer_list, out_layer_list)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(in_layer_list, out_layer_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/preresnet.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes[2] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_130": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "planes[2] * block.expansion * int(input_size / 32) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/preresnet_dropout.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_114": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/regression_net.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input[:, :self.col], transformed_output.view(-1, 1)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.dimensions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dimensions[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/tiramisu.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.denseBlocksDown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.transDownBlocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.transUpBlocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.denseBlocksUp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.finalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_channels_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "out_chans_first_conv",
                            "variable"
                        ],
                        [
                            "cur_channels_count + growth_rate * up_blocks[-1]",
                            "BinOp"
                        ],
                        [
                            "prev_block_channels + skip_connection_channel_counts[i]",
                            "BinOp"
                        ],
                        [
                            "prev_block_channels + skip_connection_channel_counts[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "final_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes * 2",
                            "BinOp"
                        ],
                        [
                            "num_classes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.firstconv(x)",
                            "Call"
                        ],
                        [
                            "self.denseBlocksDown[i](out)",
                            "Call"
                        ],
                        [
                            "self.transDownBlocks[i](out)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(out)",
                            "Call"
                        ],
                        [
                            "self.transUpBlocks[i](out, skip)",
                            "Call"
                        ],
                        [
                            "self.denseBlocksUp[i](out)",
                            "Call"
                        ],
                        [
                            "self.finalConv(out)",
                            "Call"
                        ],
                        [
                            "torch.split(out, self.num_classes, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([i.unsqueeze(1) for i in out], 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.unsqueeze(1) for i in out]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans_first_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/vgg.py": {
        "torch": {
            "Sequential_27": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/vgg_dropout.py": {
        "torch": {
            "Sequential_28": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/wide_resnet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nstages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nstages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "swag/models/wide_resnet_dropout.py": {
        "torch": {
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nstages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nstages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/diag_laplace.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.reshape(-1) for p in mean_model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_29": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "fisher_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.__getattr__('%s_var' % name)",
                            "Call"
                        ],
                        [
                            "1.0 / (ds_size * fisher_diag + prior_var)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_109": {
                "input": {
                    "value": "torch.log(self.sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_85": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_109": {
                "input": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[p.grad.reshape(-1) ** 2 for p in self.base_model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/ess.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/ffg_vi_model.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(self.rank).fill_(init_inv_softplus_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior_log_sigma - torch.log(sigma) + 0.5 * sigma ** 2 / math.exp(self.prior_log_sigma * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "torch.log(sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_26": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_38": {
                "input": {
                    "value": "self.inv_softplus_sigma.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_45": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_54": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach().cpu()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inv_softplus_sigma.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_28": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inv_softplus_sigma.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach().cpu()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "self.mu ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/inferences.py": {
        "torch": {
            "clamp_56": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(variance, self.var_clamp)",
                            "Call"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.var_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LowRankMultivariateNormal_59": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "cov_diag": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(variance, self.var_clamp)",
                            "Call"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                },
                "cov_factor": {
                    "value": "cov_factor.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[param for param in self.vi_model.parameters() if param.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "proj_params",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.subspace.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.subspace.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.subspace.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[proj_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/laplace.py": {
        "torch": {
            "zeros_like_14": {
                "variable": {
                    "value": "grad_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_17": {
                "variable": {
                    "value": "(grad_x,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "flat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state[group['mod']]['x']",
                            "Subscript"
                        ],
                        [
                            "x.data.t()",
                            "Call"
                        ],
                        [
                            "F.unfold(x, mod.kernel_size, padding=mod.padding, stride=mod.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "x.data.permute(1, 0, 2).contiguous().view(x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones], dim=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(flat_y)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "input": {
                    "value": "y.shape + x.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_243": {
                "input": {
                    "value": "iggt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], num_locations=state['num_locations'])",
                            "Call"
                        ],
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], state['num_locations'])",
                            "Call"
                        ],
                        [
                            "state['iggt']",
                            "Subscript"
                        ],
                        [
                            "state['iggt']",
                            "Subscript"
                        ],
                        [
                            "ggt_ichol.t().matmul(ggt_ichol)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.grad.data",
                            "Attribute"
                        ],
                        [
                            "g.contiguous().view(s[0], s[1] * s[2] * s[3])",
                            "Call"
                        ],
                        [
                            "torch.cat([g, gb.view(gb.shape[0], 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(iggt, g), ixxt)",
                            "Call"
                        ],
                        [
                            "g / state['num_locations']",
                            "BinOp"
                        ],
                        [
                            "g[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "g.contiguous().view(*s)",
                            "Call"
                        ],
                        [
                            "weight.grad.data",
                            "Attribute"
                        ],
                        [
                            "g.permute(1, 0, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([g, gb], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mm(ixxt, g.contiguous().view(-1, s[0] * s[2] * s[3]))",
                            "Call"
                        ],
                        [
                            "g.view(-1, s[0], s[2], s[3]).permute(1, 0, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(iggt, g.view(s[0], -1)).view(s[0], -1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "g[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_265": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ixxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], num_locations=state['num_locations'])",
                            "Call"
                        ],
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], state['num_locations'])",
                            "Call"
                        ],
                        [
                            "state['ixxt']",
                            "Subscript"
                        ],
                        [
                            "state['ixxt']",
                            "Subscript"
                        ],
                        [
                            "xxt_ichol.t().matmul(xxt_ichol)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g.contiguous().view(-1, s[0] * s[2] * s[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_267": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iggt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], num_locations=state['num_locations'])",
                            "Call"
                        ],
                        [
                            "self._inv_covs(state['xxt'], state['ggt'], state['num_locations'])",
                            "Call"
                        ],
                        [
                            "state['iggt']",
                            "Subscript"
                        ],
                        [
                            "state['iggt']",
                            "Subscript"
                        ],
                        [
                            "ggt_ichol.t().matmul(ggt_ichol)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g.view(s[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_333": {
                "variable": {
                    "value": "xxt_ichol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xxt_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(xxt + torch.diag(diag_xxt)).cholesky()",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_334": {
                "variable": {
                    "value": "ggt_ichol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ggt_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ggt + torch.diag(diag_ggt)).cholesky()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_242": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, gb.view(gb.shape[0], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, gb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_292": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params'][0]",
                            "Subscript"
                        ],
                        [
                            "group['params'][0]",
                            "Subscript"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state['ixxt'].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "state['iggt'].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ixxt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ixxt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_173": {
                "variable": {
                    "value": "weight_inv_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_hessian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(weight.grad, weight) + diag_comp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_284": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state[group['mod']]['x']",
                            "Subscript"
                        ],
                        [
                            "x.data.t()",
                            "Call"
                        ],
                        [
                            "F.unfold(x, mod.kernel_size, padding=mod.padding, stride=mod.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "x.data.permute(1, 0, 2).contiguous().view(x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones], dim=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "mod.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "mod.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "mod.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_180": {
                "variable": {
                    "value": "state[b_ic]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "bias_hessian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(bias.grad, bias) + diag_comp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_295": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state[group['mod']]['x']",
                            "Subscript"
                        ],
                        [
                            "x.data.t()",
                            "Call"
                        ],
                        [
                            "F.unfold(x, mod.kernel_size, padding=mod.padding, stride=mod.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "x.data.permute(1, 0, 2).contiguous().view(x.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones], dim=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_309": {
                "input": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state[group['mod']]['gy']",
                            "Subscript"
                        ],
                        [
                            "gy.data.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "gy.contiguous().view(gy.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "gy.data.t()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gy.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_320": {
                "input": {
                    "value": "xxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xxt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_321": {
                "input": {
                    "value": "ggt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ggt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_168": {
                "n": {
                    "value": "weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_329": {
                "input": {
                    "value": "diag_xxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xxt.new(xxt.shape[0]).fill_((eps * pi) ** 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_330": {
                "input": {
                    "value": "diag_ggt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ggt.new(ggt.shape[0]).fill_((eps / pi) ** 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_177": {
                "n": {
                    "value": "bias.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "bias.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bias.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/proj_model.py": {
        "torch": {}
    },
    "swag/posteriors/pyro.py": {
        "torch": {
            "cat_89": {
                "variable": {
                    "value": "self.all_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self.mcmc_run.marginal(sites='t').support(flatten=True).values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_132": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_117": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/realnvp.py": {
        "torch": {
            "zeros_89": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "coupling_layers_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(coupling_layers_num, D)",
                            "Call"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nett() for _ in range(len(masks))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_15": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nets() for _ in range(len(masks))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_85": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(D).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(D).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.seq_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(D, inner_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "nn.Linear(D, inner_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_86": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_26": {
                "input": {
                    "value": "-smx",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_36": {
                "input": {
                    "value": "smz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](mz)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "swag/posteriors/sghmc.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.t]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1 - self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "n * self.t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_47": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "std * torch.ones_like(self.t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "self.t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_47": {
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/sgld.py": {
        "torch": {
            "randn_like_37": {
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "swag/posteriors/swag.py": {
        "torch": {
            "clamp_65": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sq_mean - self.mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.var_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "eps_low_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cov_factor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eig_107": {
                "variable": {
                    "value": "(spectrum, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "subspace @ subspace.t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_108": {
                "variable": {
                    "value": "(spectrum, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrum[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "self.num_parameters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "self.num_parameters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_like_83": {
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.sq_mean - self.mean ** 2, self.var_clamp)",
                            "Call"
                        ],
                        [
                            "self._get_mean_and_variance()",
                            "Call"
                        ],
                        [
                            "self._get_mean_and_variance()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "swag/posteriors/vi_model.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(self.rank).fill_(init_inv_softplus_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior_log_sigma - torch.log(sigma) + 0.5 * sigma ** 2 / math.exp(self.prior_log_sigma * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[param for param in self.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "torch.log(sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_26": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_30": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_43": {
                "input": {
                    "value": "self.inv_softplus_sigma.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_51": {
                "input": {
                    "value": "self.inv_softplus_sigma.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_52": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_58": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "input": {
                    "value": "self.inv_softplus_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach().cpu()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inv_softplus_sigma.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_44": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "self.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inv_softplus_sigma.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_60": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma.detach().cpu()) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softplus(self.inv_softplus_sigma) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "self.mu ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "swag/posteriors/vinf_model.py": {
        "torch": {
            "Adam_67": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[param for param in self.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_29": {
                "input": {
                    "value": "t.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "swag/utils.py": {
        "torch": {
            "max_51": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i.contiguous().view(-1, 1) for i in lst]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "save_67": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, '%s-%d.pt' % (name, epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_203": {
                "variable": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_204": {
                "variable": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_258": {
                "input": {
                    "value": "x / (1.0 - x + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "(x - m).exp().sum(dim=dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(model, input, target)",
                            "Call"
                        ],
                        [
                            "criterion(model, input, target)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_268": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_174": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(model, input, target)",
                            "Call"
                        ],
                        [
                            "criterion(model, input, target)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ubdl_data/corruptions.py": {
        "torch": {}
    },
    "ubdl_data/make_cifar_c.py": {
        "torch": {}
    }
}