{
    "medgan.py": {
        "sklearn": {
            "train_test_split_55": {
                "variable": {
                    "value": "(trainX, validX)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "_VALIDATION_RATIO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_231": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(len(preds_real)), np.zeros(len(preds_fake))], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([preds_real, preds_fake], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "reshape_142": {
                "variable": {
                    "value": "inputMean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.reduce_mean(x_input, 0), [batchSize])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batchSize, self.inputDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_input, inputMean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_191": {
                "variable": {
                    "value": "x_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "x_random",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.randomDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "bn_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_208": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "x_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_256": {
                "variable": {
                    "value": "x_random",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.randomDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_257": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "bn_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_265": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_270": {
                "variable": {
                    "value": "all_regs",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_272": {
                "variable": {
                    "value": "optimize_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_273": {
                "variable": {
                    "value": "optimize_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_274": {
                "variable": {
                    "value": "optimize_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_276": {
                "variable": {
                    "value": "initOp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_279": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "saveMaxKeep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aed_W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, self.decompressDims[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aed_b_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.decompressDims[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, self.generatorDims[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, self.generatorDims[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.sigmoid(tf.add(tf.matmul(tempVec, W), b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "x_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "x_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "x_reconst",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_205": {
                "variable": {
                    "value": "x_reconst",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "autoencoder",
                    "type": "str",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.l2scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aee_W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, compressDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aee_b_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[compressDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aed_W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, decompressDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'aed_b_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[decompressDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "x_reconst",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(tempVec, W), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_sum(x_input * tf.log(x_reconst + 1e-12) + (1.0 - x_input) * tf.log(1.0 - x_reconst + 1e-12), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x_reconst",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(tempVec, W), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x_input - x_reconst) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.l2scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, genDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(self.l2scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, genDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_133": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ],
                        [
                            "batch_norm(h, decay=self.bnDecay, scale=True, is_training=bn_train, updates_collections=None, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_141": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_142": {
                "input": {
                    "value": "tf.reduce_mean(x_input, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "l2_regularizer(self.l2scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tempDim, discDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[discDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tempVec, W)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tempVec, W)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tempVec, W)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tempVec, W)",
                            "Call"
                        ],
                        [
                            "self.discriminatorActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keepRate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keepRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keepRate",
                            "Method Argument"
                        ],
                        [
                            "keepRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_176": {
                "input_tensor": {
                    "value": "tf.log(y_hat_real + 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "input_tensor": {
                    "value": "tf.log(y_hat_fake + 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ],
                        [
                            "x_input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "x": {
                    "value": "tf.add(tf.matmul(tempVec, W), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_166": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_170": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_172": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_176": {
                "x": {
                    "value": "y_hat_real + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "x": {
                    "value": "y_hat_fake + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_199": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_203": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_205": {
                "x": {
                    "value": "tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "decodeVariables['aed_b_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_67": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_75": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_86": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_89": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_149": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_155": {
                "x": {
                    "value": "tf.matmul(tempVec, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_b_' + str(i), shape=[compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_b_' + str(i), shape=[self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b_' + str(i), shape=[discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_166": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decodeVariables['aed_W_' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "x_input * tf.log(x_reconst + 1e-12) + (1.0 - x_input) * tf.log(1.0 - x_reconst + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_149": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "tempVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, W), b))",
                            "Call"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "h3 + tempVec",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x_input, inputMean], 1)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "x_fake",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ],
                        [
                            "x_emb",
                            "variable"
                        ],
                        [
                            "self.aeActivation(tf.add(tf.matmul(tempVec, decodeVariables['aed_W_' + str(i)]), decodeVariables['aed_b_' + str(i)]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('aee_W_' + str(i), shape=[tempDim, compressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, decompressDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('aed_W_' + str(i), shape=[tempDim, self.decompressDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, genDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W' + str(i), shape=[tempDim, self.generatorDims[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_' + str(i), shape=[tempDim, discDim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[tempDim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_87": {
                "x": {
                    "value": "1.0 - x_reconst + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}