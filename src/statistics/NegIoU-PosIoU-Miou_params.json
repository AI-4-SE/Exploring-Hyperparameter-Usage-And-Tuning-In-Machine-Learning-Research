{
    "eval.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_425": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_63": {
                "t": {
                    "value": "torch.FloatTensor",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_57": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_61": {
                "t": {
                    "value": "torch.FloatTensor",
                    "possible_values": []
                }
            },
            "load_433": {
                "f": {
                    "value": "args.trained_model",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:1' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unsqueeze_394": {
                "variable": {
                    "value": "predict_classes",
                    "possible_values": []
                },
                "input": {
                    "value": "predict_classes",
                    "possible_values": [
                        [
                            "predictions[1].to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(predict_classes, 1).repeat(1, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_425": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "masked_select_397": {
                "input": {
                    "value": "predict_boxes",
                    "possible_values": [
                        [
                            "predictions[0].to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "predict_classes == j",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_398": {
                "input": {
                    "value": "predict_scores",
                    "possible_values": [
                        [
                            "predictions[2].to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "index",
                    "possible_values": [
                        [
                            "predict_classes == j",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "my_dataset.py": {
        "torch": {
            "NightDataSet_9": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.transforms": {
                    "value": "transforms",
                    "possible_values": []
                }
            },
            "as_tensor_71": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "as_tensor_72": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(labels, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "as_tensor_73": {
                "variable": {
                    "value": "iscrowd",
                    "possible_values": []
                },
                "data": {
                    "value": "iscrowd",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(iscrowd, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "as_tensor_74": {
                "variable": {
                    "value": "height_width",
                    "possible_values": []
                },
                "data": {
                    "value": "height_width",
                    "possible_values": [
                        [
                            "[data_height, data_width]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(height_width, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "image_id",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx]",
                    "possible_values": []
                }
            }
        }
    },
    "predict_test.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "torch.unsqueeze(img, dim=0)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(np.asarray(original_img), cv2.COLOR_RGB2BGR)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "train_weights",
                    "possible_values": [
                        [
                            "'./save_weights/ssd512-24.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/res50_backbone.py": {
        "torch": {
            "Bottleneck_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_10": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_12": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Conv2d_14": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_16": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Conv2d_18": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel * self.expansion",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_20": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channel * self.expansion",
                        "possible_values": []
                    }
                },
                "ReLU_21": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.in_channel, channel * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(channel * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.include_top": {
                    "value": "include_top",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.in_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_56": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.in_channel",
                        "possible_values": []
                    }
                },
                "ReLU_57": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_58": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "AdaptiveAvgPool2d_64": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channel, channel * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "flatten_100": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "self.in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "channel * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "src/ssd_model.py": {
        "torch": {
            "SSD640_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.feature_extractor": {
                    "value": "backbone",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_36": {
                    "variable": {
                        "value": "self.loc",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "location_extractors",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "ModuleList_37": {
                    "variable": {
                        "value": "self.conf",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "confidence_extractors",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "Loss_159": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "SmoothL1Loss_172": {
                    "variable": {
                        "value": "self.location_loss",
                        "possible_values": []
                    },
                    "reduction": {
                        "value": "none",
                        "possible_values": []
                    }
                },
                "Parameter_174": {
                    "variable": {
                        "value": "self.dboxes",
                        "possible_values": []
                    },
                    "data": {
                        "value": "dboxes(order='xywh').transpose(0, 1).unsqueeze(dim=0)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "CrossEntropyLoss_179": {
                    "variable": {
                        "value": "self.confidence_loss",
                        "possible_values": []
                    },
                    "reduction": {
                        "value": "none",
                        "possible_values": []
                    }
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.additional_blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "additional_blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "annotate_108": {
                "variable": {
                    "value": "detection_features",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Tensor]",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "log_softmax_194": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "dbox_ious_max",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "possible_values": []
                },
                "out": {
                    "value": "5440",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "dbox_ious_New",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "possible_values": []
                },
                "out": {
                    "value": "5440",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "c_ofmaxIOU",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "possible_values": []
                },
                "out": {
                    "value": "5440",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "con_neg[mask]",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "clamp_334": {
                "variable": {
                    "value": "neg_num",
                    "possible_values": []
                },
                "input": {
                    "value": "3 * pos_num",
                    "possible_values": []
                },
                "max": {
                    "value": "mask.size(1)",
                    "possible_values": []
                }
            },
            "unsqueeze_334": {
                "variable": {
                    "value": "neg_num",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_ch, middle_ch, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "nll_loss_198": {
                "input": {
                    "value": "tmp1",
                    "possible_values": [
                        [
                            "tmp * fIou",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "(gxy, gwh)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "(cxy, cwh)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "confs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_224": {
                "input": {
                    "value": "ploc[:, 2:, :] / self.scale_wh",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_22": {
                "f": {
                    "value": "pretrain_path",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "oc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nd * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "oc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nd * self.num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "input_ch",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "middle_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "middle_ch",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "middle_ch",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "output_ch",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pow_187": {
                "input": {
                    "value": "Ious",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "possible_values": []
                }
            },
            "pow_189": {
                "input": {
                    "value": "1 - Ious",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "PostProcess_548": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_551": {
                    "variable": {
                        "value": "self.dboxes_xywh",
                        "possible_values": []
                    },
                    "data": {
                        "value": "dboxes(order='xywh').unsqueeze(dim=0)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "max_84": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "possible_values": []
                }
            },
            "min_85": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "possible_values": []
                }
            },
            "max_113": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, :2]",
                    "possible_values": []
                }
            },
            "min_114": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, 2:]",
                    "possible_values": []
                }
            },
            "min_138": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, :2]",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, 2:]",
                    "possible_values": []
                }
            },
            "sqrt_145": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(wh[:, 0], 2) + torch.pow(wh[:, 1], 2)",
                    "possible_values": []
                }
            },
            "arange_198": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "best_bbox_idx.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "labels_out",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nboxes",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "arange_292": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "scores_in.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "scores_in.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bboxes_in.device",
                            "Attribute"
                        ],
                        [
                            "bboxes_in.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_308": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_in > 0.05",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_308": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "bboxes_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_out",
                    "possible_values": [
                        [
                            "self.dboxes.clone()",
                            "Call"
                        ],
                        [
                            "bboxes_in[keep, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(bboxes_out, dim=0).contiguous()",
                            "Call"
                        ],
                        [
                            "bboxes_in[keep, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "scores_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_out",
                    "possible_values": [
                        [
                            "scores_in[keep]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores_out, dim=0).contiguous()",
                            "Call"
                        ],
                        [
                            "scores_in[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "labels_out",
                    "possible_values": []
                },
                "data": {
                    "value": "labels_out",
                    "possible_values": [
                        [
                            "torch.zeros(self.nboxes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "labels[keep]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels_out, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_430": {
                "variable": {
                    "value": "self.dboxes",
                    "possible_values": []
                },
                "data": {
                    "value": "self.default_boxes",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "arange_614": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "scores_in.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "scores_in.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bboxes_in.device",
                            "Attribute"
                        ],
                        [
                            "bboxes_in.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_630": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_in > 0.05",
                    "possible_values": []
                }
            },
            "squeeze_630": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "annotate_654": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Tuple[Tensor, Tensor, Tensor]]",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "empty_529": {
                "*size": {
                    "value": "(0,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "possible_values": []
                }
            },
            "pow_145": {
                "input": {
                    "value": "wh[:, 1]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "device_230": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "softmax_260": {
                "input": {
                    "value": "scores_in",
                    "possible_values": [
                        [
                            "scores_in.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "scores_in[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "scores_in.reshape(-1)",
                            "Call"
                        ],
                        [
                            "scores_in.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "scores_in[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "scores_in.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_593": {
                "input": {
                    "value": "scores_in",
                    "possible_values": [
                        [
                            "scores_in.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "scores_in[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "scores_in.reshape(-1)",
                            "Call"
                        ],
                        [
                            "scores_in.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "scores_in[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "scores_in.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "empty_386": {
                "size": {
                    "value": "(0,)",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "parser_data.device if torch.cuda.is_available() else 'cpu'",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "test_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "NightDataSet(night_root, data_transform['test'], train_set='test.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.005",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "possible_values": []
                }
            },
            "StepLR_73": {
                "variable": {
                    "value": "lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "device_11": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "parser_data.resume",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "train_weights",
                    "possible_values": [
                        [
                            "'./save_weights/model.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device(parser_data.device if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train_ssd512.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "parser_data.device if torch.cuda.is_available() else 'cpu'",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "NightDataSet(night_root, data_transform['train'], train_set='train.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "val_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "NightDataSet(night_root, data_transform['val'], train_set='val.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.005",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "possible_values": []
                }
            },
            "StepLR_84": {
                "variable": {
                    "value": "lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "device_11": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "parser_data.resume",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "save_files",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./save_weights/ssd512-{}.pth'.format(epoch)",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train_utils/coco_eval.py": {
        "torch": {
            "stack_167": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train_utils/coco_utils.py": {
        "torch": {}
    },
    "train_utils/group_by_aspect_ratio.py": {
        "torch": {
            "GroupedBatchSampler_23": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                },
                "self.sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "SubsetSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "self.group_ids": {
                    "value": "group_ids",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                }
            },
            "SubsetSampler_95": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "range(len(dataset))",
                            "Call"
                        ],
                        [
                            "range(len(dataset))",
                            "Call"
                        ],
                        [
                            "range(len(dataset))",
                            "Call"
                        ],
                        [
                            "range(len(dataset))",
                            "Call"
                        ],
                        [
                            "range(len(dataset))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "SubsetSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "14",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "possible_values": []
                }
            }
        }
    },
    "train_utils/train_eval_utils.py": {
        "torch": {
            "get_num_threads_81": {
                "variable": {
                    "value": "n_threads",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "variable": {
                    "value": "local_size",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "possible_values": [
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(device)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "set_num_threads_83": {
                "int": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "possible_values": [
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(device)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "set_num_threads_138": {
                "int": {
                    "value": "n_threads",
                    "possible_values": [
                        [
                            "torch.get_num_threads()",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_157": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "f",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "stack_372": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_420": {
                "variable": {
                    "value": "padding",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.gpu",
                    "possible_values": []
                }
            },
            "is_available_224": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_226": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_275": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_365": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_408": {
                "data": {
                    "value": "[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "save_459": {
                "obj": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "stack_40": {
                "tensors": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_41": {
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "as_tensor_42": {
                "data": {
                    "value": "img_id",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_101": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "synchronize_102": {
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "empty_418": {
                "*size": {
                    "value": "(max_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "is_available_298": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_469": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_memory_allocated_304": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "transform.py": {
        "torch": {
            "tensor_100": {
                "data": {
                    "value": "[[left, top, right, bottom]]",
                    "possible_values": []
                }
            }
        }
    }
}