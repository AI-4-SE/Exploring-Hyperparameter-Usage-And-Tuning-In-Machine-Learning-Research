{
    "network.py": {
        "sklearn": {},
        "tensorflow": {
            "GRUCell_107": {
                "variable": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.size_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.glorot_normal_initializer()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "xavier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(stacked_gru, self.data_pl, dtype=tf.float32, sequence_length=self.length_pl, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_121": {
                "variable": {
                    "value": "relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(output, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_length + (length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "dropout_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=prev_layer, num_outputs=self.fc_units)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Dropout_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_146": {
                "variable": {
                    "value": "(context_data, sequence_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "context_features": {
                    "value": "contex_features_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'N': tf.io.FixedLenFeature([], dtype=tf.int64), 'ID': tf.io.FixedLenFeature([], dtype=tf.string), 'Label': tf.io.FixedLenFeature([], dtype=tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'LightCurve_1': tf.io.VarLenFeature(dtype=tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_152": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_data['N']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_data['Label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_154": {
                "variable": {
                    "value": "ID_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_data['ID']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_156": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(context_data['Label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(lbl, self.num_classes, on_value=1, off_value=0, axis=-1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_157": {
                "variable": {
                    "value": "lc_",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "sequence_data['LightCurve_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "lc_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.sparse.to_dense(sequence_data['LightCurve_1'])",
                            "Call"
                        ],
                        [
                            "tf.cast(lc_, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "lc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.sparse.to_dense(sequence_data['LightCurve_1'])",
                            "Call"
                        ],
                        [
                            "tf.cast(lc_, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, self.window]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "self.data_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.window]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.target_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.length_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "self.id_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "IsTrain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_202": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_273": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[err_summ, loss_summ, h, last_h_hist, cell_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_275": {
                "variable": {
                    "value": "self.err_sum_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Err_Sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_276": {
                "variable": {
                    "value": "self.loss_sum_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Loss_Sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_277": {
                "variable": {
                    "value": "err_sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Err_",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.err_sum_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_278": {
                "variable": {
                    "value": "loss_sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Loss_",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_sum_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_279": {
                "variable": {
                    "value": "self.summary_op_mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[err_sum_, loss_sum_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_282": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_283": {
                "variable": {
                    "value": "self.writer_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_folder_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_default_graph()",
                            "Call"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_284": {
                "variable": {
                    "value": "self.writer_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_folder_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_default_graph()",
                            "Call"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_287": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.filename_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Filename",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self.epochs_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.handle_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Handle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_169": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "self.filename_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_output_types_183": {
                "variable": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_or_iterator": {
                    "value": "self.dataset_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_output_shapes_184": {
                "variable": {
                    "value": "output_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_or_iterator": {
                    "value": "self.dataset_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_initializable_iterator_188": {
                "variable": {
                    "value": "self.eval_iterator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_eval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_208": {
                "variable": {
                    "value": "stacked_gru",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "grus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.GRU_cell() for _ in range(self.rnn_layers)]",
                            "ListComp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_209": {
                "variable": {
                    "value": "(output, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "stacked_gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell(grus, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.data_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.length_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "histogram_213": {
                "variable": {
                    "value": "last_h_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "State",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.last_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_238": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.01, shape=[self.num_classes], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(bias, name='Softmax_bias')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Softmax_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.fc, weight) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Softmax_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_244": {
                "variable": {
                    "value": "self.pred_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_245": {
                "variable": {
                    "value": "self.targ_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_246": {
                "variable": {
                    "value": "mistakes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.targ_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pred_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "variable": {
                    "value": "self.err",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(mistakes, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_248": {
                "variable": {
                    "value": "err_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.err",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_251": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.fc, weight) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_252": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.target_pl, logits=logit, name='Cross_entropy')",
                            "Call"
                        ],
                        [
                            "sess.run(tensors, feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_253": {
                "variable": {
                    "value": "loss_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_256": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_257": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.train.exponential_decay(self.lr, self.global_step, 1000, 0.98, staircase=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_default_graph_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_116": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(stacked_gru, self.data_pl, dtype=tf.float32, sequence_length=self.length_pl, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(stacked_gru, self.data_pl, dtype=tf.float32, sequence_length=self.length_pl, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FixedLenFeature_141": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_142": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_143": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_145": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_164": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_164": {
                "name": {
                    "value": "Iterators",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "RNN_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Cell_Values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "FC_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_233": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.fc_units, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_234": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.truncated_normal([self.fc_units, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='Softmax_weight')",
                            "Call"
                        ],
                        [
                            "tf.random.truncated_normal([self.size_hidden, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='SoftMax_weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Softmax_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_250": {
                "name": {
                    "value": "Cross_Entropy_Loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_255": {
                "name": {
                    "value": "Optimizer_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_236": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.size_hidden, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.truncated_normal([self.fc_units, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='Softmax_weight')",
                            "Call"
                        ],
                        [
                            "tf.random.truncated_normal([self.size_hidden, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='SoftMax_weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "SoftMax_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "a": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.truncated_normal([self.fc_units, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='Softmax_weight')",
                            "Call"
                        ],
                        [
                            "tf.random.truncated_normal([self.size_hidden, self.num_classes], stddev=0.1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(weight, name='SoftMax_weight')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_247": {
                "x": {
                    "value": "mistakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(self.targ_index, self.pred_index)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_265": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_355": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_218": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.name.split('/')[-2] + '_' + w.name.split('/')[-1][:-2]",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grus[-1].weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "histogram_266": {
                "name": {
                    "value": "'{}_grad_cap'.format(var.name.replace(':', '_'))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -5, 5)",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "preprocesser.py": {
        "sklearn": {
            "train_test_split_295": {
                "variable": {
                    "value": "(train_ids, test_val_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.data_train.index.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.train_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stratify": {
                    "value": "self.data_train.Class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_300": {
                "variable": {
                    "value": "(test_ids, val_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_val_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.test_size / (1 - self.train_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "self.data_train.loc[test_val_ids].Class",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "TFRecordWriter_361": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "Features_68": {
                "variable": {
                    "value": "element_context",
                    "type": "variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "{'N': tf.train.Feature(int64_list=tf.train.Int64List(value=[N])), 'ID': tf.train.Feature(bytes_list=tf.train.BytesList(value=[ID_])), 'Label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_75": {
                "variable": {
                    "value": "lc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=sequence.ravel())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FeatureList_79": {
                "variable": {
                    "value": "lcs",
                    "type": "variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "[lc_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FeatureLists_85": {
                "variable": {
                    "value": "element_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_list": {
                    "value": "lc_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'LightCurve_1': lcs}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SequenceExample_87": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "context": {
                    "value": "element_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature={'N': tf.train.Feature(int64_list=tf.train.Int64List(value=[N])), 'ID': tf.train.Feature(bytes_list=tf.train.BytesList(value=[ID_])), 'Label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label]))})",
                            "Call"
                        ]
                    ]
                },
                "feature_lists": {
                    "value": "element_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.FeatureLists(feature_list=lc_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatList_76": {
                "value": {
                    "value": "sequence.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_69": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_70": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[ID_])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_71": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_69": {
                "value": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_70": {
                "value": {
                    "value": "[ID_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_71": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}