{
    "dataset/tlfm_dataset.py": {
        "torch": {
            "arange_247": {
                "variable": {
                    "value": "x_cord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma * 4 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([torch.arange(height, dtype=torch.float, device=img.device), torch.arange(width, dtype=torch.float, device=img.device)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_263": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_263": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "bf_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bf_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bf_images, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(path_bf_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_gfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_rfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_150": {
                "variable": {
                    "value": "gfp_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gfp_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gfp_images, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "rfp_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rfp_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rfp_images, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bf_images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_252": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2.0 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_260": {
                "input": {
                    "value": "torch.cat([dx, dy], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * sigma ** 2) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2.0 * sigma ** 2))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.repeat(1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_260": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_272": {
                "input": {
                    "value": "img[None] if img.ndimension() == 3 else img",
                    "type": "IfExp",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([torch.arange(height, dtype=torch.float, device=img.device), torch.arange(width, dtype=torch.float, device=img.device)]), dim=-1).unsqueeze(dim=0).flip(dims=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "sample_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(path_bf_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_gfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_rfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(path_bf_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_gfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(path_rfp_image, -1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_170": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bf_images, gfp_images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images.split(split_size=images.shape[0] // 2, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bf_images, gfp_images, rfp_images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images.split(split_size=images.shape[0] // 3, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_258": {
                "*size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_260": {
                "tensors": {
                    "value": "[dx, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_263": {
                "*tensors": {
                    "value": "[torch.arange(height, dtype=torch.float, device=img.device), torch.arange(width, dtype=torch.float, device=img.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_263": {
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_264": {
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/utils.py": {
        "torch": {
            "tensor_17": {
                "data": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/adaptive_discriminator_augmentation.py": {
        "torch": {
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_213": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flatten(start_dim=1, end_dim=2)",
                            "Call"
                        ],
                        [
                            "self.augmentation_pipeline(images, self.p)",
                            "Call"
                        ],
                        [
                            "images.view(original_shape)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "translation_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(images.shape[-2] * random.uniform(-0.125, 0.125)), int(images.shape[-1] * random.uniform(-0.125, 0.125)))",
                            "Tuple"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "180.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "torch.sign(prediction_scalar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "torch.sign(prediction_pixel_wise.mean(dim=(-1, -2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_116": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_120": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_127": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_131": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_149": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "np.random.uniform(low=-180, high=180, size=len(images_rotated))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_166": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_184": {
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "np.random.uniform(low=-180, high=180, size=len(images_rotated))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_51": {
                "input": {
                    "value": "prediction_scalar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_52": {
                "input": {
                    "value": "prediction_pixel_wise.mean(dim=(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "images.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "np.random.lognormal(mean=0, sigma=(0.2 * math.log(2)) ** 2, size=(len(images_scaling), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "images.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "images.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "np.random.lognormal(mean=0, sigma=(0.2 * math.log(2)) ** 2, size=(len(images_scaling), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "images.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "len(images_scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "len(images_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/equalized_layer.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(out_channels, in_channels, *self.kernel_size, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(in_channels * (self.kernel_size[0] * self.kernel_size[1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "self.scale_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(out_channels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(in_channels, out_channels, *self.kernel_size, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(in_channels * (self.kernel_size[0] * self.kernel_size[1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "self.scale_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(out_channels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(out_channels, in_channels, kernel_size, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(in_channels * self.kernel_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "self.scale_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(2) / np.sqrt(out_channels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(out_channels, in_channels, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.scale_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv_transpose2d_138": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_141": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.scale_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_205": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.scale_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_251": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_253": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.scale_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_276": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_102": {
                "*size": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_170": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_226": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_276": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/loss.py": {
        "torch": {
            "mean_64": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction * (-label + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_192": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-prediction) * label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_194": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(prediction) * (-label + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_311": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(prediction_real.sum(), prediction_real_pixel_wise.sum()) if prediction_real_pixel_wise is not None else prediction_real.sum()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "image_real",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_347": {
                "variable": {
                    "value": "grad_real",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "prediction_fake.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "image_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "self.mean_path_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_388": {
                "variable": {
                    "value": "path_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_388": {
                "variable": {
                    "value": "path_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_394": {
                "variable": {
                    "value": "path_length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(path_lengths - self.mean_path_length) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_443": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max(1, int(input.shape[0] * v))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_34": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_fake * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_fake.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-prediction_fake) * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_fake.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-prediction_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-prediction_real) * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_real.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(prediction_fake) * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_fake.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(-prediction_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(prediction_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "prediction * label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_275": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction.device), prediction - 1.0) * label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_278": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction.device), -prediction - 1.0) * (-label + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "prediction_real * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_real.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "prediction_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "prediction_fake * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_fake.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "prediction_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_130": {
                "input": {
                    "value": "-prediction_fake",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_167": {
                "input": {
                    "value": "-prediction_real",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_169": {
                "input": {
                    "value": "prediction_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_192": {
                "input": {
                    "value": "-prediction",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_194": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_235": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction_real.device), prediction_real - 1.0) * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_real.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_240": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction_real.device), -prediction_fake - 1.0) * weight.view(1, 1, 1, weight.shape[-2], weight.shape[-1]).to(prediction_fake.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_247": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction_real.device), prediction_real - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_250": {
                "input": {
                    "value": "torch.minimum(torch.tensor(0.0, dtype=torch.float, device=prediction_real.device), -prediction_fake - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_126": {
                "input": {
                    "value": "-prediction_fake",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_158": {
                "input": {
                    "value": "-prediction_real",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_162": {
                "input": {
                    "value": "prediction_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_247": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction_real.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "prediction_real - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_250": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction_real.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-prediction_fake - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_275": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "prediction - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_278": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-prediction - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_235": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction_real.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "prediction_real - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_240": {
                "input": {
                    "value": "torch.tensor(0.0, dtype=torch.float, device=prediction_real.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-prediction_fake - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction_real.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction_real.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction_real.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction_real.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/misc.py": {
        "torch": {
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(range(n), size=n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_211": {
                "input": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.choice(range(n), size=n))",
                            "Call"
                        ],
                        [
                            "torch.arange(start=n - 1, end=-1, step=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.arange(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_212": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_models, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_211": {
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_252": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(values)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.path_metrics, '{}.pt'.format(metric_name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_250": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_250": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "self.temp_metrics[metric_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "self.temp_metrics[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_223": {
                "input": {
                    "value": "input_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_224": {
                "input": {
                    "value": "input_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_225": {
                "input": {
                    "value": "input_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/model_wrapper.py": {
        "torch": {
            "MSELoss_36": {
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Identity_125": {
                "variable": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "self.generator_ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator_ema",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "fake_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_images, real_images[:max(1, int(self.hyperparameters['batch_factor_wrong_order'] * real_images.shape[0])), :, misc.random_permutation(real_images.shape[2])]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__296": {
                "parameters": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__410": {
                "parameters": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__323": {
                "parameters": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__348": {
                "parameters": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__371": {
                "parameters": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__438": {
                "parameters": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/multi_stylegan_generator.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.main_convolutions_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.output_blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.main_convolutions_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.output_blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_88": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[skip_1, skip_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_252": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, channel, size[0], size[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_337": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channels, in_channels, self.kernel_size[0], self.kernel_size[1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_502": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, 1, 1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_560": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_kernel(kernel=blur_kernel)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "self.make_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "kernel * sampling_factor ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_626": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_kernel(kernel=blur_kernel)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "self.make_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "kernel * sampling_factor ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_289": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "input.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_387": {
                "variable": {
                    "value": "demodulation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(weight ** 2, dim=[2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_398": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch_size * features, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * modulated_style",
                            "BinOp"
                        ],
                        [
                            "weight * demodulation_factor.view(batch_size, self.out_channels, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size, self.out_channels, self.in_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch_size * self.in_channels, self.out_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "weight.view(batch_size * self.out_channels, self.in_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_409": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch_size * features, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * modulated_style",
                            "BinOp"
                        ],
                        [
                            "weight * demodulation_factor.view(batch_size, self.out_channels, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size, self.out_channels, self.in_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch_size * self.in_channels, self.out_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "weight.view(batch_size * self.out_channels, self.in_channels, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_90": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.starting_resolution[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.starting_resolution[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latent_1, latent_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_252": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_338": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_502": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_93": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** (index + 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** (index + 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** (index + 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** (index + 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "image.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_198": {
                "outputs": {
                    "value": "(image * noise).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "styles.unsqueeze(1).repeat(1, len(self.main_convolutions_1) + 2, 1)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1).repeat(1, len(self.main_convolutions_1) + 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((latent_1, latent_2), dim=1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input.repeat(1, len(self.main_convolutions_1) + 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_387": {
                "input": {
                    "value": "weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/op_static/fused_act.py": {
        "torch": {
            "Parameter_80": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/op_static/setup.py": {
        "torch": {}
    },
    "multi_stylegan/op_static/upfirdn2d.py": {
        "torch": {
            "pad_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "upfirdn2d_cuda.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "upfirdn2d_cuda.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_180": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "upfirdn2d_cuda.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_104": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/u_net_2d_discriminator.py": {
        "torch": {
            "zeros_436": {
                "variable": {
                    "value": "binary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_438": {
                "variable": {
                    "value": "cut_coordinates_height",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "int(0.1 * height)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "int(0.9 * height)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_439": {
                "variable": {
                    "value": "cut_coordinates_width",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "int(0.1 * width)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "int(0.9 * width)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.encoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.downscale_convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(equalized_layer.EqualizedConv2d(in_channels=encoder_channel[1], out_channels=encoder_channel[1], kernel_size=(3, 3), stride=(2, 2), padding=(0, 0)), Blur()) for encoder_channel in encoder_channels[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.classification_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(output_size=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.decoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.transposed_convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.final_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FusedLeakyReLU(channel=decoder_channels[-1][-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.main_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "equalized_layer.EqualizedConv2d(in_channels=in_channels + 1 if mini_batch_std_dev else in_channels, out_channels=out_channels, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(output ** 2, dim=0, keepdim=False).clamp(min=self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_214": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mini_batch_std_dev(input)",
                            "Call"
                        ],
                        [
                            "self.main_mapping(output)",
                            "Call"
                        ],
                        [
                            "(output + self.residual_mapping(input)) / math.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "input - torch.mean(input, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.mean(output ** 2, dim=0, keepdim=False).clamp(min=self.alpha))",
                            "Call"
                        ],
                        [
                            "torch.mean(output).view(1, 1, 1)",
                            "Call"
                        ],
                        [
                            "output.repeat(input.shape[0], 1, input.shape[2], input.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.cat((input, output), 1)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(input=input, kernel=self.kernel, up=self.factor, pad=self.padding)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(input, self.kernel, pad=self.padding)",
                            "Call"
                        ],
                        [
                            "self.o(torch.bmm(g, beta.transpose(1, 2)).view(batch_size, -1, height, width))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_kernel(kernel=blur_kernel)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "self.make_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "kernel * sampling_factor ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_kernel(kernel=blur_kernel)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "self.make_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "kernel * sampling_factor ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[None, :] * kernel[:, None]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_370": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_372": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_378": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(theta.transpose(1, 2), phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_66": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_67": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfft_109": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_109": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfft_110": {
                "variable": {
                    "value": "gfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_110": {
                "variable": {
                    "value": "gfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfft_111": {
                "variable": {
                    "value": "rfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_111": {
                "variable": {
                    "value": "rfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, bf_fft, gfp_fft, rfp_fft]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_212": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.flatten(start_dim=1, end_dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, bf_fft, gfp_fft, rfp_fft], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, bf_fft, gfp_fft], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, bf_fft], dim=1)",
                            "Call"
                        ],
                        [
                            "encoder_block(input)",
                            "Call"
                        ],
                        [
                            "self.downscale_convolutions[index](input)",
                            "Call"
                        ],
                        [
                            "decoder_block(torch.cat([transposed_convolution(input), encoder_feature], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_213": {
                "input": {
                    "value": "output ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_213": {
                "min": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_378": {
                "input": {
                    "value": "theta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.phi(input), kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "phi.flatten(start_dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_380": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.g(input), kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "g.flatten(start_dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "beta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "equalized_layer.EqualizedConv2d(in_channels=encoder_channel[1], out_channels=encoder_channel[1], kernel_size=(3, 3), stride=(2, 2), padding=(0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "Upsample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rfft_115": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_115": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfft_116": {
                "variable": {
                    "value": "gfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_116": {
                "variable": {
                    "value": "gfp_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, bf_fft, gfp_fft]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfft_120": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_120": {
                "variable": {
                    "value": "bf_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, bf_fft]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[transposed_convolution(input), encoder_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_357": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "multi_stylegan/validation_metrics.py": {
        "torch": {
            "stack_121": {
                "variable": {
                    "value": "predictions_fake_bf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions_fake_bf[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "kl_bf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_fake_bf * torch.log(predictions_fake_bf / p_y_bf)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_612": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inception_net.Conv2d_1a_3x3(input)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "kornia.resize(x.flatten(start_dim=1, end_dim=2), size=(224, 224), interpolation='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, channels, time_steps, 224, 224)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_662": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inception_net.Conv2d_1a_3x3(input)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "kornia.resize(x.flatten(start_dim=1, end_dim=2), size=(224, 224), interpolation='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, channels, time_steps, 224, 224)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv3d_690": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self._use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_730": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inception_net.Conv2d_1a_3x3(input)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "kornia.resize(x.flatten(start_dim=1, end_dim=2), size=(224, 224), interpolation='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, channels, time_steps, 224, 224)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "AvgPool3d_913": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_915": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool3d_950": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inception_net.Conv2d_1a_3x3(input)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_net.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "kornia.resize(x.flatten(start_dim=1, end_dim=2), size=(224, 224), interpolation='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, channels, time_steps, 224, 224)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_950": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "inception_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "copy.deepcopy(self.inception_net)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "predictions_fake_gfp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions_fake_gfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "predictions_fake_rfp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions_fake_rfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "kl_gfp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_fake_gfp * torch.log(predictions_fake_gfp / p_y_gfp)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "kl_rfp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_fake_rfp * torch.log(predictions_fake_rfp / p_y_rfp)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_231": {
                "variable": {
                    "value": "inception_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "copy.deepcopy(self.model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_336": {
                "tensors": {
                    "value": "activations_fake_bf[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_440": {
                "variable": {
                    "value": "inception_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "copy.deepcopy(self.model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_546": {
                "tensors": {
                    "value": "activations_fake_bf[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_699": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_766": {
                "tensors": {
                    "value": "[b0, b1, b2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_339": {
                "tensors": {
                    "value": "activations_fake_gfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_342": {
                "tensors": {
                    "value": "activations_fake_rfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_391": {
                "f": {
                    "value": "network_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_549": {
                "tensors": {
                    "value": "activations_fake_gfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_552": {
                "tensors": {
                    "value": "activations_fake_rfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "predictions_fake_bf / p_y_bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "predictions_fake_gfp / p_y_gfp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_137": {
                "input": {
                    "value": "predictions_fake_rfp / p_y_rfp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_278": {
                "tensors": {
                    "value": "activations_real_bf[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_486": {
                "tensors": {
                    "value": "activations_real_bf[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_281": {
                "tensors": {
                    "value": "activations_real_gfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "tensors": {
                    "value": "activations_real_rfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_489": {
                "tensors": {
                    "value": "activations_real_gfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_492": {
                "tensors": {
                    "value": "activations_real_rfp[:self.data_samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_93": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_309": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_97": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_101": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_247": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "real_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_313": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_317": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "fake_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_251": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "real_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_255": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "real_images.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gan_latent_space_interpolation.py": {
        "torch": {
            "DataParallel_31": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiStyleGANGenerator(config=multi_style_gan_generator_config).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "noise_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_37": {
                "variable": {
                    "value": "noise_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise_input.permute(1, 0).unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "100 * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "noise_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_37": {
                "variable": {
                    "value": "noise_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "samples_bf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples_bf[..., index] for index in range(samples_bf.shape[-1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "samples_gfp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples_gfp[..., index] for index in range(samples_gfp.shape[-1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples_bf, samples_gfp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "args.load_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/get_gan_samples.py": {
        "torch": {
            "DataParallel_33": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiStyleGANGenerator(config=multi_style_gan_generator_config).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "args.load_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_multi_stylegan.py": {
        "torch": {
            "Adam_53": {
                "variable": {
                    "value": "generator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.get_parameters(lr_main=args.lr_generator, lr_style=args.lr_generator / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "hyperparameters['betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "multi_stylegan.generation_hyperparameters",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "discriminator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "hyperparameters['betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "multi_stylegan.generation_hyperparameters",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.TFLMDatasetGAN(path=args.path_to_data, no_rfp=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_stylegan.MultiStyleGANGenerator(config=multi_stylegan.multi_style_gan_generator_config).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_stylegan.MultiStyleGANDiscriminator(config=multi_stylegan.u_net_2d_discriminator_config, no_rfp=True).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "multi_stylegan.AdaptiveDiscriminatorAugmentation(discriminator=discriminator)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "generator_ema",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator_ema",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(generator.cpu()).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator_ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}