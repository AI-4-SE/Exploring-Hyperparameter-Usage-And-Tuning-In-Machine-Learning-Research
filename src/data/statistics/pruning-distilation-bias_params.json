{
    "src/PIE_analytics.py": {
        "sklearn": {
            "classification_report_35": {
                "variable": {
                    "value": "self.report",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.ground_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.teacher_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_names": {
                    "value": "self.class_names",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_87": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/analytics.py": {
        "sklearn": {
            "confusion_matrix_39": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "teacher_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "classification_report_62": {
                "variable": {
                    "value": "student_report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.ground_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "student_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target_names": {
                    "value": "class_names",
                    "type": "variable",
                    "possible_values": []
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "confusion_matrix_74": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.ground_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "student_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paths",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "crd/criterion.py": {
        "torch": {
            "div_68": {
                "variable": {
                    "value": "log_D1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_72": {
                "variable": {
                    "value": "log_D0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "crd/memory.py": {
        "torch": {
            "ones_13": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_39": {
                "variable": {
                    "value": "weight_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_41": {
                "variable": {
                    "value": "out_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_v1, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_v1.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v2.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "out_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_v2, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_44": {
                "variable": {
                    "value": "weight_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "out_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_v2, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_v2.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v1.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "out_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_v1, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_60": {
                "variable": {
                    "value": "out_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(weight_v2, v1.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_v1, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_v1, Z_v1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_61": {
                "variable": {
                    "value": "out_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(weight_v1, v2.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_v2, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_v2, Z_v2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.params[0].item())",
                            "Call"
                        ],
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_135": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_65": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_72": {
                "variable": {
                    "value": "ab_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[K, T, -1, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_20": {
                "*size": {
                    "value": "outputSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.memory_v1.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.memory_v1.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_21": {
                "*size": {
                    "value": "outputSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.memory_v1.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.memory_v1.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_42": {
                "input": {
                    "value": "out_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(weight_v1, v2.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_v2, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_v2, Z_v2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_47": {
                "input": {
                    "value": "out_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(weight_v2, v1.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_v1, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_v1, Z_v1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_67": {
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_74": {
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/cifar100.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR100Instance(root=data_folder, download=True, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "CIFAR100InstanceSample(root=data_folder, download=True, train=True, transform=train_transform, k=k, mode=mode, is_sample=is_sample, percent=percent)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=False, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(num_workers / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR100Instance(root=data_folder, download=True, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "CIFAR100InstanceSample(root=data_folder, download=True, train=True, transform=train_transform, k=k, mode=mode, is_sample=is_sample, percent=percent)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_folder, download=True, train=False, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(num_workers / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "imbalanced_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imbalanced_train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(train_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/imagenet.py": {
        "torch": {
            "DataLoader_131": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolderSample(train_folder, transform=train_transform, is_sample=is_sample, k=k)",
                            "Call"
                        ],
                        [
                            "ImageFolderInstance(train_folder, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(train_folder, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolderSample(train_folder, transform=train_transform, is_sample=is_sample, k=k)",
                            "Call"
                        ],
                        [
                            "ImageFolderInstance(train_folder, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(train_folder, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(test_folder, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/AB.py": {
        "torch": {
            "abs_29": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source + self.margin) ** 2 * ((source > -self.margin) & (target <= 0)).float() + (source - self.margin) ** 2 * ((source <= self.margin) & (target > 0)).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/AH.py": {
        "torch": {
            "MSELoss_9": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/AT.py": {
        "torch": {
            "adaptive_avg_pool2d_21": {
                "variable": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_s, (t_H, t_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(t_H, t_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_29": {
                "input": {
                    "value": "f.pow(self.p).mean(1).view(f.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_23": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_t, (s_H, s_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(s_H, s_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/CC.py": {
        "torch": {
            "abs_15": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s - f_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_16": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(delta[:-1] * delta[1:]).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/FSP.py": {
        "torch": {
            "adaptive_avg_pool2d_36": {
                "variable": {
                    "value": "bot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(bot, (t_H, t_H))",
                            "Call"
                        ],
                        [
                            "bot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "bot.view(bot.shape[0], bot.shape[1], bot.shape[2], -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(t_H, t_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_38": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "top.view(top.shape[0], top.shape[1], top.shape[2], -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(top, (b_H, b_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(b_H, b_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/FT.py": {
        "torch": {
            "adaptive_avg_pool2d_20": {
                "variable": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_s, (t_H, t_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(t_H, t_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_31": {
                "input": {
                    "value": "f.pow(self.p1).mean(1).view(f.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_22": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_t, (s_H, s_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(s_H, s_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/FitNet.py": {
        "torch": {
            "MSELoss_10": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/KD.py": {
        "torch": {
            "log_softmax_14": {
                "variable": {
                    "value": "p_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_16": {
                "input": {
                    "value": "p_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(y_s / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(y_t / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/KDSVD.py": {
        "torch": {
            "svd_50": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.view(-1, size[1], size[2] * size[2]).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(x), x, torch.zeros_like(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isfinite(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.view(-1, size[1], size[2] * size[2]).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(x), x, torch.zeros_like(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "(max_abs_cosine, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(cosine)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_72": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(max_abs_cosine, torch.abs(cosine))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.sign(cosine)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(cosine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(a, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.eq(max_abs_cosine, torch.abs(cosine)), torch.sign(cosine), torch.zeros_like(cosine))",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u[:, :, :n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[:, :n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v[:, :, :n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_31": {
                "variable": {
                    "value": "s_rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(v_s.unsqueeze(2) - v_sb.unsqueeze(1)).pow(2) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_32": {
                "variable": {
                    "value": "t_rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(v_t.unsqueeze(2) - v_tb.unsqueeze(1)).pow(2) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_35": {
                "variable": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isfinite(l2loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(s_rbf - t_rbf.detach()).pow(2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(l2loss), l2loss, torch.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(l2loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.view(-1, size[1], size[2] * size[2]).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(x), x, torch.zeros_like(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.view(-1, size[1], size[2] * size[2]).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(x), x, torch.zeros_like(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_71": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(a.transpose(-2, -1), b)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_72": {
                "input": {
                    "value": "max_abs_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.abs(cosine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_73": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(a.transpose(-2, -1), b)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_73": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(a.transpose(-2, -1), b)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_72": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(a.transpose(-2, -1), b)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_35": {
                "input": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(s_rbf - t_rbf.detach()).pow(2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(l2loss), l2loss, torch.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(s_rbf - t_rbf.detach()).pow(2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isfinite(l2loss), l2loss, torch.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller_zoo/NST.py": {
        "torch": {
            "normalize_26": {
                "variable": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_s, (t_H, t_H))",
                            "Call"
                        ],
                        [
                            "f_s.view(f_s.shape[0], f_s.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_s, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_28": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t.view(f_t.shape[0], f_t.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_t, dim=2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(f_t, (s_H, s_H))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_19": {
                "variable": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(f_s, (t_H, t_H))",
                            "Call"
                        ],
                        [
                            "f_s.view(f_s.shape[0], f_s.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_s, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(t_H, t_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_21": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t.view(f_t.shape[0], f_t.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_t, dim=2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(f_t, (s_H, s_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(s_H, s_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/PKT.py": {
        "torch": {
            "sqrt_19": {
                "variable": {
                    "value": "output_net_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(output_net ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_23": {
                "variable": {
                    "value": "target_net_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(target_net ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_28": {
                "variable": {
                    "value": "model_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_net / (output_net_norm + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_net.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_29": {
                "variable": {
                    "value": "target_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_net / (target_net_norm + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_net.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_similarity * torch.log((target_similarity + eps) / (model_similarity + eps))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "output_net ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "target_net ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "model_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(output_net, output_net.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "(model_similarity + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "model_similarity / torch.sum(model_similarity, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "target_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(target_net, target_net.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "(target_similarity + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "target_similarity / torch.sum(target_similarity, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_40": {
                "input": {
                    "value": "(target_similarity + eps) / (model_similarity + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/RKD.py": {
        "torch": {
            "smooth_l1_loss_29": {
                "variable": {
                    "value": "loss_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdist(student, squared=False)",
                            "Call"
                        ],
                        [
                            "d / mean_d",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "t_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdist(teacher, squared=False)",
                            "Call"
                        ],
                        [
                            "t_d / mean_td",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_38": {
                "variable": {
                    "value": "norm_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student.unsqueeze(0) - student.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "s_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(sd, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm_sd.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_41": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(norm_sd, norm_sd.transpose(1, 2)).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "t_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(norm_td, norm_td.transpose(1, 2)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_34": {
                "variable": {
                    "value": "norm_td",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher.unsqueeze(0) - teacher.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_35": {
                "variable": {
                    "value": "t_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(td, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm_td.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller_zoo/SP.py": {
        "torch": {
            "mm_21": {
                "variable": {
                    "value": "G_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_s.view(bsz, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_23": {
                "variable": {
                    "value": "G_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(f_s, torch.t(f_s))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(G_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_24": {
                "variable": {
                    "value": "G_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t.view(bsz, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_26": {
                "variable": {
                    "value": "G_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(f_t, torch.t(f_t))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(G_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_21": {
                "input": {
                    "value": "f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_s.view(bsz, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_24": {
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t.view(bsz, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller_zoo/VID.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(num_input_channels, num_mid_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.log(np.exp(init_pred_var - eps) - 1.0) * torch.ones(num_target_channels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * ((pred_mean - target) ** 2 / pred_var + torch.log(pred_var))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_42": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(input, (t_H, t_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(t_H, t_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_44": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(target, (s_H, s_H))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(s_H, s_H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "1.0 + torch.exp(self.log_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "num_target_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "pred_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(1.0 + torch.exp(self.log_scale)) + self.eps",
                            "BinOp"
                        ],
                        [
                            "pred_var.view(1, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_48": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "helper/loops.py": {
        "torch": {
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "helper/pretrain.py": {
        "torch": {
            "SGD_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "init_modules.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "opt.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "helper/util.py": {
        "torch": {
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ShuffleNetv1.py": {
        "torch": {
            "randn_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groups",
                            "Attribute"
                        ],
                        [
                            "1 if in_planes == 24 else groups",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i == 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['groups']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([out, res], 1) if self.stride == 2 else out + res",
                            "IfExp"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.shuffle1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(preact)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "[out, res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ShuffleNetv2.py": {
        "torch": {
            "randn_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, preact], 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "preact",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, preact]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(out2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_151": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x2)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(preact)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out1, out2], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/classifier.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/mobilenetv2.py": {
        "torch": {
            "randn_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.last_channel, feature_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_114": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // (32 // 2)",
                            "BinOp"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "randn_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_127": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnetv2.py": {
        "torch": {
            "randn_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_86": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/util.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(out_channel, out_channel, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.connectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._make_conenctors(s_shapes, t_shapes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.connectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._make_conenctors(s_shapes, t_shapes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "connectors",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._build_feature_connector(t, s) for (t, s) in zip(t_channels, s_channels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "t_C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * dim_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "*args": {
                    "value": "*C",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s_C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "t_C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_275": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_276": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_277": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_280": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_281": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_282": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_31": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "s_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "t_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "t_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_141": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s_C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "t_C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "in_features": {
                    "value": "nChannels * pool_size * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_shape[1]",
                            "Subscript"
                        ],
                        [
                            "s_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ],
                        [
                            "int(t_shape[1] * k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s_C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "t_C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1 + s_H - t_H, 1 + s_W - t_W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_259": {
                "output_size": {
                    "value": "(pool_size, pool_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_261": {
                "output_size": {
                    "value": "(pool_size, pool_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg.py": {
        "torch": {
            "randn_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_37": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.relu(self.block0(x))",
                            "Call"
                        ],
                        [
                            "self.pool0(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.relu(self.block0(x))",
                            "Call"
                        ],
                        [
                            "self.pool0(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.relu(self.block0(x))",
                            "Call"
                        ],
                        [
                            "self.pool0(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.relu(self.block0(x))",
                            "Call"
                        ],
                        [
                            "self.pool0(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/wrn.py": {
        "torch": {
            "randn_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "feat_m",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_38": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloader.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "ss_train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds_holdout",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_92": {
                "variable": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_253": {
                "variable": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_313": {
                "variable": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_315": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageNet(root=path, split='train', transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=TRAIN_PATH, transform=train_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "variable": {
                    "value": "valid_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.ImageNet(root=path, split='val', transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(root=VALID_PATH, transform=valid_tfms)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(valid_ds, subset)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_13": {
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Generator_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/losses.py": {
        "torch": {
            "flatten_14": {
                "variable": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_15": {
                "variable": {
                    "value": "y_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "self.loss(x_f, y_f)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_loader.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "student.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "teacher.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "student.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "teacher.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/prune.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "lr / alpha",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_114": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(student.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[np.ceil(epochs * 0.33), np.ceil(epochs * 0.66)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_124": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path + model_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_89": {
                "variable": {
                    "value": "inner_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "student.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + model_id + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "remove_143": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ln_structured_147": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "layer.weight == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "l1_unstructured_150": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_baseline.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "model.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_82": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[np.ceil(epochs * 0.33), np.ceil(epochs * 0.66)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_93": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path + model_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + model_id + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_226": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_233": {
                "variable": {
                    "value": "act_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "act_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inner_loss(s_a, t_a) for (s_a, t_a) in zip(student_act, teacher_act)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "act_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_312": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_327": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_157": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_223": {
                "mode": {
                    "value": "phase == 'train' or phase == 'ss_train'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_310": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_377": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_60": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_144": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_375": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "src/wrappers.py": {
        "torch": {}
    },
    "train_student.py": {
        "torch": {
            "ModuleList_248": {
                "variable": {
                    "value": "module_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "trainable_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_253": {
                "variable": {
                    "value": "criterion_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "criterion_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_list.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_240": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_244": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_452": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model_s.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict(), 'best_acc': best_acc}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_428": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model_s.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict(), 'best_acc': best_acc}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_439": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model_s.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict(), 'best_acc': best_acc}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model_s.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_177": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "remove_387": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ln_structured_391": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "layer.weight == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "l1_unstructured_394": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "criterion_kd",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VIDLoss(s, t, t) for (s, t) in zip(s_n, t_n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_306": {
                "variable": {
                    "value": "init_trainable_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "init_trainable_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_321": {
                "variable": {
                    "value": "criterion_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "init_trainable_list",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_teacher.py": {
        "torch": {
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_188": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_281": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'best_acc': best_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'accuracy': test_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_45": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'best_acc': best_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'accuracy': test_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_268": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'best_acc': best_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'accuracy': test_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, '{}_best.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "remove_214": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ln_structured_218": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "layer.weight == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "l1_unstructured_221": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "float(target)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}