{
    "evaluate.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "tsDataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tsSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngsimDataset('data/TestSet.mat')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "tsSet.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "lossVals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "trained_models/cslstm_m.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "fut_pred_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fut_pred[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_73": {
                "variable": {
                    "value": "lat_man",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lat_pred[k, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "lon_man",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lon_pred[k, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "lossVals / counts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.ip_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.dyn_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dyn_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.soc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.encoder_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.soc_conv_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_3x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.soc_conv_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_3x1_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.soc_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.decoder_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.op_lat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.soc_embedding_size + self.dyn_embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_lat_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.op_lon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.soc_embedding_size + self.dyn_embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_lon_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_72": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "soc_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(soc_enc, hist_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.dec_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.soc_embedding_size + self.dyn_embedding_size + self.num_lat_classes + self.num_lon_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTM_62": {
                "variable": {
                    "value": "self.dec_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.soc_embedding_size + self.dyn_embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, lat_enc, lon_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "lat_enc_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lat_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "lon_enc_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lon_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "enc_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc, lat_enc_tmp, lon_enc_tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_40": {
                "variable": {
                    "value": "crossEnt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "trDataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngsimDataset('data/TrainSet.mat')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "trSet.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "valDataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngsimDataset('data/ValSet.mat')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "valSet.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_models/cslstm_m.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__107": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "torch.max(lat_pred.data, 1)[1] == torch.max(lat_enc.data, 1)[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "torch.max(lon_pred.data, 1)[1] == torch.max(lon_enc.data, 1)[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_162": {
                "input": {
                    "value": "torch.max(lat_pred.data, 1)[1] == torch.max(lat_enc.data, 1)[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "torch.max(lon_pred.data, 1)[1] == torch.max(lon_enc.data, 1)[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_95": {
                "input": {
                    "value": "lat_enc.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "lon_enc.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_162": {
                "input": {
                    "value": "lat_enc.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "lon_enc.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "exp_152": {
                "variable": {
                    "value": "sigX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(sigX)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_153": {
                "variable": {
                    "value": "sigY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 3:4]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(sigY)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 3]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 3]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_154": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 4:5]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(rho)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[muX, muY, sigX, sigY, rho]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_166": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 4:5]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(rho)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_255": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_264": {
                "variable": {
                    "value": "lossVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_265": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_273": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "nbrs_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_h // self.d_s + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "nbr_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "nbr_batch_size + sum([len(nbrs[i]) != 0 for i in range(len(nbrs))])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "mask_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.grid_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.grid_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.enc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "hist_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_h // self.d_s + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "fut_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.t_f // self.d_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "op_mask_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.t_f // self.d_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "lat_enc_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "lon_enc_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "op_mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "op_mask.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_lon_classes * num_lat_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "op_mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "op_mask.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_222": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 4:5]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(rho)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "hist_batch[0:len(hist), sampleId, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hist[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "hist_batch[0:len(hist), sampleId, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hist[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "fut_batch[0:len(fut), sampleId, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fut[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "fut_batch[0:len(fut), sampleId, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fut[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "lat_enc_batch[sampleId, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lat_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([3])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "lon_enc_batch[sampleId, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lon_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([2])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_176": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "lossVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(mask)",
                            "Call"
                        ],
                        [
                            "acc * mask",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(op_mask.shape[0], op_mask.shape[1], num_lon_classes * num_lat_classes).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(op_mask.shape[0], op_mask.shape[1], 1).cuda()",
                            "Call"
                        ],
                        [
                            "acc * op_mask[:, :, 0:1]",
                            "BinOp"
                        ],
                        [
                            "-logsumexp(acc, dim=2)",
                            "UnaryOp"
                        ],
                        [
                            "acc * op_mask[:, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(mask)",
                            "Call"
                        ],
                        [
                            "acc * mask",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(mask)",
                            "Call"
                        ],
                        [
                            "acc * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_211": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op_mask[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "lossVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_236": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op_mask[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_246": {
                "input": {
                    "value": "y - muY",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_250": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_260": {
                "input": {
                    "value": "y - muY",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_170": {
                "input": {
                    "value": "sigX * sigY * ohr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_195": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 4:5]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(rho)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 4]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "nbrs_batch[0:len(nbr), count, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nbr[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "nbrs_batch[0:len(nbr), count, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nbr[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_134": {
                "variable": {
                    "value": "mask_batch[sampleId, pos[1], pos[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.enc_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_207": {
                "input": {
                    "value": "op_mask[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_226": {
                "input": {
                    "value": "sigX * sigY * ohr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "op_mask[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "sigX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(sigX)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_202": {
                "input": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lat_pred[:, l] * lon_pred[:, k]",
                            "BinOp"
                        ],
                        [
                            "wts.repeat(len(fut_pred[0]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_226": {
                "input": {
                    "value": "sigX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(sigX)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_199": {
                "input": {
                    "value": "sigX * sigY * ohr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_199": {
                "input": {
                    "value": "sigX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(sigX)",
                            "Call"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y_pred[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}