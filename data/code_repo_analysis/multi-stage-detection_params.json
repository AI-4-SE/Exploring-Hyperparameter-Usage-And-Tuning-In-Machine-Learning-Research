{
    "DQN.py": {
        "tensorflow": {
            "dropout_118": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "slim.fully_connected(tf.concat([slim.flatten(features), history], axis=1), 1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "get_current_tower_context().is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "slim.fully_connected(fc1, 1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "get_current_tower_context().is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_129": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "As",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FullyConnected('fctA', fc2, num_actions)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "V - tf.reduce_mean(As, 1, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_130": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FullyConnected('fct', fc2, num_actions)",
                            "Call"
                        ],
                        [
                            "tf.add(As, V - tf.reduce_mean(As, 1, keep_dims=True))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Qvalue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "[slim.flatten(features), history]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "As",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FullyConnected('fctA', fc2, num_actions)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_118": {
                "structure": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DQNModel.py": {
        "tensorflow": {
            "constant_60": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[103.939, 123.68, 116.779]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_72": {
                "variable": {
                    "value": "history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_history[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "history",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_74": {
                "variable": {
                    "value": "next_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_history[:, 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "next_history",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_77": {
                "variable": {
                    "value": "history_refine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_history_refine[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "history_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_79": {
                "variable": {
                    "value": "next_history_refine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_history_refine[:, 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "next_history_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "Model.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=Model.learning_rate, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_136": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_138": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_124": {
                "inputs": {
                    "value": "total_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "group_145": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "update_target_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, *self.state_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "joint_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isOver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, config.HISTORY_LEN * self.num_actions[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "joint_history",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, *self.state_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "joint_state_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "action_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isOver_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, config.HISTORY_LEN * self.num_actions[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "joint_history_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "vgg16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_71": {
                "input": {
                    "value": "joint_state[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_73": {
                "input": {
                    "value": "joint_state[:, 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_76": {
                "input": {
                    "value": "joint_state_refine[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "state_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_78": {
                "input": {
                    "value": "joint_state_refine[:, 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state_refine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_94": {
                "variable": {
                    "value": "action_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "pred_action_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predict_value * action_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "max_pred_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_max(predict_value, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "average_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rw + (1.0 - tf.cast(over, tf.float32)) * self.gamma * tf.stop_gradient(best_v)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "average_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_118": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rw + (1.0 - tf.cast(over, tf.float32)) * self.gamma * tf.stop_gradient(best_v)",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_action_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(predict_value * action_onehot, 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "'stage%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_107": {
                "variable": {
                    "value": "best_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "targetQ_predict_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_DQN_prediction(next_st, next_hist, self.num_actions[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "greedy_choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_predict_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_DQN_prediction(next_st, next_hist, self.num_actions[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_112": {
                "variable": {
                    "value": "predict_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "greedy_choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_predict_value, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_actions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "variable": {
                    "value": "best_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "targetQ_predict_value * predict_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_98": {
                "input_tensor": {
                    "value": "predict_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_DQN_prediction(st, hist, self.num_actions[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_115": {
                "input": {
                    "value": "best_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(targetQ_predict_value, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(targetQ_predict_value * predict_onehot, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_average_norm_131": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_115": {
                "x": {
                    "value": "over",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "env.py": {
        "tensorflow": {
            "placeholder_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 10, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_and_resize_165": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10, 10, 2])",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "[[0.33, 0.33, 0.88, 0.88]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluator.py": {
        "tensorflow": {}
    },
    "vgg16.py": {
        "tensorflow": {
            "max_pool_37": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_62": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_96": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_130": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_164": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_412": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_413": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_34": {
                "variable": {
                    "value": "conv1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv1_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 128, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "conv2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 128, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv2_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_75": {
                "variable": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_83": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_84": {
                "variable": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_93": {
                "variable": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv3_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_108": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_109": {
                "variable": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_116": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_127": {
                "variable": {
                    "value": "conv4_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(conv4_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_142": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_143": {
                "variable": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_149": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_151": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_152": {
                "variable": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_160": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv5_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fc3l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_213": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_242": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_282": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_322": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_362": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "conv2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "conv3_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "conv4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "conv4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "conv4_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "conv5_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "conv5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "conv5_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[123.68, 116.779, 103.939]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_194": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs - mean",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[64], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_197": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_198": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_205": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_206": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[64], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_208": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_209": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_221": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_224": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[128], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_226": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_227": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_232": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_235": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[128], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_237": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_238": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_252": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_253": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[256], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_255": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_256": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_261": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_263": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_264": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[256], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_266": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_267": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_274": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_275": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[256], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_277": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_278": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_290": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_292": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_293": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_295": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_296": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_301": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_303": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_304": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_306": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_307": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_312": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_314": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_315": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_317": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_318": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_330": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_333": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_335": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_336": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_341": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_343": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_344": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_346": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_347": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_352": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_354": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 3, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 64], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 64, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 128], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 128, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 256], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 256, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', shape=[3, 3, 512, 512], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 3, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 64], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 64, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 128], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 128, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 256], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 256, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([3, 3, 512, 512], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[512], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_357": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv1_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv2_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv3_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv4_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.pool4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.conv5_2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[64], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[128], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[256], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='biases', shape=[512], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[64], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[128], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[256], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[512], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_358": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_372": {
                "variable": {
                    "value": "fc1w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([shape, 4096], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_375": {
                "variable": {
                    "value": "fc1b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[4096], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_378": {
                "variable": {
                    "value": "fc1l",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(pool5_flat, fc1w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc1b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[4096], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_379": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "fc1l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(pool5_flat, fc1w), fc1b)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_384": {
                "variable": {
                    "value": "fc2w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4096, 4096], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_387": {
                "variable": {
                    "value": "fc2b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[4096], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_389": {
                "variable": {
                    "value": "fc2l",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(self.fc1, fc2w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc2b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[4096], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_390": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "fc2l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(self.fc1, fc2w), fc2b)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_395": {
                "variable": {
                    "value": "fc3w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4096, 1000], dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_398": {
                "variable": {
                    "value": "fc3b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[1000], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_400": {
                "variable": {
                    "value": "self.fc3l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(self.fc2, fc3w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc3b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[1000], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "preprocess",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_191": {
                "name": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_220": {
                "name": {
                    "value": "conv2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_231": {
                "name": {
                    "value": "conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_249": {
                "name": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_260": {
                "name": {
                    "value": "conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_271": {
                "name": {
                    "value": "conv3_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_289": {
                "name": {
                    "value": "conv4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_300": {
                "name": {
                    "value": "conv4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "conv4_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_329": {
                "name": {
                    "value": "conv5_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_340": {
                "name": {
                    "value": "conv5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_351": {
                "name": {
                    "value": "conv5_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_370": {
                "name": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_383": {
                "name": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_394": {
                "name": {
                    "value": "fc3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_21": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_30": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_46": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_55": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_71": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_80": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_89": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_105": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_114": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_123": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_139": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_148": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_157": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_192": {
                "shape": {
                    "value": "[3, 3, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_203": {
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_206": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_221": {
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_224": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_232": {
                "shape": {
                    "value": "[3, 3, 128, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_235": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_250": {
                "shape": {
                    "value": "[3, 3, 128, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_253": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_261": {
                "shape": {
                    "value": "[3, 3, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_264": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_272": {
                "shape": {
                    "value": "[3, 3, 256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_275": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_290": {
                "shape": {
                    "value": "[3, 3, 256, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_293": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_301": {
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_304": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_312": {
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_315": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_330": {
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_333": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_341": {
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_344": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_352": {
                "shape": {
                    "value": "[3, 3, 512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_355": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_372": {
                "shape": {
                    "value": "[shape, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_375": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4096]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_378": {
                "a": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.pool5, [-1, shape])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc1w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([shape, 4096], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_384": {
                "shape": {
                    "value": "[4096, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_387": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4096]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_389": {
                "a": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "fc2w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4096, 4096], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_395": {
                "shape": {
                    "value": "[4096, 1000]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_398": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1000]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_400": {
                "a": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "fc3w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4096, 1000], dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/bbox.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(boxes)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_16": {
                "variable": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(query_boxes)",
                            "Call"
                        ],
                        [
                            "query_boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_26": {
                "input": {
                    "value": "boxes[:, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "boxes[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_27": {
                "input": {
                    "value": "boxes[:, 3:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "boxes[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}