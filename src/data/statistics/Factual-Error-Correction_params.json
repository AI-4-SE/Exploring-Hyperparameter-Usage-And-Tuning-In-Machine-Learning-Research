{
    "model/model.py": {
        "sklearn": {
            "f1_score_262": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label_class + batch[3].tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pred_class + preds.tolist()",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "classification_report_267": {
                "y_true": {
                    "value": "label_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label_class + batch[3].tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pred_class + preds.tolist()",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataParallel_67": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_74": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.args.summary_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_316": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialLR_130": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamW(optimizer_grouped_parameters, lr=self.args.learning_rate, eps=self.args.adam_epsilon)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_249": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(**inputs)",
                            "Call"
                        ],
                        [
                            "self.loss_batch(inputs, optimizer=None)",
                            "Call"
                        ],
                        [
                            "self.model(**inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_257": {
                "input": {
                    "value": "preds == batch[3]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__190": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__193": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/data_utils.py": {
        "torch": {
            "tensor_180": {
                "variable": {
                    "value": "text_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in text_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "text_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in text_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "text_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in text_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in src_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in tgt_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "src_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in src_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "src_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in src_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_201": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "text_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', args.model_type, str(args.max_summary_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_133": {
                "variable": {
                    "value": "guids",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_guids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_guids'.format('dev' if evaluate else 'train', args.model_type, str(args.max_summary_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_169": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[text_features, src_ids, tgt_ids]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', args.model_type, str(args.max_summary_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_170": {
                "obj": {
                    "value": "guids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_guids_file)",
                            "Call"
                        ],
                        [
                            "convert_text_and_summary(examples, tokenizer, pad_on_left=False, pad_token=pad_token_id, pad_token_segment_id=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_guids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_guids'.format('dev' if evaluate else 'train', args.model_type, str(args.max_summary_length)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/main.py": {
        "torch": {}
    },
    "model/main_data.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_54": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/run.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_117": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_134": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, model.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, model.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/test.py": {
        "torch": {
            "device_105": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_106": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_120": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, model.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, model.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_16": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}