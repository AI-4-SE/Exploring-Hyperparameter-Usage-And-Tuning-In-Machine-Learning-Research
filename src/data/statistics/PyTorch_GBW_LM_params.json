{
    "lm/adam_base.py": {
        "torch": {
            "zeros_like_56": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lm/fast_gbw.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lm/gbw.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tensor_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/learning_rate.py": {
        "torch": {}
    },
    "lm/log_uniform/test.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_32": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8192",
                            "int"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_12": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x * log_N).long() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "793471",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([log_uniform(idx, range_max) for idx in range(range_max)])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_11": {
                "input": {
                    "value": "x * log_N",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lm/main.py": {
        "torch": {
            "load_65": {
                "variable": {
                    "value": "word_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data, 'word_freq.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "mapto",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "util.reverse(np.argsort(-word_freq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(word_freq)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__182": {
                "parameters": {
                    "value": "net.rnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__183": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__184": {
                "parameters": {
                    "value": "ss.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "net.proj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_46": {
                "variable": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_47": {
                "variable": {
                    "value": "true_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_50": {
                "variable": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_51": {
                "variable": {
                    "value": "sample_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(true_logits, dim=1), sample_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_85": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "torch.mul(inputs, true_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(sample_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "true_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(true_freq)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_64": {
                "input": {
                    "value": "sample_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sample_freq)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_54": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.params.weight, 0, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_55": {
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.params.weight, 0, sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_67": {
                "input": {
                    "value": "true_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(inputs, true_weights), dim=1) + true_bias",
                            "BinOp"
                        ],
                        [
                            "true_logits.sub(torch.log(true_freq))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/process_gbw.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "word_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'word_freq.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_10": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tensor_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/sparse_model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_48": {
                "variable": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.params.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_49": {
                "variable": {
                    "value": "true_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_52": {
                "variable": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.params.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "variable": {
                    "value": "sample_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(true_logits, dim=1), sample_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_88": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.mul(inputs, true_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "true_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(true_freq)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_67": {
                "input": {
                    "value": "sample_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sample_freq)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_56": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "true_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.embedding(labels, self.params.weight, sparse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "true_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(inputs, true_weights), dim=1) + true_bias",
                            "BinOp"
                        ],
                        [
                            "true_logits.sub(torch.log(true_freq))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/stream_gbw.py": {
        "torch": {
            "zeros_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lm/unit_test/fast_gbw_utest.py": {
        "torch": {
            "zeros_45": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "ndarray": {
                    "value": "np.asarray(corpus)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lm/unit_test/gbw_utest.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "ndarray": {
                    "value": "np.asarray(seq, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lm/unit_test/sampled_softmax_utest.py": {
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "ss.params.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(num_classes, dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "ss.params.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(num_classes).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "ss.params.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(num_classes, dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "ss.params.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(num_classes).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "sampled_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([len(sampled)], fill_value=0.5, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "hidden_acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(hidden_acts)).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(hidden_acts)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "hidden_acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(hidden_acts)).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(hidden_acts)).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lm/util.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_freq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "remainder_24": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x * log_N).long() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "npzfile['item']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N * distribution",
                            "BinOp"
                        ],
                        [
                            "1.0 - np.exp(N * torch.log(1.0 - distribution))",
                            "BinOp"
                        ],
                        [
                            "N * distribution",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_23": {
                "input": {
                    "value": "x * log_N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "1.0 - distribution",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}