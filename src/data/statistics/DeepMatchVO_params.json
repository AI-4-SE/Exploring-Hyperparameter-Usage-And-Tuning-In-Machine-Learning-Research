{
    "data_loader.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "input_image_names_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image_names_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "cam_intrinsics_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cam_intrinsics_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_87": {
                "variable": {
                    "value": "image_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsics[:, 0, 0] * x_scaling",
                            "BinOp"
                        ],
                        [
                            "intrinsics[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "intrinsics[:, 0, 0] / 2 ** s",
                            "BinOp"
                        ],
                        [
                            "fx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_165": {
                "variable": {
                    "value": "r1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fx, zeros, cx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, fy, cy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_167": {
                "variable": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_168": {
                "variable": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0], shape=[1, 3])",
                            "Call"
                        ],
                        [
                            "tf.tile(r3, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_206": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_scaling(im, intrinsics)",
                            "Call"
                        ],
                        [
                            "random_cropping(im, intrinsics, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area(im, [out_h, out_w])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(im, offset_y, offset_x, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_228": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, tgt_start_idx, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_232": {
                "variable": {
                    "value": "src_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_236": {
                "variable": {
                    "value": "src_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, int(tgt_start_idx + img_width), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_image_1, src_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(src_image_seq, [0, i * img_width, 0], [-1, img_width, -1]) for i in range(num_source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_253": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, tgt_start_idx, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_257": {
                "variable": {
                    "value": "src_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_261": {
                "variable": {
                    "value": "src_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_seq",
                            "Method Argument"
                        ],
                        [
                            "image_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, int(tgt_start_idx + img_width), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_image_1, src_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(src_image_seq, [0, 0, i * img_width, 0], [-1, -1, img_width, -1]) for i in range(num_source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "intrinsics_mscale",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "intrinsics_mscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(intrinsics_mscale, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(intrinsics, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.data_augmentation(image_all, intrinsics, self.img_height, self.img_width)",
                            "Call"
                        ],
                        [
                            "self.get_multi_scale_intrinsics(intrinsics, self.num_scales)",
                            "Call"
                        ],
                        [
                            "tf.stack([r1, r2, r3], axis=1)",
                            "Call"
                        ],
                        [
                            "random_scaling(im, intrinsics)",
                            "Call"
                        ],
                        [
                            "random_cropping(im, intrinsics, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "self.make_intrinsics_matrix(fx, fy, cx, cy)",
                            "Call"
                        ],
                        [
                            "self.make_intrinsics_matrix(fx, fy, cx, cy)",
                            "Call"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "image_all",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[stack_images[0], stack_images[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "poses_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_source + 1, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "poses_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "matches_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_source, self.match_num, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "matches_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_h * y_scaling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_w * x_scaling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_area_182": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_scaling(im, intrinsics)",
                            "Call"
                        ],
                        [
                            "random_cropping(im, intrinsics, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area(im, [out_h, out_w])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(im, offset_y, offset_x, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[out_h, out_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_193": {
                "variable": {
                    "value": "(batch_size, in_h, in_w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(im)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_196": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_scaling(im, intrinsics)",
                            "Call"
                        ],
                        [
                            "random_cropping(im, intrinsics, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area(im, [out_h, out_w])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(im, offset_y, offset_x, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], 0, in_h - out_h + 1, dtype=tf.int32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], 0, in_w - out_w + 1, dtype=tf.int32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target_height": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(in_h * y_scaling, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "out_h",
                            "Method Argument"
                        ],
                        [
                            "out_h",
                            "Method Argument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(in_w * x_scaling, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "out_w",
                            "Method Argument"
                        ],
                        [
                            "out_w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "read_file_33": {
                "variable": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_path",
                            "Method Argument"
                        ],
                        [
                            "img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_jpeg_34": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.read_file(img_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "read_file_83": {
                "variable": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_path",
                            "Method Argument"
                        ],
                        [
                            "img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_jpeg_84": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.read_file(img_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_163": {
                "input": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsics[:, 0, 0] * x_scaling",
                            "BinOp"
                        ],
                        [
                            "intrinsics[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "intrinsics[:, 0, 0] / 2 ** s",
                            "BinOp"
                        ],
                        [
                            "fx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_32": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_82": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_193": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_scaling(im, intrinsics)",
                            "Call"
                        ],
                        [
                            "random_cropping(im, intrinsics, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area(im, [out_h, out_w])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(im, offset_y, offset_x, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_200": {
                "x": {
                    "value": "offset_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], 0, in_w - out_w + 1, dtype=tf.int32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_201": {
                "x": {
                    "value": "offset_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], 0, in_h - out_h + 1, dtype=tf.int32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_241": {
                "input_": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([src_image_1, src_image_2], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_image_1, src_image_2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i * img_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_266": {
                "input_": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([src_image_1, src_image_2], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_image_1, src_image_2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, i * img_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "deep_slam.py": {
        "tensorflow": {
            "exp_198": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_gradients_x), 3, keep_dims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_199": {
                "variable": {
                    "value": "weights_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_gradients_y), 3, keep_dims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_208": {
                "variable": {
                    "value": "rot_vec_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prior_pose_vec[:, :3] - pred_pose_vec[:, :3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_209": {
                "variable": {
                    "value": "trans_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.l2_normalize(prior_pose_vec[:, 3:], dim=1) - tf.nn.l2_normalize(pred_pose_vec[:, 3:], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_219": {
                "variable": {
                    "value": "mu_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_220": {
                "variable": {
                    "value": "mu_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "disp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp",
                            "Method Argument"
                        ],
                        [
                            "disp",
                            "Method Argument"
                        ],
                        [
                            "disp",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_235": {
                "variable": {
                    "value": "disp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(disp, axis=[1, 2, 3], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(disp_mean, [1, curr_h, curr_w, curr_c])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, curr_h, curr_w, curr_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_241": {
                "input": {
                    "value": "disp_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.percentile(disp, q=thresh, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(disp_max, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_242": {
                "variable": {
                    "value": "clip_disp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp",
                            "Method Argument"
                        ],
                        [
                            "disp",
                            "Method Argument"
                        ],
                        [
                            "disp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "disp_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.percentile(disp, q=thresh, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(disp_max, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_247": {
                "variable": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_248": {
                "variable": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_249": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.opt.batch_size, self.opt.match_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[points1, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_251": {
                "variable": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[points2, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_256": {
                "variable": {
                    "value": "fmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fundamental_matrix_from_rt(pose, intrinsics)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(fmat, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_257": {
                "variable": {
                    "value": "fmat_tiles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fundamental_matrix_from_rt(pose, intrinsics)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(fmat, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, match_num, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_258": {
                "variable": {
                    "value": "epi_lines",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fmat_tiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(fmat, [1, match_num, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(points1, axis=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_259": {
                "variable": {
                    "value": "dist_p2l",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.transpose(epi_lines, perm=[0, 1, 3, 2]), tf.expand_dims(points2, axis=3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_261": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "epi_lines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fmat_tiles, tf.expand_dims(points1, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_262": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "epi_lines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fmat_tiles, tf.expand_dims(points1, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_264": {
                "variable": {
                    "value": "dist_p2l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_p2l / dist_div",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_309": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()] + [self.global_step]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Supervisor_312": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ConfigProto_315": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_image_dtype_397": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_163": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_168": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_169": {
                "variable": {
                    "value": "self.incr_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_227": {
                "t": {
                    "value": "(1 - ssim) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_270": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_271": {
                "name": {
                    "value": "pixel_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pixel_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_282": {
                "name": {
                    "value": "'scale%d_depth' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_284": {
                "name": {
                    "value": "'scale%d_disparity_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "shown_disparity_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normalize_for_show(1.0 / self.pred_depth[s])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_285": {
                "name": {
                    "value": "'scale%d_target_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.tgt_image_all[s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_307": {
                "variable": {
                    "value": "parameter_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_prod(tf.shape(v)) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_365": {
                "variable": {
                    "value": "input_uint8",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.img_height, self.img_width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_image_dtype_404": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "data_loading",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "pose_and_explainability_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "compute_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_area_85": {
                "variable": {
                    "value": "curr_tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.preprocess_image(tgt_image)",
                            "Call"
                        ],
                        [
                            "loader.batch_unpack_image_sequence(input_mc, self.img_height, self.img_width, self.num_source)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_area_87": {
                "variable": {
                    "value": "curr_src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.preprocess_image(src_image_stack)",
                            "Call"
                        ],
                        [
                            "loader.batch_unpack_image_sequence(input_mc, self.img_height, self.img_width, self.num_source)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "tf.abs(smoothness_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_221": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_222": {
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_223": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_258": {
                "input": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(matches, [0, 0, 0], [-1, -1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([points1, ones], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "a": {
                    "value": "tf.transpose(epi_lines, perm=[0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(points2, axis=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_263": {
                "x": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_273": {
                "name": {
                    "value": "smooth_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.smooth_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_275": {
                "name": {
                    "value": "pose_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pose_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_277": {
                "name": {
                    "value": "ssim_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ssim_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_279": {
                "name": {
                    "value": "match_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.match_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_287": {
                "name": {
                    "value": "'scale%d_source_image_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.src_image_stack_all[s][:, :, :, i * 3:(i + 1) * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_294": {
                "name": {
                    "value": "'scale%d_projected_image_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deprocess_image(self.proj_image_stack_all[s][:, :, :, i * 3:(i + 1) * 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_295": {
                "name": {
                    "value": "'scale%d_proj_error_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_error_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deprocess_image(tf.clip_by_value(self.proj_error_stack_all[s][:, :, :, i * 3:(i + 1) * 3] - 1, -1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_296": {
                "name": {
                    "value": "'scale%d_mask_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_stack_all[s][:, :, :, i:i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_306": {
                "name": {
                    "value": "parameter_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_376": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "pose_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_114": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_proj_image - curr_tgt_image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(curr_proj_error, 0, perct_thresh)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projective_inverse_warp(curr_src_image_stack[:, :, :, 3 * i:3 * (i + 1)], tf.squeeze(pred_depth[s], axis=3), warp_pose, intrinsics[:, s, :, :], is_vec=pose_is_vec)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, suppresion_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_119": {
                "input": {
                    "value": "perct_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.percentile(curr_proj_error, q=99, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(perct_thresh, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_120": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(curr_proj_error, 0, perct_thresh)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "perct_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.percentile(curr_proj_error, q=99, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(perct_thresh, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_121": {
                "variable": {
                    "value": "above_perct_thresh_region",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(curr_proj_error, perct_thresh), 'float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_122": {
                "variable": {
                    "value": "above_perct_thresh_region",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "above_perct_thresh_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.cast(tf.equal(curr_proj_error, perct_thresh), 'float32'), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(above_perct_thresh_region, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "suppresion_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - tf.cast(above_perct_thresh_region, 'float32')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_124": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(curr_proj_error, 0, perct_thresh)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "suppresion_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(1.0 - tf.cast(above_perct_thresh_region, 'float32'), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_125": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projective_inverse_warp(curr_src_image_stack[:, :, :, 3 * i:3 * (i + 1)], tf.squeeze(pred_depth[s], axis=3), warp_pose, intrinsics[:, s, :, :], is_vec=pose_is_vec)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "suppresion_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(1.0 - tf.cast(above_perct_thresh_region, 'float32'), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_198": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_204": {
                "x": {
                    "value": "smoothness_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp_gradients_y * weights_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_normalize_209": {
                "x": {
                    "value": "prior_pose_vec[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_210": {
                "x": {
                    "value": "pred_pose_vec[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_259": {
                "a": {
                    "value": "epi_lines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fmat_tiles, tf.expand_dims(points1, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "input": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(matches, [0, 0, 2], [-1, -1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([points2, ones], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_292": {
                "t": {
                    "value": "self.proj_error_stack_all[s][:, :, :, i * 3:(i + 1) * 3] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "latest_checkpoint_325": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_98": {
                "variable": {
                    "value": "relative_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "relative_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_relative_pose(poses[:, 0, :], poses[:, i + 1, :])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_100": {
                "variable": {
                    "value": "relative_trans_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "relative_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_relative_pose(poses[:, 0, :], poses[:, i + 1, :])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "relative_pose_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([relative_rot_vec, relative_trans_vec], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(curr_proj_error, 0, perct_thresh)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, suppresion_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_130": {
                "variable": {
                    "value": "ssim_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projective_inverse_warp(curr_src_image_stack[:, :, :, 3 * i:3 * (i + 1)], tf.squeeze(pred_depth[s], axis=3), warp_pose, intrinsics[:, s, :, :], is_vec=pose_is_vec)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "proj_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_image_stack, curr_proj_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "mask_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_stack, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_151": {
                "variable": {
                    "value": "proj_error_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_error_stack, curr_proj_error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_198": {
                "x": {
                    "value": "image_gradients_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gradient(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_199": {
                "x": {
                    "value": "image_gradients_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gradient(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_307": {
                "input_tensor": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "input": {
                    "value": "pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "tf.equal(curr_proj_error, perct_thresh)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "ssim_mask * self.compute_ssim_loss(curr_proj_image, curr_tgt_image)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "self.compute_pose_loss(relative_pose_vec, pred_poses[:, i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_307": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "[relative_rot_vec, relative_trans_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_121": {
                "x": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, mask)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(curr_proj_error, 0, perct_thresh)",
                            "Call"
                        ],
                        [
                            "tf.multiply(curr_proj_error, suppresion_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "perct_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.percentile(curr_proj_error, q=99, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(perct_thresh, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_123": {
                "x": {
                    "value": "above_perct_thresh_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.cast(tf.equal(curr_proj_error, perct_thresh), 'float32'), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(above_perct_thresh_region, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "input": {
                    "value": "pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "tensorflow": {
            "Saver_40": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "geo_utils.py": {
        "tensorflow": {
            "clip_by_value_29": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r01, r00)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r10, r11)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r01, r00)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r10, r11)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_41": {
                "variable": {
                    "value": "cosz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r01, r00)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r10, r11)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_42": {
                "variable": {
                    "value": "sinz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r01, r00)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r10, r11)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "rotz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "rotz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "rotz_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "zmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_48": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_49": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_50": {
                "variable": {
                    "value": "roty_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "roty_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "roty_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_55": {
                "variable": {
                    "value": "cosx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_56": {
                "variable": {
                    "value": "sinx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_57": {
                "variable": {
                    "value": "rotx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "rotx_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "rotx_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_67": {
                "variable": {
                    "value": "r00",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_68": {
                "variable": {
                    "value": "r01",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "r02",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "r10",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_71": {
                "variable": {
                    "value": "r11",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_72": {
                "variable": {
                    "value": "r12",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_73": {
                "variable": {
                    "value": "r22",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r22 * r22 + r12 * r12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_95": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 3], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_97": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_98": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_99": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, axis=[1])",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_115": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_116": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(depth, [batch, 1, -1])",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ],
                        [
                            "pixel_coords",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ],
                        [
                            "cam_coords",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, -1, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ],
                        [
                            "cam_coords",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 4, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics)",
                            "Call"
                        ],
                        [
                            "cam_coords",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_156": {
                "variable": {
                    "value": "x_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_157": {
                "variable": {
                    "value": "y_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_158": {
                "variable": {
                    "value": "z_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_n, y_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ],
                        [
                            "pixel_coords",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 2, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_189": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coords, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "inv_207": {
                "variable": {
                    "value": "target_pose_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_vec2mat(target_pose_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_vec2mat(source_pose_vec)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "target_pose_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(target_pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_235": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_236": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, tf.zeros([batch, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_238": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "variable": {
                    "value": "proj_tgt_cam_to_src_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([intrinsics, tf.zeros([batch, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_vec2mat(pose)",
                            "Call"
                        ],
                        [
                            "pose_vec2mat(pose)",
                            "Call"
                        ],
                        [
                            "pose",
                            "Method Argument"
                        ],
                        [
                            "pose",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_355": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec3",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_356": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec3",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_357": {
                "variable": {
                    "value": "a3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec3",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_359": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, -a3, a2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_360": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a3, zeros, -a1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_361": {
                "variable": {
                    "value": "row3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-a2, a1, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_362": {
                "variable": {
                    "value": "vec3_ssm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[row1, row2, row3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_369": {
                "variable": {
                    "value": "essential_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, axis=[1])",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ],
                        [
                            "pose_vec2rt(vec)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "translation_ssm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "skew_symmetric_mat3(translation)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "essential_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_371": {
                "variable": {
                    "value": "fundamental_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(intrinsics)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "essential_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(rot_mat, translation_ssm, name='essential_mat')",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_372": {
                "variable": {
                    "value": "fundamental_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fundamental_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(intrinsics_inv, essential_mat, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fundamental_mat, intrinsics_inv)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "intrinsics_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(intrinsics)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_77": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "-r01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "r00",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 0, 0], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_78": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r02",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 0, 2], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(r22 * r22 + r12 * r12)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "-r12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "r22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 2, 2], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_83": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 1, 0], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "r11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 1, 1], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "r02",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rot, [0, 0, 2], [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(r22 * r22 + r12 * r12)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r02, cy)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_90": {
                "condition": {
                    "value": "tf.squeeze(tf.less(cy, 1e-06), axis=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1()",
                            "Call"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_138": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, 1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_139": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "a": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ],
                        [
                            "pixel_coords",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_185": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width - 1, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_186": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_284": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_289": {
                "variable": {
                    "value": "(coords_x, coords_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "coords",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_295": {
                "variable": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(coords, [1, 1], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_296": {
                "variable": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(coords, [1, 1], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_298": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(coords, [1, 1], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_300": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(coords, [1, 1], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_303": {
                "variable": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_304": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_307": {
                "variable": {
                    "value": "x0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(coords_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([1], dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_308": {
                "variable": {
                    "value": "y0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(coords_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([1], dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_309": {
                "variable": {
                    "value": "x1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1()",
                            "Call"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([1], dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_310": {
                "variable": {
                    "value": "y1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([1], dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_318": {
                "variable": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_319": {
                "variable": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2] * inp_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_repeat(tf.cast(tf.range(coord_size[0]), 'float32') * dim1, coord_size[1] * coord_size[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size[0], out_size[1], out_size[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "idx00",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x0_safe + base_y0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, inp_size[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_332": {
                "variable": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "im00",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx00, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "im01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx01, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_335": {
                "variable": {
                    "value": "im10",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx10, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "im11",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx11, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_343": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w00 * im00, w01 * im01, w10 * im10, w11 * im11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_344": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w00, w01, w10, w11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r01, r00)",
                            "Call"
                        ],
                        [
                            "tf.atan2(r10, r11)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_80": {
                "values": {
                    "value": "[z, y, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "values": {
                    "value": "[z, y, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "input": {
                    "value": "tf.less(cy, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "tf.matrix_inverse(intrinsics)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ],
                        [
                            "pixel_coords",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_177": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_178": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_181": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_189": {
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "coords",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_288": {
                "name": {
                    "value": "image_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_354": {
                "input": {
                    "value": "vec3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_90": {
                "x": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(r22 * r22 + r12 * r12)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_180": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "cam_coords.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "img.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "shape": {
                    "value": "[batch, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_283": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.atan2(-r12, r22)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_331": {
                "values": {
                    "value": "[-1, inp_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_333": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx00, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_334": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx01, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_335": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx10, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_336": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx11, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_177": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_179": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "cam_coords.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "img.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_181": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_283": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_333": {
                "x": {
                    "value": "idx00",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x0_safe + base_y0, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_334": {
                "x": {
                    "value": "idx01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "idx10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_safe + base_y0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_336": {
                "x": {
                    "value": "idx11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_303": {
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_304": {
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_320": {
                "x": {
                    "value": "tf.range(coord_size[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_283": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nets.py": {
        "tensorflow": {
            "concat_25": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_image, src_image_stack]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_125": {
                "variable": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_21": {
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tgt_image, src_image_stack], axis=3)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[rH.value, rW.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "input": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [p, p], [p, p], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [p, p], [p, p], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_out_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_out_layers",
                            "Method Argument"
                        ],
                        [
                            "num_out_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.batch_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_126": {
                "input": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [p, p], [p, p], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [p, p], [p, p], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_132": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[h * ratio, w * ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_153": {
                "features": {
                    "value": "conv3 + shortcut",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "pose_exp_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tgt_image, src_image_stack], axis=3)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 16, [7, 7], stride=2, scope='cnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv1, 32, [5, 5], stride=2, scope='cnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv2, 64, [3, 3], stride=2, scope='cnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv3, 128, [3, 3], stride=2, scope='cnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "depth_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "concat6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv6, skip5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv5, skip4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv4, skip3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv3, skip2, upred4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv2, skip1, upred3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv1, upred2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv4, 256, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv5, 256, [3, 3], stride=2, scope='cnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "pose_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv6, 256, [3, 3], stride=2, scope='cnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "6 * num_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pose_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv7, 6 * num_source, [1, 1], scope='pred', stride=1, normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(pose_pred, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_source, 6]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test_depth.py": {
        "tensorflow": {
            "Saver_53": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_55": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_57": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "model_variables_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_kitti_depth.py": {
        "tensorflow": {
            "Saver_48": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_50": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_52": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "model_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_kitti_pose.py": {
        "tensorflow": {
            "Saver_68": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "set_random_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8964",
                            "int"
                        ]
                    ]
                }
            },
            "run_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}