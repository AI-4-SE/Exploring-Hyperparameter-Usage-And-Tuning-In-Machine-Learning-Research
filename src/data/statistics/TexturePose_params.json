{
    "dataloader/eval_dataset.py": {
        "torch": {
            "from_numpy_98": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(imgname)[:, :, ::-1].copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.rgb_processing(img, center, scale)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "item[pose]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pose[index].copy()",
                            "Call"
                        ],
                        [
                            "np.zeros(72)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "item[betas]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas[index].copy()",
                            "Call"
                        ],
                        [
                            "np.zeros(10)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "item[pose_3d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pose_3d[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "item[pose_3d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "from_numpy_100": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_image(args.img, args.bbox, args.openpose, input_res=224)",
                            "Call"
                        ],
                        [
                            "img.permute(1, 2, 0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_file)[:, :, ::-1].copy()",
                            "Call"
                        ],
                        [
                            "crop(img, center, scale, (input_res, input_res))",
                            "Call"
                        ],
                        [
                            "img.astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_100": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "init_grot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init_grot.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init_pose.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f['shape'][:].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "tensor_66": {
                "variable": {
                    "value": "init_grot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init_grot.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init_pose.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f['shape'][:].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "J_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(config.JOINT_REGRESSOR_H36M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EvalDataset(None, args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_297": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_190": {
                "variable": {
                    "value": "shape_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((pred_vertices - gt_vertices) ** 2).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_190": {
                "variable": {
                    "value": "shape_err",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "rot_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_rotmat.view(-1, 3, 3), rot_pad.expand(curr_batch_size * 24, -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "pred_keypoints_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_regressor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J_regressor[None, :].expand(pred_vertices.shape[0], -1, -1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smpl_neutral(global_orient=pred_rotmat[:, [0]], body_pose=pred_rotmat[:, 1:], betas=pred_shape3, pose2rot=False).vertices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_177": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((pred_keypoints_3d - gt_keypoints_3d) ** 2).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_177": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/encoder.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_94": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion + npose + 13",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.decpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "npose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.decshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.deccam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "xf1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, init_pose, init_shape, init_cam]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "xf2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, xpose1, xshape1, xcam1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "xf3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, xpose2, xshape2, xcam2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "normalize_12": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_13": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_14": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "variable": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_25": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.view(bn * rn // 3, 3)",
                            "Call"
                        ],
                        [
                            "quat2mat(quat)",
                            "Call"
                        ],
                        [
                            "theta.view(bn, rn * 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_27": {
                "variable": {
                    "value": "v_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_28": {
                "variable": {
                    "value": "v_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_29": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_15": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_13": {
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_13": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/smpl.py": {
        "torch": {
            "tensor_29": {
                "data": {
                    "value": "J_regressor_cocoplus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(config.JOINT_REGRESSOR_COCOPLUS)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/part_utils.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "self.faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "SMPL(cfg.SMPL_MODEL_DIR).faces.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(cfg.VERTEX_TEXTURE_FILE)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_31": {
                "variable": {
                    "value": "parts_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * parts.permute(0, 2, 3, 1).contiguous().view(-1, 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "cam_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[camera[:, 1], camera[:, 2], 2 * self.focal_length / (self.render_res * camera[:, 0] + 1e-09)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_42": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "vertices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_49": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "vertices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}