{
    "layer_utils/proposal_layer.py": {
        "tensorflow": {
            "reshape_57": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "non_max_suppression_63": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "proposals[order, :]",
                            "Subscript"
                        ],
                        [
                            "proposals[keep, :]",
                            "Subscript"
                        ],
                        [
                            "bbox_transform_inv_tf(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "post_nms_topN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[cfg_key].RPN_POST_NMS_TOP_N",
                            "Attribute"
                        ],
                        [
                            "cfg[cfg_key].RPN_POST_NMS_TOP_N",
                            "Attribute"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "nms_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[cfg_key].RPN_NMS_THRESH",
                            "Attribute"
                        ],
                        [
                            "cfg[cfg_key].RPN_NMS_THRESH",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gather_65": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "proposals[order, :]",
                            "Subscript"
                        ],
                        [
                            "proposals[keep, :]",
                            "Subscript"
                        ],
                        [
                            "bbox_transform_inv_tf(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_66": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(proposals, indices)",
                            "Call"
                        ],
                        [
                            "tf.to_float(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_67": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(indices)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_inds, boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layer_utils/proposal_top_layer.py": {
        "tensorflow": {
            "reshape_45": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred[top_inds, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[top_inds]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_48": {
                "variable": {
                    "value": "(top_scores, top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[top_inds]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "rpn_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TEST.RPN_TOP_N",
                            "Attribute"
                        ],
                        [
                            "cfg.TEST.RPN_TOP_N",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores, k=rpn_top_n)",
                            "Call"
                        ],
                        [
                            "tf.reshape(top_scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_50": {
                "variable": {
                    "value": "top_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors[top_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.choice(length, size=rpn_top_n, replace=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(0)[::-1]",
                            "Subscript"
                        ],
                        [
                            "top_inds[:rpn_top_n]",
                            "Subscript"
                        ],
                        [
                            "top_inds.reshape(rpn_top_n)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(scores, k=rpn_top_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_51": {
                "variable": {
                    "value": "top_rpn_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred[top_inds, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "rpn_bbox_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.choice(length, size=rpn_top_n, replace=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(0)[::-1]",
                            "Subscript"
                        ],
                        [
                            "top_inds[:rpn_top_n]",
                            "Subscript"
                        ],
                        [
                            "top_inds.reshape(rpn_top_n)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(scores, k=rpn_top_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_55": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "bbox_transform_inv_tf(top_anchors, top_rpn_bbox)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "tf.to_float(proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(rpn_top_n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_inds, proposals]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layer_utils/snippets.py": {
        "tensorflow": {
            "meshgrid_29": {
                "variable": {
                    "value": "(shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "shift_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "np.meshgrid(shift_x, shift_y)",
                            "Call"
                        ],
                        [
                            "tf.range(width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.meshgrid(shift_x, shift_y)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "shift_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "np.meshgrid(shift_x, shift_y)",
                            "Call"
                        ],
                        [
                            "tf.range(height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.meshgrid(shift_x, shift_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shift_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "np.meshgrid(shift_x, shift_y)",
                            "Call"
                        ],
                        [
                            "tf.range(width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.meshgrid(shift_x, shift_y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shift_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "np.meshgrid(shift_x, shift_y)",
                            "Call"
                        ],
                        [
                            "tf.range(height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.meshgrid(shift_x, shift_y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([sx, sy, sx, sy])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height",
                            "Method Argument"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(shifts, shape=[1, K, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "anchor_constant",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors.reshape((1, A, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "anchors_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.add(anchor_constant, shifts)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(length, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_32": {
                "values": {
                    "value": "[sx, sy, sx, sy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "tensor": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.stack([sx, sy, sx, sy]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(shifts, shape=[1, K, 4]), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, K, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_39": {
                "x": {
                    "value": "anchor_constant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(anchors.reshape((1, A, 4)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.stack([sx, sy, sx, sy]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(shifts, shape=[1, K, 4]), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_41": {
                "x": {
                    "value": "anchors_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.add(anchor_constant, shifts), shape=(length, 4))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/bbox_transform.py": {
        "tensorflow": {
            "cast_87": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.astype(deltas.dtype, copy=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(boxes, deltas.dtype)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "deltas.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_90": {
                "variable": {
                    "value": "ctr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "widths * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_91": {
                "variable": {
                    "value": "ctr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "heights * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_98": {
                "variable": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(dx, widths)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 0] + 0.5 * widths",
                            "BinOp"
                        ],
                        [
                            "tf.add(boxes[:, 0], widths * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "variable": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(dy, heights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 1] + 0.5 * heights",
                            "BinOp"
                        ],
                        [
                            "tf.add(boxes[:, 1], heights * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "pred_w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(dw)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2] - boxes[:, 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 2], boxes[:, 0]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_101": {
                "variable": {
                    "value": "pred_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(dh)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3] - boxes[:, 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 3], boxes[:, 1]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "subtract_103": {
                "variable": {
                    "value": "pred_boxes0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx * widths[:, np.newaxis] + ctr_x[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dx, widths), ctr_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_w * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_104": {
                "variable": {
                    "value": "pred_boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dy, heights), ctr_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_105": {
                "variable": {
                    "value": "pred_boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx * widths[:, np.newaxis] + ctr_x[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dx, widths), ctr_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_w * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_106": {
                "variable": {
                    "value": "pred_boxes3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dy, heights), ctr_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "b0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 0], im_info[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_113": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 1], im_info[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_114": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 2], im_info[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_115": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 3], im_info[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "values": {
                    "value": "[pred_boxes0, pred_boxes1, pred_boxes2, pred_boxes3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_116": {
                "values": {
                    "value": "[b0, b1, b2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_88": {
                "x": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_89": {
                "x": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_98": {
                "x": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 0::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2] - boxes[:, 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 2], boxes[:, 0]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_99": {
                "x": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 1::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3] - boxes[:, 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 3], boxes[:, 1]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_100": {
                "x": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 2::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_101": {
                "x": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 3::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_112": {
                "x": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_113": {
                "x": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_114": {
                "x": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_115": {
                "x": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/train_val.py": {
        "tensorflow": {
            "ConfigProto_340": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_152": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NewCheckpointReader_83": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_101": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ],
                        [
                            "self.construct_graph(sess)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_121": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_122": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_123": {
                "variable": {
                    "value": "self.valwriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbvaldir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.get_variables_to_restore(variables, var_keep_dic)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_344": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_94": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_158": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_256": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ],
                        [
                            "self.construct_graph(sess)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "rate * cfg.TRAIN.GAMMA",
                            "BinOp"
                        ],
                        [
                            "self.initialize(sess)",
                            "Call"
                        ],
                        [
                            "self.restore(sess, str(sfiles[-1]), str(nfiles[-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gvs",
                            "variable"
                        ],
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nets/mobilenet_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_111": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_26": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "separable_conv2d_18": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "separable_conv2d_28": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenet_v1_base(pool5, _CONV_DEFS[12:], starting_layer=12, depth_multiplier=self._depth_multiplier, reuse=reuse, scope=self._scope)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Fix_MobileNet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_187": {
                "variable": {
                    "value": "Conv2d_0_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv2d_0_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, max(int(32 * self._depth_multiplier), 8)]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/Conv2d_0/weights': Conv2d_0_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "separable_conv2d_same(net, conv_def.kernel, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth(conv_def.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_point_base",
                            "variable"
                        ],
                        [
                            "end_point_base + '_depthwise'",
                            "BinOp"
                        ],
                        [
                            "end_point_base + '_pointwise'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_186": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_192": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/Conv2d_0/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(Conv2d_0_rgb / (255.0 / 2.0), [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_193": {
                "tensor": {
                    "value": "Conv2d_0_rgb / (255.0 / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nets/networks.py": {
        "tensorflow": {
            "resize_bilinear_37": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.to_int32(self._im_info[:2] / self._im_info[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_38": {
                "variable": {
                    "value": "self._gt_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, tf.to_int32(self._im_info[:2] / self._im_info[2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self._gt_image, self._gt_boxes, self._im_info]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_60": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_253": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_255": {
                "variable": {
                    "value": "smoothL1_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.less(abs_in_box_diff, 1.0 / sigma_2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_258": {
                "variable": {
                    "value": "loss_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(out_loss_box, axis=dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image_to_head(is_training)",
                            "Call"
                        ],
                        [
                            "net_conv",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.RPN_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "rpn_conv/3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_313": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_cls_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_320": {
                "variable": {
                    "value": "rpn_cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(rpn_cls_score_reshape, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_324": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_bbox_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_357": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_377": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_378": {
                "variable": {
                    "value": "self._im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_379": {
                "variable": {
                    "value": "self._gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_47": {
                "name": {
                    "value": "GROUND_TRUTH",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_50": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_51": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /zero_fraction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_54": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_57": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._event_summaries.items()",
                            "Call"
                        ],
                        [
                            "self._score_summaries.items()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "to_caffe",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_caffe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(bottom, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "to_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(to_caffe, tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_70": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "bottom_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "reshaped_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "bottom_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_74": {
                "logits": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_130": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_138": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "crop_and_resize_141": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_143": {
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_151": {
                "variable": {
                    "value": "(rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "anchor_target_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_score, self._gt_boxes, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_162": {
                "variable": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer, [rpn_cls_score, self._gt_boxes, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32, tf.float32, tf.float32], name='anchor_target')",
                            "Call"
                        ],
                        [
                            "tf.to_int32(rpn_labels, name='to_int32')",
                            "Call"
                        ],
                        [
                            "self._anchor_target_layer(rpn_cls_score, 'anchor')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_174": {
                "variable": {
                    "value": "(rois, roi_scores, labels, bbox_targets, bbox_inside_weights, bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_target_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rois, roi_scores, self._gt_boxes, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_189": {
                "variable": {
                    "value": "self._proposal_targets[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_200": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[0] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_201": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[1] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_223": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_224": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_226": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_227": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._predictions['rpn_cls_score_reshape']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._anchor_targets['rpn_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_267": {
                "variable": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(rpn_label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_cls_score, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_label, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "rpn_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=rpn_cls_score, labels=rpn_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._proposal_targets['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=cls_score, labels=label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_301": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "regu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_438": {
                "variable": {
                    "value": "self._summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_439": {
                "variable": {
                    "value": "self._summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_int32_37": {
                "x": {
                    "value": "self._im_info[:2] / self._im_info[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zero_fraction_51": {
                "value": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "reshaped_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(bottom_reshaped, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ],
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_89": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_top_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_top",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_111": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "'ANCHOR_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "py_func_211": {
                "variable": {
                    "value": "(anchors, anchor_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_anchors_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[height, width, self._feat_stride, self._anchor_scales, self._anchor_ratios]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "generate_anchors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_255": {
                "x": {
                    "value": "tf.less(abs_in_box_diff, 1.0 / sigma_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "input_tensor": {
                    "value": "out_loss_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_outside_weights * in_loss_box",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "'LOSS_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "tensor": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_layer(rpn_cls_score, 2, 'rpn_cls_score_reshape')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_64": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, num_dim, -1], [input_shape[2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_128": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal_top_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_top_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal_top')",
                            "Call"
                        ],
                        [
                            "proposal_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal')",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ],
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_target_layer(rois, roi_scores, 'rpn_rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._build_network(training)",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_133": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal_top_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_top_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal_top')",
                            "Call"
                        ],
                        [
                            "proposal_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal')",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ],
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_target_layer(rois, roi_scores, 'rpn_rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._build_network(training)",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_134": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal_top_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_top_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal_top')",
                            "Call"
                        ],
                        [
                            "proposal_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal')",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ],
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_target_layer(rois, roi_scores, 'rpn_rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._build_network(training)",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_135": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal_top_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_top_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal_top')",
                            "Call"
                        ],
                        [
                            "proposal_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal')",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ],
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_target_layer(rois, roi_scores, 'rpn_rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._build_network(training)",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_136": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal_top_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_top_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal_top')",
                            "Call"
                        ],
                        [
                            "proposal_layer_tf(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors)",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_layer, [rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors], [tf.float32, tf.float32], name='proposal')",
                            "Call"
                        ],
                        [
                            "tf.py_func(proposal_target_layer, [rois, roi_scores, self._gt_boxes, self._num_classes], [tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32], name='proposal_target')",
                            "Call"
                        ],
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_target_layer(rois, roi_scores, 'rpn_rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred, 'rois')",
                            "Call"
                        ],
                        [
                            "self._build_network(training)",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ],
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_138": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_141": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_200": {
                "x": {
                    "value": "self._im_info[0] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_201": {
                "x": {
                    "value": "self._im_info[1] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_255": {
                "x": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(in_box_diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "not_equal_267": {
                "x": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_268": {
                "params": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ],
                        [
                            "rpn_cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_269": {
                "params": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_271": {
                "logits": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ],
                        [
                            "rpn_cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_284": {
                "logits": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ],
                        [
                            "sess.run([self._predictions['cls_score'], self._predictions['cls_prob'], self._predictions['bbox_pred'], self._predictions['rois']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._proposal_targets['labels'], [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_regularization_losses_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_331": {
                "control_inputs": {
                    "value": "[rpn_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_427": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_131": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_132": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_256": {
                "x": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_408": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_430": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._event_summaries.items()",
                            "Call"
                        ],
                        [
                            "self._score_summaries.items()",
                            "Call"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._event_summaries.items()",
                            "Call"
                        ],
                        [
                            "self._score_summaries.items()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nets/resnet_v1.py": {
        "tensorflow": {
            "squeeze_52": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_54": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_61": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_77": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_v1.resnet_v1(pool5, self._blocks[-1:], global_pool=False, include_root_block=False, reuse=reuse, scope=self._scope)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "crop_and_resize_64": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_66": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_inds), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_inds), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_68": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_52": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_57": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_58": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_59": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_60": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_152": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_55": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_56": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_64": {
                "x": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_68": {
                "x": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_157": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_158": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nets/vgg16.py": {
        "tensorflow": {
            "repeat_23": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_26": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_29": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_31": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_32": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_35": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_44": {
                "variable": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool5",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(pool5_flat, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc6, keep_prob=0.5, is_training=True, scope='dropout6')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc6, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7, keep_prob=0.5, is_training=True, scope='dropout7')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "Fix_VGG16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "fc6_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc6_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 512, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "fc7_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc7_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4096, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/fc6/weights': fc6_conv, self._scope + '/fc7/weights': fc7_conv, self._scope + '/conv1/conv1_1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_83": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc6_conv, self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_85": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc7_conv, self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_87": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/conv1_1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "fc6_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc6_conv', [7, 7, 512, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "fc7_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc7_conv', [1, 1, 4096, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_88": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [3, 3, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test_net.py": {
        "tensorflow": {
            "ConfigProto_69": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainval_net.py": {
        "tensorflow": {}
    },
    "val_view.py": {
        "tensorflow": {
            "ConfigProto_88": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_91": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}