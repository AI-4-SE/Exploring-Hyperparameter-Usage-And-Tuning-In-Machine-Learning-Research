{
    "ModelNetSo3/geometric_utils.py": {
        "torch": {
            "empty_25": {
                "variable": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(q.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_66": {
                "variable": {
                    "value": "cx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_67": {
                "variable": {
                    "value": "sx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_69": {
                "variable": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_70": {
                "variable": {
                    "value": "sy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_72": {
                "variable": {
                    "value": "cz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "az",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_73": {
                "variable": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "az",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "Ay",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "Az",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "Ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[cy, 0, sy], [0, 1, 0], [-sy, 0, cy]])",
                            "Call"
                        ],
                        [
                            "torch.zeros((angles.shape[0], 3, 3), dtype=angles.dtype, device=angles.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[1, 0, 0], [0, cx, -sx], [0, sx, cx]])",
                            "Call"
                        ],
                        [
                            "torch.zeros((angles.shape[0], 3, 3), dtype=angles.dtype, device=angles.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_24": {
                "input": {
                    "value": "q_unnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Pascal3D/Pascal3D.py": {
        "torch": {}
    },
    "Pascal3D/Pascal3D_all.py": {
        "torch": {
            "ConcatDataset_27": {
                "variable": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[real.get_train(augmentation=True), rendered_subset]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Pascal3D/Pascal3D_render.py": {
        "torch": {}
    },
    "Pascal3D/main.py": {
        "torch": {
            "RandomSampler_111": {
                "variable": {
                    "value": "real_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "real.get_train()",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "UPNA/UPNA.py": {
        "torch": {}
    },
    "dataloader_utils.py": {
        "torch": {
            "ConcatDataset_13": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(map(lambda t: t[0], dataset_sampler_pairs))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "geometric_utils.py": {
        "torch": {
            "empty_24": {
                "variable": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(q.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_65": {
                "variable": {
                    "value": "cx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_66": {
                "variable": {
                    "value": "sx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_68": {
                "variable": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_69": {
                "variable": {
                    "value": "sy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_71": {
                "variable": {
                    "value": "cz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "az",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_72": {
                "variable": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "az",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "Ay",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "Az",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(angles.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "input": {
                    "value": "Ay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[cy, 0, sy], [0, 1, 0], [-sy, 0, cy]])",
                            "Call"
                        ],
                        [
                            "torch.zeros((angles.shape[0], 3, 3), dtype=angles.dtype, device=angles.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[1, 0, 0], [0, cx, -sx], [0, sx, cx]])",
                            "Call"
                        ],
                        [
                            "torch.zeros((angles.shape[0], 3, 3), dtype=angles.dtype, device=angles.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "input": {
                    "value": "q_unnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "logger.py": {
        "torch": {
            "save_39": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logger_path, 'saved_weights', 'state_dict_{}.pkl'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.logger_path, 'saved_weights', 'state_dict_{}.pkl'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "vsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "S[:, 1:] / (smax.view(-1, 1) + epsilon_log_hg)",
                            "BinOp"
                        ],
                        [
                            "v_i[:2] / (smax + epsilon_log_hg)",
                            "BinOp"
                        ],
                        [
                            "S[:, 1:] / (smax.view(-1, 1) + epsilon_log_hg)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.arange(steps)",
                            "Call"
                        ],
                        [
                            "x * steplen",
                            "BinOp"
                        ],
                        [
                            "x + x_from",
                            "BinOp"
                        ],
                        [
                            "np.arange(steps)",
                            "Call"
                        ],
                        [
                            "x * steplen",
                            "BinOp"
                        ],
                        [
                            "x + x_from",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sinh_expr(xt)",
                            "Call"
                        ],
                        [
                            "log_sinh_expr(xt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.arange(steps)",
                            "Call"
                        ],
                        [
                            "x * steplen",
                            "BinOp"
                        ],
                        [
                            "x + x_from",
                            "BinOp"
                        ],
                        [
                            "np.arange(steps)",
                            "Call"
                        ],
                        [
                            "x * steplen",
                            "BinOp"
                        ],
                        [
                            "x + x_from",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sinh_expr(xt)",
                            "Call"
                        ],
                        [
                            "log_sinh_expr(xt)",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_261": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "V.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_270": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t_R1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t_R1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t_R1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "variable": {
                    "value": "rotation_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_R1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "t_R2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "tr_R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_offset.view(-1, 9)[:, ::4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_276": {
                "variable": {
                    "value": "cos_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tr_R - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(cos_angle, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_277": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tr_R - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(cos_angle, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_31": {
                "variable": {
                    "value": "vsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "S[:, 1:] / (smax.view(-1, 1) + epsilon_log_hg)",
                            "BinOp"
                        ],
                        [
                            "v_i[:2] / (smax + epsilon_log_hg)",
                            "BinOp"
                        ],
                        [
                            "S[:, 1:] / (smax.view(-1, 1) + epsilon_log_hg)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(S.shape[0], 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "exp_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_94": {
                "variable": {
                    "value": "abs_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_95": {
                "variable": {
                    "value": "m_exp_in_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-abs_in * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_103": {
                "variable": {
                    "value": "abs_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_104": {
                "variable": {
                    "value": "sign_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "svd_171": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_like_176": {
                "variable": {
                    "value": "Diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "svd_202": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "svd_228": {
                "variable": {
                    "value": "(_, S, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_229": {
                "input": {
                    "value": "log_sinh_expr(S)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "det_263": {
                "variable": {
                    "value": "s3sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(U, V.transpose(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_319": {
                "variable": {
                    "value": "abs_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_320": {
                "variable": {
                    "value": "m_exp_in_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-abs_in * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_328": {
                "variable": {
                    "value": "abs_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_329": {
                "variable": {
                    "value": "sign_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "rotation_candidate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "V.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_174": {
                "variable": {
                    "value": "s3sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(U, V.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(U, V.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "rotation_candidate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "V.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_205": {
                "variable": {
                    "value": "s3sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(U, V.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.matmul(U, V.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_246": {
                "input": {
                    "value": "((Rest - R) ** 2).view(-1, 9)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_251": {
                "input": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q1 / torch.norm(q1, dim=1).view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "(q1 - q2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "(angles1 - angles2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "any_274": {
                "input": {
                    "value": "cos_angle > 1.1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "-d * smax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / (1 + tmp)",
                            "BinOp"
                        ],
                        [
                            "weight / np.sum(weight)",
                            "BinOp"
                        ],
                        [
                            "1 / (1 + tmp)",
                            "BinOp"
                        ],
                        [
                            "weight / torch.sum(weight, dim=1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "weight[:, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_97": {
                "input": {
                    "value": "(1 - m_exp_in_2) / (abs_in * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_182": {
                "input": {
                    "value": "A.view(-1, 1, 9)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "R.view(-1, 9, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_209": {
                "input": {
                    "value": "A.view(-1, 1, 9)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "R.view(-1, 9, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "input": {
                    "value": "A.view(-1, 1, 9)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "R.view(-1, 9, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "V.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_322": {
                "input": {
                    "value": "(1 - m_exp_in_2) / (abs_in * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_36": {
                "input": {
                    "value": "-d * smax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_train(False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_80": {
                "variable": {
                    "value": "real_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_real.get_train(use_augmentation)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "dataloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real.get_eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_train()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "dataloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_train()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "dataloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_198": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "finetune_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.head.parameters()",
                            "Call"
                        ],
                        [
                            "list(model.head.parameters()) + list(model.class_embedding.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cur_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "cur_lr * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eye(3, 3, device=R.device, dtype=R.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_26": {
                "variable": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.eye(3, 3, device=R.device, dtype=R.dtype), 0)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(Rest, R.shape[0], 0)",
                            "Call"
                        ],
                        [
                            "loss.batch_torch_A_to_R(A)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "repeats": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_train(use_augment)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.get_eval()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(torch.utils.data.get_worker_info().seed % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_210": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cur_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "cur_lr * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_25": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "R.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_212": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cur_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "cur_lr * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_223": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(R.shape[0], dtype=R.dtype, device=R.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(R.shape[0], dtype=R.dtype, device=R.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "R.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "R.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_150": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_158": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_216": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.base.output_size + embedding_dim, num_hidden_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Embedding_231": {
                "variable": {
                    "value": "self.class_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "conc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_space, class_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "self.base.output_size + embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_234": {
                "num_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_236": {
                "in_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_237": {
                "num_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "num_hidden_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "script_compute_mean_UPNA.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "script_dump_modelnet_errors.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_eval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eye(3, 3, device=R.device, dtype=R.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_22": {
                "variable": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.eye(3, 3, device=R.device, dtype=R.dtype), 0)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(Rest, R.shape[0], 0)",
                            "Call"
                        ],
                        [
                            "loss.batch_torch_A_to_R(A)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_21": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "R.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "script_evaluate_approximation_accuracy.py": {
        "torch": {}
    },
    "script_test_loss.py": {
        "torch": {
            "tensor_7": {
                "variable": {
                    "value": "Ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[d, 0, 0], [0, d, 0], [0, 0, d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "loss_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss.KL_Fisher(F, R, overreg=1.05)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss.KL_approx_rough(F, R, overreg=1.05)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss_a)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_logger.py": {
        "torch": {
            "DataLoader_9": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_train()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "Rest",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_loss.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0, 0], [0, cos, sin], [0, -sin, cos]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_17": {
                "variable": {
                    "value": "R_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0, 0], [0, cos1, sin1], [0, -sin1, cos1]], [[1, 0, 0], [0, 1, 0], [0, 0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "R_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0, 0], [0, 1, 0], [0, 0, 1]], [[cos2, sin2, 0], [-sin2, cos2, 0], [0, 0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_math.py": {
        "torch": {
            "empty_14": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, dims_per_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_norm_factor.py": {
        "torch": {
            "empty_5": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_14": {
                "variable": {
                    "value": "abs_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(rangee * ((to_x - from_x) / (N - 1)) + from_x).view(1, N)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_45": {
                "variable": {
                    "value": "i3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(s[:, 2] + s[:, 0]).view(-1, 1) * (x - 1).view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "(s0 + s2).view(-1, 1) * (x - 1).view(1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_62": {
                "variable": {
                    "value": "i4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(s[:, 2] + s[:, 0]).view(-1, 1) * (x - 1).view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "(s0 + s2).view(-1, 1) * (x - 1).view(1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "rangee",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_27": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_74": {
                "variable": {
                    "value": "log_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / 2 * torch_integral(integrand_CF, input_v, -1, 1, N)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_75": {
                "variable": {
                    "value": "log_supress",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_84": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(S.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 0.5, -0.2]) * xx",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_16": {
                "input": {
                    "value": "abs_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "abs_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_52": {
                "input": {
                    "value": "s[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_53": {
                "input": {
                    "value": "s[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(S[:, i:], S[:, :i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "y * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "visualize_modelnet.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "visualize_pascal3d.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_247": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ],
                        [
                            "dataset.get_eval()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ],
                        [
                            "ListSampler(idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}