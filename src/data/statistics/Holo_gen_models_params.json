{
    "Holo_MDN.py": {
        "tensorflow": {
            "argmax_89": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "PI",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_91": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "ndind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_93": {
                "variable": {
                    "value": "MU_k",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MU",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ndind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([c, k], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_95": {
                "variable": {
                    "value": "SIGMA_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.gather_nd(SIGMA, ndind), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_98": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH, L]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_99": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "MU_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(MU, ndind)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(SIGMA_k, eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [N_BATCH, L])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, name='X')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "X_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [N_BATCH, L])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, name='X')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "X_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X, [K, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_tile, [N_BATCH, K, L])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, K, L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "dYSq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X_tile - MU)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_110": {
                "variable": {
                    "value": "expon",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dYSq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X_tile - MU), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reciprocal(2 * tf.square(SIGMA))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_111": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.sqrt(TWOPI_), SIGMA)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_112": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reciprocal(tf.multiply(tf.sqrt(TWOPI_), SIGMA))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(-expon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_220": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_231": {
                "variable": {
                    "value": "MDN_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "l2_loss_232": {
                "variable": {
                    "value": "X_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "X - X_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_235": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_238": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "result and os.path.isfile(os.path.join(path, indices[i + k]))",
                            "BoolOp"
                        ],
                        [
                            "tf.add(MU_k, tf.multiply(SIGMA_k, eps))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "input": {
                    "value": "tf.matmul(PI, tf.transpose(gauss))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_124": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_126": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "par",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 6, K * (L + 2), update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, K, L + 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_143": {
                "variable": {
                    "value": "max_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "par[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_144": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "par[:, :, 0] - max_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_145": {
                "variable": {
                    "value": "norm_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pi, 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_146": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(par[:, :, 0] - max_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pi, norm_pi)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reciprocal(tf.reduce_sum(pi, 1, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_147": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "par[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_random_seed_197": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "tf.gather_nd(SIGMA, ndind)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_99": {
                "x": {
                    "value": "SIGMA_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.gather_nd(SIGMA, ndind), -1), [1, L])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal([N_BATCH, L], mean=0.0, stddev=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(1e-07, shape=[N_BATCH])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_109": {
                "x": {
                    "value": "X_tile - MU",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_110": {
                "x": {
                    "value": "2 * tf.square(SIGMA)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_111": {
                "x": {
                    "value": "tf.sqrt(TWOPI_)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "SIGMA",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_112": {
                "x": {
                    "value": "-expon",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "a": {
                    "value": "PI",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(gauss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "MDN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "tf.log(mixture_density(X, PI, SIGMA, MU, N_BATCH, K, L) + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_nd_95": {
                "params": {
                    "value": "SIGMA",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ndind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([c, k], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "TWOPI_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(1.0 / np.sqrt(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_113": {
                "a": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(norm, tf.exp(-expon))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(par[:, :, 0] - max_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pi, norm_pi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_230": {
                "x": {
                    "value": "mixture_density(X, PI, SIGMA, MU, N_BATCH, K, L) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_110": {
                "x": {
                    "value": "SIGMA",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Holo_cGAN.py": {
        "tensorflow": {
            "placeholder_234": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "X_REAL",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X_REAL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "variable": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(D_FAKE) + tf.nn.softplus(-D_REAL)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_250": {
                "variable": {
                    "value": "D_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_251": {
                "variable": {
                    "value": "G_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_254": {
                "variable": {
                    "value": "D_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_259": {
                "variable": {
                    "value": "G_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_266": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_269": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_134": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_136": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(c4, [N_BATCH, 8, 8])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_148": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_156": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_160": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_162": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do2, 8, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_246": {
                "input_tensor": {
                    "value": "tf.nn.softplus(-D_FAKE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_245": {
                "features": {
                    "value": "-D_REAL",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_246": {
                "features": {
                    "value": "-D_FAKE",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_loss_246": {
                "t": {
                    "value": "X_FAKE - X_REAL",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Holo_cGAN_forwLoss.py": {
        "tensorflow": {
            "placeholder_275": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_276": {
                "variable": {
                    "value": "X_REAL",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X_REAL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_277": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_278": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_288": {
                "variable": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y - Y_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_289": {
                "variable": {
                    "value": "Y_HAT_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y_HAT_HAT - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_290": {
                "variable": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(D_FAKE) + tf.nn.softplus(-D_REAL)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_295": {
                "variable": {
                    "value": "D_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "variable": {
                    "value": "G_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_297": {
                "variable": {
                    "value": "F_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_300": {
                "variable": {
                    "value": "D_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_305": {
                "variable": {
                    "value": "G_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_310": {
                "variable": {
                    "value": "F_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_314": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_317": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(c4, [N_BATCH, 8, 8])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "dc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconvLayer(d, 5, [N_BATCH, 10, 10, 4], 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_110": {
                "variable": {
                    "value": "dc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconvLayer(dc1, 6, [N_BATCH, 32, 32, 4], 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "dc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconvLayer(dc2, 7, [N_BATCH, 100, 100, 4], 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(dc3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(dc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_126": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_128": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_139": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(dc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_171": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 8, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_173": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 8, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(c4, [N_BATCH, 8, 8])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_182": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(concat, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_185": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_193": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_197": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do2, 8, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_248": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'deconvLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "input_tensor": {
                    "value": "tf.nn.softplus(-D_FAKE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_290": {
                "features": {
                    "value": "-D_REAL",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_291": {
                "features": {
                    "value": "-D_FAKE",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_loss_291": {
                "t": {
                    "value": "X_FAKE - X_REAL",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Holo_cGAN_forwardDiscriminator.py": {
        "tensorflow": {
            "placeholder_268": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_269": {
                "variable": {
                    "value": "X_REAL",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X_REAL",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_271": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_281": {
                "variable": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y - Y_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_282": {
                "variable": {
                    "value": "Y_HAT_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y_HAT_HAT - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_283": {
                "variable": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(D_FAKE) + tf.nn.softplus(-D_REAL)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "variable": {
                    "value": "G_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(-D_FAKE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_288": {
                "variable": {
                    "value": "D_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_289": {
                "variable": {
                    "value": "G_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_290": {
                "variable": {
                    "value": "F_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_293": {
                "variable": {
                    "value": "D_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_298": {
                "variable": {
                    "value": "G_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_303": {
                "variable": {
                    "value": "F_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_307": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_310": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(c4, [N_BATCH, 8, 8])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 4, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 4, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(d2, [N_BATCH, 100, 100])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_127": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 4, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_129": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 4, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 4, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ],
                        [
                            "sample_Z(N_BATCH, N_LAT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(c, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_140": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(c, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(c, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(c, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(d2, [N_BATCH, 100, 100])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i + k * N_BATCH, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(x, 1, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "convLayer(y, 1, 4, 7, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_172": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(c1, 2, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "convLayer(c1, 2, 4, 5, 3, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_174": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 4, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "convLayer(c2, 3, 4, 3, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_179": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "convLayer(c, 4, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_182": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ],
                        [
                            "convLayer(c4, 5, 8, 3, 1, spec_norm=True, update_collection=update_collection, padStr='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_188": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_189": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(c, 3, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "denseLayer(c5, 6, 512, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_192": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do1, 4, 10000, specnorm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "denseLayer(do1, 7, 256, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseLayer(do2, 8, 1, spec_norm=True, update_collection=update_collection)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_241": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'deconvLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_284": {
                "features": {
                    "value": "-D_FAKE",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_283": {
                "features": {
                    "value": "-D_REAL",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Holo_cGAN_recLoss.py": {
        "tensorflow": {}
    },
    "Holo_cVAE.py": {
        "tensorflow": {
            "squeeze_162": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(lat, [0, 0, 0], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(lat, [0, 0, 1], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_170": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_257": {
                "variable": {
                    "value": "Z_VALID",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_262": {
                "variable": {
                    "value": "VAE_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "l2_loss_263": {
                "variable": {
                    "value": "X_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "X - X_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_265": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_268": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_88": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_90": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [N_BATCH, np.sqrt(N_LAT).astype(np.int32), np.sqrt(N_LAT).astype(np.int32), 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, np.sqrt(N_LAT).astype(np.int32), np.sqrt(N_LAT).astype(np.int32), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 6, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_111": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 6, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_114": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_135": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_137": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8 * 8])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_146": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 6, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "lat_par",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_172": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(lat, [0, 0, 0], [-1, -1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.exp(log_sigma_sq / 2), eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_227": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_162": {
                "input_": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_163": {
                "input_": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_172": {
                "x": {
                    "value": "tf.exp(log_sigma_sq / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal([N_BATCH, N_LAT], mean=0.0, stddev=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_179": {
                "t": {
                    "value": "x - x_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "input_tensor": {
                    "value": "tf.exp(log_sigma) + tf.square(mu) - 1.0 - log_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_172": {
                "x": {
                    "value": "log_sigma_sq / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_181": {
                "x": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_181": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(lat, [0, 0, 0], [-1, -1, 1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Holo_cVAE_forward.py": {
        "tensorflow": {
            "squeeze_202": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(lat, [0, 0, 0], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(lat, [0, 0, 1], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_210": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_284": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_295": {
                "variable": {
                    "value": "Z_VALID",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_299": {
                "variable": {
                    "value": "FORW_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_303": {
                "variable": {
                    "value": "Y_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y - Y_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_304": {
                "variable": {
                    "value": "Y_HAT_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Y_HAT_HAT - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_305": {
                "variable": {
                    "value": "X_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "X - X_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_306": {
                "variable": {
                    "value": "VAE_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdamOptimizer_307": {
                "variable": {
                    "value": "FORW_solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_309": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_312": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N_BATCH, 8 * 8])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(x, 1, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_93": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 4, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 4, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 3, 256, spec_norm=False, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_100": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 3, 256, spec_norm=False, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 4, 256, spec_norm=False, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 6, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 4, 256, spec_norm=False, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 6, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "dc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(deconvLayer(d, 5, [N_BATCH, 10, 10, 4], 3, 1, spec_norm=False, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_111": {
                "variable": {
                    "value": "dc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(deconvLayer(dc1, 6, [N_BATCH, 32, 32, 4], 5, 3, spec_norm=False, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "dc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(deconvLayer(dc2, 7, [N_BATCH, 100, 100, 4], 7, 3, spec_norm=False, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(dc3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(dc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(x, 1, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_128": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 4, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_130": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 4, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 4, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [N_BATCH, np.sqrt(N_LAT).astype(np.int32), np.sqrt(N_LAT).astype(np.int32), 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, np.sqrt(N_LAT).astype(np.int32), np.sqrt(N_LAT).astype(np.int32), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(concat, 4, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_140": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 4, 256, spec_norm=False, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 6, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "do2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 4, 256, spec_norm=False, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 6, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(d3, 8, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn9', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cf, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cf)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(dc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_output(i, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(x, 1, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_175": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 4, 3, 1, spec_norm=False, update_collection=update_collection, padStr='SAME'), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 4, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_177": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 4, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 4, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [N_BATCH, 8, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N_BATCH, 8 * 8])",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(testNr, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ],
                        [
                            "load_fourier(i, N_BATCH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 3, 256, spec_norm=False, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_186": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c, 3, 256, spec_norm=False, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(concat, 4, 512, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 4, 256, spec_norm=False, update_collection=update_collection), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(c5, 6, 256, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(do1, 5, 256, update_collection=update_collection), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "lat_par",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do2, 7, 256, update_collection=update_collection), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d3, [N_BATCH, 8, 8, 4])",
                            "Call"
                        ],
                        [
                            "batch_norm(denseLayer(d2, 6, 2 * N_LAT, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, N_LAT, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_212": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(lat, [0, 0, 0], [-1, -1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.exp(log_sigma_sq / 2), eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_262": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "'deconvLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_202": {
                "input_": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_203": {
                "input_": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_212": {
                "x": {
                    "value": "tf.exp(log_sigma_sq / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal([N_BATCH, N_LAT], mean=0.0, stddev=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "tf.exp(log_sigma) + tf.square(mu) - 1.0 - log_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_212": {
                "x": {
                    "value": "log_sigma_sq / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_298": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_218": {
                "x": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_218": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(lat, [0, 0, 0], [-1, -1, 1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Holo_cWGAN.py": {
        "tensorflow": {}
    },
    "Holo_cWGAN_recLoss.py": {
        "tensorflow": {}
    },
    "Holo_naive.py": {
        "tensorflow": {
            "placeholder_184": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_185": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_192": {
                "variable": {
                    "value": "back_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "X - X_HAT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_194": {
                "variable": {
                    "value": "naive_solve",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_196": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y, [N_BATCH, 100, 100, 1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, name='Y')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 100, 100, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(Y, 1, 4, 7, 3, update_collection=update_collection), name='bn1', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c1, 2, 8, 5, 3, update_collection=update_collection), name='bn2', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c2, 3, 8, 3, 1, update_collection=update_collection), name='bn3', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_99": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c4, 5, 4, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn5', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c5)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5, [N_BATCH, 8 * 8 * 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8 * 8 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "do1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(c5, 4, 512, update_collection=update_collection), name='bn6', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(denseLayer(do1, 5, 512, update_collection=update_collection), name='bn7', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(d2, [N_BATCH, 8, 8, 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(convLayer(c, 4, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn4', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ],
                        [
                            "batch_norm(convLayer(d2, 7, 8, 3, 1, update_collection=update_collection, padStr='SAME'), name='bn8', is_training=train)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(c4, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(c4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N_BATCH, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_165": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'denseLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'convLayer_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "libs/ops.py": {
        "tensorflow": {
            "get_variable_24": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_74": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'layer_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_normed_weight(w, update_collection=update_collection)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'layer_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_58": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_normed_weight(w, update_collection=update_collection)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_62": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'layer_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "spectral_normed_weight(weight, update_collection=update_collection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_8": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, spectral_normed_weight(w, update_collection=update_collection), strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_shape[-1]], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_66": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, spectral_normed_weight(w, update_collection=update_collection), output_shape=output_shape, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_shape[-1]], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_87": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_56": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ],
                        [
                            "np.sqrt(1.0 / shape[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_90": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "libs/sn.py": {
        "tensorflow": {
            "reshape_15": {
                "variable": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_22": {
                "variable": {
                    "value": "(_, u_final, v_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2: i < num_iters",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "power_iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), u, tf.zeros(dtype=tf.float32, shape=[1, W_reshaped.shape.as_list()[0]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "a": {
                    "value": "u_i",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "a": {
                    "value": "v_ip1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u_i, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_31": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_34": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_44": {
                "name": {
                    "value": "update_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_19": {
                "a": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_25": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_reshaped.shape.as_list()[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}