{
    "DeepLab-V2-PyTorch/libs/utils/stream_metrics.py": {
        "sklearn": {}
    },
    "DeepLabV3Plus-Pytorch/metrics/stream_metrics.py": {
        "sklearn": {}
    },
    "utils/Metrics.py": {
        "sklearn": {
            "confusion_matrix_69": {
                "variable": {
                    "value": "current_confusion_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "all_15": {
                "variable": {
                    "value": "all_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit == label.byte()",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "all_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/convert.py": {
        "torch": {}
    },
    "DeepLab-V2-PyTorch/demo.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "current_device_30": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_144": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_212": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_88": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_name_31": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/hubconf.py": {
        "torch": {}
    },
    "DeepLab-V2-PyTorch/libs/datasets/base.py": {
        "torch": {}
    },
    "DeepLab-V2-PyTorch/libs/datasets/cocostuff.py": {
        "torch": {
            "DataLoader_125": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoStuff164k(root='/media/kazuto1011/Extra/cocostuff/cocostuff-164k', split='train2017', ignore_label=255, mean_bgr=(104.008, 116.669, 122.675), augment=True, crop_size=321, scales=(0.5, 0.75, 1.0, 1.25, 1.5), flip=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_131": {
                "data": {
                    "value": "(104.008, 116.669, 122.675)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/datasets/voc.py": {
        "torch": {
            "DataLoader_136": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCAug(root='/media/kazuto1011/Extra/VOCdevkit', split='train_aug', ignore_label=255, mean_bgr=(104.008, 116.669, 122.675), year=2012, augment=True, base_size=None, crop_size=513, scales=(0.5, 0.75, 1.0, 1.25, 1.5), flip=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_142": {
                "data": {
                    "value": "(104.008, 116.669, 122.675)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/deeplabv1.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/deeplabv2.py": {
        "torch": {
            "randn_65": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/deeplabv3.py": {
        "torch": {
            "randn_92": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_22": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Module_40": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[stage(x) for stage in self.stages.children()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/deeplabv3plus.py": {
        "torch": {
            "randn_84": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', _ConvBnReLU(304, 256, 3, 1, 1, 1)), ('conv2', _ConvBnReLU(256, 256, 3, 1, 1, 1)), ('conv3', nn.Conv2d(256, n_classes, kernel_size=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "self.layer4(h)",
                            "Call"
                        ],
                        [
                            "self.layer5(h)",
                            "Call"
                        ],
                        [
                            "self.aspp(h)",
                            "Call"
                        ],
                        [
                            "self.fc1(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=h_.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, h_), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc2(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=x.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "h_.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, h_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "self.layer4(h)",
                            "Call"
                        ],
                        [
                            "self.layer5(h)",
                            "Call"
                        ],
                        [
                            "self.aspp(h)",
                            "Call"
                        ],
                        [
                            "self.fc1(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=h_.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, h_), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc2(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=x.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/msc.py": {
        "torch": {
            "interpolate_37": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scales",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_30": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "torch.stack(logits_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "logits_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[logits] + [interp(l) for l in logits_pyramid]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/models/resnet.py": {
        "torch": {
            "randn_135": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_71": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(h)",
                            "Call"
                        ],
                        [
                            "self.increase(h)",
                            "Call"
                        ],
                        [
                            "h + self.shortcut(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_110": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_127": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "ch[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/utils/decode.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/libs/utils/lr_scheduler.py": {
        "torch": {}
    },
    "DeepLab-V2-PyTorch/main.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.TRAIN, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=True, base_size=CONFIG.IMAGE.SIZE.BASE, crop_size=CONFIG.IMAGE.SIZE.TRAIN, scales=CONFIG.DATASET.SCALES, flip=True, gt_path=gt_path)",
                            "Call"
                        ],
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.VAL, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=False, gt_path='SegmentationClassAug')",
                            "Call"
                        ],
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.VAL, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=False, gt_path='SegmentationClassAug')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.SOLVER.BATCH_SIZE.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_159": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CONFIG.MODEL.INIT_MODEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_169": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "CONFIG.DATASET.IGNORE_LABEL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': get_params(model.module, key='1x'), 'lr': CONFIG.SOLVER.LR, 'weight_decay': CONFIG.SOLVER.WEIGHT_DECAY}, {'params': get_params(model.module, key='10x'), 'lr': 10 * CONFIG.SOLVER.LR, 'weight_decay': CONFIG.SOLVER.WEIGHT_DECAY}, {'params': get_params(model.module, key='20x'), 'lr': 20 * CONFIG.SOLVER.LR, 'weight_decay': 0.0}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "CONFIG.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_204": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(CONFIG.EXP.OUTPUT_DIR, 'logs', log_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.TRAIN, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=True, base_size=CONFIG.IMAGE.SIZE.BASE, crop_size=CONFIG.IMAGE.SIZE.TRAIN, scales=CONFIG.DATASET.SCALES, flip=True, gt_path=gt_path)",
                            "Call"
                        ],
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.VAL, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=False, gt_path='SegmentationClassAug')",
                            "Call"
                        ],
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.VAL, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=False, gt_path='SegmentationClassAug')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.SOLVER.BATCH_SIZE.TEST",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_356": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_358": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_299": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'checkpoint_final.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_333": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_403": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images.to(device))",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_406": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images.to(device))",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_407": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_447": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_508": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "zip(image_ids, logits)",
                            "Call"
                        ],
                        [
                            "np.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(logit)[None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(logit, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'checkpoint_{}.pth'.format(iteration))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_name_46": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "i in enumerate(optimizer.param_groups)",
                            "Call"
                        ],
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_509": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "zip(image_ids, logits)",
                            "Call"
                        ],
                        [
                            "np.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(logit)[None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(logit, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "memory_cached_278": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "i in enumerate(optimizer.param_groups)",
                            "Call"
                        ],
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DeepLab-V2-PyTorch/train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.TRAIN, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=True, base_size=CONFIG.IMAGE.SIZE.BASE, crop_size=CONFIG.IMAGE.SIZE.TRAIN, scales=CONFIG.DATASET.SCALES, flip=True, gt_path=opts.gt_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.SOLVER.BATCH_SIZE.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(CONFIG.DATASET.NAME)(root=CONFIG.DATASET.ROOT, split=CONFIG.DATASET.SPLIT.VAL, ignore_label=CONFIG.DATASET.IGNORE_LABEL, mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R), augment=False, gt_path='SegmentationClassAug')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.SOLVER.BATCH_SIZE.TEST",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CONFIG.MODEL.INIT_MODEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_179": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "CONFIG.DATASET.IGNORE_LABEL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': get_params(model.module, key='1x'), 'lr': CONFIG.SOLVER.LR, 'weight_decay': CONFIG.SOLVER.WEIGHT_DECAY}, {'params': get_params(model.module, key='10x'), 'lr': 10 * CONFIG.SOLVER.LR, 'weight_decay': CONFIG.SOLVER.WEIGHT_DECAY}, {'params': get_params(model.module, key='20x'), 'lr': 20 * CONFIG.SOLVER.LR, 'weight_decay': 0.0}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "CONFIG.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_230": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "opts.amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "opts.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_55": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_252": {
                "enabled": {
                    "value": "opts.amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_307": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images.to(device, non_blocking=True))",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_309": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images.to(device, non_blocking=True))",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_319": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'checkpoint_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/datasets/cityscapes.py": {
        "torch": {}
    },
    "DeepLabV3Plus-Pytorch/datasets/voc.py": {
        "torch": {}
    },
    "DeepLabV3Plus-Pytorch/eval.py": {
        "torch": {
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(root=opts.data_root, year=opts.year, image_set='val', download=False, transform=val_transform, ret_fname=True)",
                            "Call"
                        ],
                        [
                            "get_dataset(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(logit)[None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(logit, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_181": {
                "seed": {
                    "value": "opts.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_221": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_map[opts.model](num_classes=opts.num_classes, output_stride=opts.output_stride)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_219": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(logit)[None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(logit, size=(H, W), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/main.py": {
        "torch": {
            "device_227": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cityscapes(root=opts.data_root, split='train', transform=train_transform)",
                            "Call"
                        ],
                        [
                            "VOCSegmentation(root=opts.data_root, year=opts.year, image_set='train', download=opts.download, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "get_dataset(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cityscapes(root=opts.data_root, split='val', transform=val_transform)",
                            "Call"
                        ],
                        [
                            "VOCSegmentation(root=opts.data_root, year=opts.year, image_set='val', download=False, transform=val_transform)",
                            "Call"
                        ],
                        [
                            "get_dataset(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_266": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.backbone.parameters(), 'lr': 0.1 * opts.lr}, {'params': model.classifier.parameters(), 'lr': opts.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_332": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "opts.amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "opts.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_305": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_map[opts.model](num_classes=opts.num_classes, output_stride=opts.output_stride)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_317": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_map[opts.model](num_classes=opts.num_classes, output_stride=opts.output_stride)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_275": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params=[{'params': model.backbone.parameters(), 'lr': 0.1 * opts.lr}, {'params': model.classifier.parameters(), 'lr': opts.lr}], lr=opts.lr, momentum=0.9, weight_decay=opts.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opts.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_282": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "{'cur_itrs': cur_itrs, 'model_state': model.module.state_dict(), 'optimizer_state': optimizer.state_dict(), 'scheduler_state': scheduler.state_dict(), 'best_score': best_score}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_303": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "autocast_354": {
                "enabled": {
                    "value": "opts.amp",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/network/_deeplab.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(low_level_channels, 48, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(304, 256, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "output_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aspp(feature['out'])",
                            "Call"
                        ],
                        [
                            "F.interpolate(output_feature, size=low_level_feature.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_feature.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ASPP(in_channels, aspp_dilate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=bias, groups=in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=False), nn.BatchNorm2d(out_channels), nn.ReLU(inplace=True)]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * out_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "low_level_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low_level_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "304",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[low_level_feature, output_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_123": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "5 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/network/backbone/mobilenetv2.py": {
        "torch": {
            "Sequential_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.mean([2, 3])",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.input_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "dilation * s",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/network/backbone/resnet.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_143": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_151": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_207": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/network/utils.py": {
        "torch": {
            "interpolate_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/utils/ext_transforms.py": {
        "torch": {
            "from_numpy_292": {
                "ndarray": {
                    "value": "np.array(lbl, dtype=self.target_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_294": {
                "ndarray": {
                    "value": "np.array(lbl, dtype=self.target_type)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/utils/loss.py": {
        "torch": {
            "cross_entropy_14": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_16": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-ce_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "DeepLabV3Plus-Pytorch/utils/scheduler.py": {
        "torch": {}
    },
    "DeepLabV3Plus-Pytorch/utils/utils.py": {
        "torch": {}
    },
    "models/vgg.py": {
        "torch": {
            "randn_323": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "321",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "321",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_22": {
                "variable": {
                    "value": "self.global_max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_23": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv4(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(x.size(2), x.size(3)), padding=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 20)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_60": {
                "variable": {
                    "value": "self.global_max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv4(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(x.size(2), x.size(3)), padding=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 20)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.extra_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.extra_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.extra_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.extra_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, x_max * control)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv4(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(x.size(2), x.size(3)), padding=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 20)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cam_normalize(x.detach(), size, label)",
                            "Call"
                        ],
                        [
                            "F.relu(cam)",
                            "Call"
                        ],
                        [
                            "F.interpolate(cam, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "cam / (F.adaptive_max_pool2d(cam, 1) + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "cam * label[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cam",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_229": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cam_normalize(x.detach(), size, label)",
                            "Call"
                        ],
                        [
                            "F.relu(cam)",
                            "Call"
                        ],
                        [
                            "F.interpolate(cam, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "cam / (F.adaptive_max_pool2d(cam, 1) + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "cam * label[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cam",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_230": {
                "*args": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_282": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_284": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_291": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_291": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_293": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg_refine.py": {
        "torch": {
            "randn_192": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "321",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "321",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.extra_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.extra_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.extra_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.extra_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer1_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer2_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer3_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4_maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.layer5_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.extra_conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "x * label[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_154": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_156": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_163": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/localization_map_gen.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/pseudo_seg_label_gen.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_cls.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img[0].cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_refine.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_63": {
                "variable": {
                    "value": "_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img[0].cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_cls.py": {
        "torch": {
            "DataParallel_53": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args)",
                            "Call"
                        ],
                        [
                            "vgg16(pretrained=True, delta=args.delta)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': param_groups[0], 'lr': args.lr}, {'params': param_groups[1], 'lr': 2 * args.lr}, {'params': param_groups[2], 'lr': 10 * args.lr}, {'params': param_groups[3], 'lr': 20 * args.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_189": {
                "variable": {
                    "value": "nGPU",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_203": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multilabel_soft_margin_loss_155": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(img, label)",
                            "Call"
                        ],
                        [
                            "model(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.to('cuda', non_blocking=True)",
                            "Call"
                        ],
                        [
                            "label.to('cuda', non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multilabel_soft_margin_loss_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(img, label)",
                            "Call"
                        ],
                        [
                            "model(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.to('cuda', non_blocking=True)",
                            "Call"
                        ],
                        [
                            "label.to('cuda', non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_231": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': current_epoch, 'iter': args.global_counter, 'miou': score}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_folder, 'best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/train_refine.py": {
        "torch": {
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args)",
                            "Call"
                        ],
                        [
                            "vgg16(pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_71": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_133": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_177": {
                "variable": {
                    "value": "nGPU",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_191": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': current_epoch, 'iter': args.global_counter, 'miou': score}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_folder, 'best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/LoadData.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.train_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_train, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='valid')",
                            "Call"
                        ],
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='valid')",
                            "Call"
                        ],
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/LoadData_refine.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.train_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_train, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='valid')",
                            "Call"
                        ],
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "img_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='valid')",
                            "Call"
                        ],
                        [
                            "VOCDataset(args.test_list, crop_size, root_dir=args.img_dir, num_classes=args.num_classes, transform=tsfm_test, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/decode.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/my_optim.py": {
        "torch": {}
    },
    "utils/transforms/functional.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_103": {
                "obj": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic.mul(255).byte()",
                            "Call"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int32, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int16, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))",
                            "Call"
                        ],
                        [
                            "img.view(pic.size[1], pic.size[0], nchannel)",
                            "Call"
                        ],
                        [
                            "img.transpose(0, 1).transpose(0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "crop(img, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(img, size, interpolation)",
                            "Call"
                        ],
                        [
                            "vflip(img)",
                            "Call"
                        ],
                        [
                            "hflip(img)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('RGB')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB').convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB')",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "nppic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms/transforms.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(pic).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pic)",
                            "Call"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_536": {
                "variable": {
                    "value": "transformed_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.transformation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms/transforms_refine.py": {
        "torch": {
            "from_numpy_66": {
                "variable": {
                    "value": "sal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sal_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "np.int32(sal_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sal_map)",
                            "Call"
                        ],
                        [
                            "(sal_map > 50).float()",
                            "Call"
                        ],
                        [
                            "F.resize(sal_map, (self.size, self.size), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "F.crop(sal_map, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "torch.flip(sal_map, [1])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "gt_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "np.int32(gt_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_map)",
                            "Call"
                        ],
                        [
                            "F.resize(gt_map, (self.size, self.size), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "F.crop(gt_map, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "torch.flip(gt_map, [1])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "att_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "att_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(att_map)",
                            "Call"
                        ],
                        [
                            "att_map.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "att_map[:, i:i + h, j:j + w]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(att_map, [2])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(pic).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pic)",
                            "Call"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_568": {
                "variable": {
                    "value": "transformed_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.transformation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_354": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "F.to_tensor(img)",
                            "Call"
                        ],
                        [
                            "F.normalize(img, self.mean, self.std)",
                            "Call"
                        ],
                        [
                            "F.resize(img, (self.size, self.size), self.interpolation)",
                            "Call"
                        ],
                        [
                            "self.lambd(img)",
                            "Call"
                        ],
                        [
                            "F.pad(img, self.padding)",
                            "Call"
                        ],
                        [
                            "F.crop(img, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, [2])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_355": {
                "variable": {
                    "value": "sal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sal_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "np.int32(sal_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sal_map)",
                            "Call"
                        ],
                        [
                            "(sal_map > 50).float()",
                            "Call"
                        ],
                        [
                            "F.resize(sal_map, (self.size, self.size), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "F.crop(sal_map, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "torch.flip(sal_map, [1])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ],
                        [
                            "sal_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_356": {
                "variable": {
                    "value": "gt_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "np.int32(gt_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_map)",
                            "Call"
                        ],
                        [
                            "F.resize(gt_map, (self.size, self.size), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "F.crop(gt_map, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "torch.flip(gt_map, [1])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ],
                        [
                            "gt_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_357": {
                "variable": {
                    "value": "att_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(att_map)",
                            "Call"
                        ],
                        [
                            "att_map.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "att_map[:, i:i + h, j:j + w]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(att_map, [2])",
                            "Call"
                        ],
                        [
                            "transform(img, sal_map, gt_map, att_map)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ],
                        [
                            "att_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {}
    }
}