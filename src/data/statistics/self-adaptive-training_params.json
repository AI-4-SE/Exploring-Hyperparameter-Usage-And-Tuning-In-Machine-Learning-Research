{
    "datasets/datasets.py": {
        "torch": {}
    },
    "datasets/loaders.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root=args.data_root, train=False, download=True, transform=tform_test)",
                            "Call"
                        ],
                        [
                            "CIFAR100(root=args.data_root, train=False, download=True, transform=tform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_train_set",
                            "variable"
                        ],
                        [
                            "noisy_train_set",
                            "variable"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_51": {
                "variable": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_train_set",
                            "variable"
                        ],
                        [
                            "noisy_train_set",
                            "variable"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_set, train_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_73": {
                "dataset": {
                    "value": "clean_train_set_for_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(clean_train_set)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_75": {
                "dataset": {
                    "value": "noisy_train_set_for_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(noisy_train_set)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_77": {
                "dataset": {
                    "value": "clean_train_set_for_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(clean_train_set)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_train, len(train_set)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_79": {
                "dataset": {
                    "value": "noisy_train_set_for_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(noisy_train_set)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_train, len(train_set)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses/loss.py": {
        "torch": {
            "CrossEntropyLoss_8": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "self.soft_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-F.log_softmax(logits, dim=1) * self.soft_labels[index]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "self.soft_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_25": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_19": {
                "start": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "self.soft_labels[index] * torch.log(prob)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "prob * torch.log(self.soft_labels[index])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_36": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "self.soft_labels[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "losses/trades.py": {
        "torch": {
            "KLDivLoss_16": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_40": {
                "variable": {
                    "value": "loss_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "self.soft_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_61": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_29": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x_natural - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_74": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x_natural - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_85": {
                "variable": {
                    "value": "loss_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "loss_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-F.log_softmax(logits, dim=1) * self.soft_labels[index]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_80": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "x_natural.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_27": {
                "outputs": {
                    "value": "loss_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ],
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_29": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_41": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "x_natural.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_72": {
                "outputs": {
                    "value": "loss_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ],
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_74": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + self.step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - self.epsilon), x_natural + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_94": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "model(x_natural)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_28": {
                "input": {
                    "value": "grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "input": {
                    "value": "model(x_natural)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_73": {
                "input": {
                    "value": "grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_91": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_116": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args, num_classes, base_width=args.base_width)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'checkpoint_best.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_264": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output.float()",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output.float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_adv.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/datasets/CIFAR10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/datasets/CIFAR10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args, num_classes)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_247": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.float()",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output.float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "base_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "base_width * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pgd_attack.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='~/datasets/CIFAR10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args, 10)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_49": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_pgd]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_pgd.data - X.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "enable_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_59": {
                "input": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint_{}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/optim.py": {
        "torch": {
            "SGD_8": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_21": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "args.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_12": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_25": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "save_11": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint_latest.tar' if filename is None else filename",
                            "IfExp"
                        ],
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'checkpoint_best.tar')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_14": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint_latest.tar' if filename is None else filename",
                            "IfExp"
                        ],
                        [
                            "os.path.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'checkpoint_best.tar')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}