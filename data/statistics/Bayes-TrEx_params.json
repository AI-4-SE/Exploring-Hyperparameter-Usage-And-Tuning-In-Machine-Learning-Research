{
    "MNIST/training_code/gan/dataset.py": {
        "sklearn": {},
        "torch": {
            "TensorDataset_27": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(train_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_28": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(test_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(train_X), torch.tensor(train_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(test_X), torch.tensor(test_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([t[1] for t in train]).astype('int64')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([t[1] for t in test]).astype('int64')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/training_code/gan/gan.py": {
        "sklearn": {},
        "torch": {}
    },
    "CLEVR/clevr-iep/iep/data.py": {
        "torch": {}
    },
    "CLEVR/clevr-iep/iep/models/baselines.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.Wu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.Wp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_41": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_proj + u_proj_expand",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wp(h).view(N, H * W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(token_to_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_feats, img_feats.view(N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.image_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "res_block_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_117": {
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_121": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_123": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "CLEVR/clevr-iep/iep/models/layers.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res + out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(res + out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_36": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CLEVR/clevr-iep/iep/models/module_net.py": {
        "torch": {
            "Conv2d_23": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_219": {
                "variable": {
                    "value": "self.used_fns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "module_dim",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "prev_dim // 16",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_answers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vocab['answer_idx_to_token'])",
                            "Call"
                        ],
                        [
                            "num_answers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "module_dim",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "prev_dim // 16",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "module_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "module_dim",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "prev_dim // 16",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "num_features": {
                    "value": "next_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_70": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "CLEVR/clevr-iep/iep/models/seq2seq.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.decoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim + hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.decoder_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_repeat, y_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_133": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_logprobs[out_mask].view(-1, V_out)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[y_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "backward_213": {
                "tensors": {
                    "value": "self.multinomial_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "retain_variables": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.get_dims(x=x)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ],
                        [
                            "self.get_dims(y=y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CLEVR/clevr-iep/iep/utils.py": {
        "torch": {
            "load_39": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "CLEVR/clevr-iep/scripts/analyze_level_sets.py": {
        "torch": {
            "ones_523": {
                "*size": {
                    "value": "NUM_AVAILABLE_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "NUM_AVAILABLE_OBJECTS + 1",
                            "BinOp"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_537": {
                "*size": {
                    "value": "NUM_AVAILABLE_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "NUM_AVAILABLE_OBJECTS + 1",
                            "BinOp"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_511": {
                "*size": {
                    "value": "NUM_AVAILABLE_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "NUM_AVAILABLE_OBJECTS + 1",
                            "BinOp"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_512": {
                "*size": {
                    "value": "NUM_AVAILABLE_MATERIALS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "len(AVAILABLE_MATERIALS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_513": {
                "*size": {
                    "value": "NUM_AVAILABLE_COLOURS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "len(AVAILABLE_COLOURS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_514": {
                "*size": {
                    "value": "NUM_AVAILABLE_SIZES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "len(AVAILABLE_SIZES)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_527": {
                "*size": {
                    "value": "NUM_AVAILABLE_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "NUM_AVAILABLE_OBJECTS + 1",
                            "BinOp"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ],
                        [
                            "len(AVAILABLE_OBJECTS)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CLEVR/clevr-iep/scripts/extract_features.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CLEVR/clevr-iep/scripts/run_model.py": {
        "torch": {
            "max_301": {
                "variable": {
                    "value": "(saliency, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "img_var.grad.data.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "total_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_var[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "all_programs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_programs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_programs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_312": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_457": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, program_lists)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, programs_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_502": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, program_lists)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, programs_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_309": {
                "input": {
                    "value": "img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess(img)",
                            "Call"
                        ],
                        [
                            "img_var.type(dtype)",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(img).type(dtype))",
                            "Call"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_309": {
                "input": {
                    "value": "img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess(img)",
                            "Call"
                        ],
                        [
                            "img_var.type(dtype)",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(img).type(dtype))",
                            "Call"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ],
                        [
                            "img_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_227": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, program_lists)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, programs_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_385": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "run_model(model, cnn, question_var, img_var, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "execution_engine(feats_var, predicted_program)",
                            "Call"
                        ],
                        [
                            "model(question_var, feats_var)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, program_lists)",
                            "Call"
                        ],
                        [
                            "execution_engine(feats_var, programs_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CLEVR/clevr-iep/scripts/test_set_evaluations.py": {
        "torch": {}
    },
    "CLEVR/clevr-iep/scripts/train_model.py": {
        "torch": {
            "CrossEntropyLoss_191": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_172": {
                "variable": {
                    "value": "pg_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "program_generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "ee_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "execution_engine.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "baseline_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "baseline_model.parameters()",
                            "Call"
                        ],
                        [
                            "baseline_model.rnn.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_300": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': args.__dict__, 'program_generator_kwargs': pg_kwargs, 'program_generator_state': best_pg_state, 'execution_engine_kwargs': ee_kwargs, 'execution_engine_state': best_ee_state, 'baseline_kwargs': baseline_kwargs, 'baseline_state': best_baseline_state, 'baseline_type': baseline_type, 'vocab': vocab}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/fid_subsets/write_subset.py": {
        "torch": {
            "zeros_10": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_11": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultivariateNormal_12": {
                "variable": {
                    "value": "latent_space",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(latent_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(latent_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_32": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "data": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_latent(latent_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/latents_to_images.py": {
        "torch": {
            "set_default_tensor_type_27": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row in enumerate(in_txt_reader)",
                            "Call"
                        ],
                        [
                            "[float(val) for val in row]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/mnist_adda.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_27": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_22": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/mnist_adversarial.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_27": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_22": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/mnist_extrapolation.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_27": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_22": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/mnist_graded.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_27": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_22": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "p_tgt[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/mnist_inspect.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "std_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std_diff).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "std_margin",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std_margin).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_29": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_36": {
                "variable": {
                    "value": "p_other",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prob[i] for i in range(N) if i != a and i != b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "abs_37": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_a - p_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "p_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_a, p_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_59": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_82": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "nn_model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_23": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_54": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_77": {
                "t": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.FloatTensor",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_39": {
                "input": {
                    "value": "p_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((p_a, p_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_39": {
                "input": {
                    "value": "p_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([prob[i] for i in range(N) if i != a and i != b])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_85": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ],
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ],
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_85": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ],
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ],
                        [
                            "nn_model.predict_from_latent(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/nets.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_51": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_52": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(latent_dim, 64 * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "input": {
                    "value": "x / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "input": {
                    "value": "x / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "input": {
                    "value": "self.fc4(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "64 * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_94": {
                "in_channels": {
                    "value": "64 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "64 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "in_channels": {
                    "value": "64 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_102": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/nn_models.py": {
        "torch": {
            "max_87": {
                "variable": {
                    "value": "(saliency, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "img.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "total_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_108": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "vae_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_vae.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_42": {
                "f": {
                    "value": "classifier_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/baseline.lenet'",
                            "str"
                        ],
                        [
                            "'saved_models/adda.lenet'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_195": {
                "f": {
                    "value": "gan_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_gan.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/mnist_gan.pth'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_204": {
                "f": {
                    "value": "classifier_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/baseline.lenet'",
                            "str"
                        ],
                        [
                            "'saved_models/adda.lenet'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_233": {
                "f": {
                    "value": "gan_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_gan.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/mnist_gan.pth'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_242": {
                "f": {
                    "value": "classifier_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/%s_classifier.pth' % dset",
                            "BinOp"
                        ],
                        [
                            "'saved_models/baseline.lenet'",
                            "str"
                        ],
                        [
                            "'saved_models/adda.lenet'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_104": {
                "input": {
                    "value": "x_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_104": {
                "input": {
                    "value": "x_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_value",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/training_code/classifier/cnn_classifier.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "SelectLabelDataset(dset_class, labels, './data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=False, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "SelectLabelDataset(dset_class, labels, './data', train=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "SelectLabelDataset(dset_class, labels, './data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=False, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "SelectLabelDataset(dset_class, labels, './data', train=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_19": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_20": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cnn_%i.pt' % (folder, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cnn_%i.pt' % (folder, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_78": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/training_code/classifier/cnn_classifier_vague.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset_class('./data', train=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_20": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_21": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_36": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(target_prob).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cnn_%i.pt' % (folder, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(target), 10))",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_63": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/training_code/gan/models.py": {
        "torch": {
            "LeakyReLU_9": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_10": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/training_code/vae/fashion_mnist/main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_69": {
                "variable": {
                    "value": "BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "x.view(-1, 784)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FashionMNISTExclDataset(digit, './data', train=True, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FashionMNISTExclDataset(digit, './data', train=False, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_50": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "self.fc4(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_150": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/epoch_%i.pt' % (folder, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], recon_batch.view(args.batch_size, 1, 28, 28)[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/training_code/vae/mnist/main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_69": {
                "variable": {
                    "value": "BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "x.view(-1, 784)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNISTExclDataset(digit, './data', train=True, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNISTExclDataset(digit, './data', train=False, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_50": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "self.fc4(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_148": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/epoch_%i.pt' % (folder, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], recon_batch.view(args.batch_size, 1, 28, 28)[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}