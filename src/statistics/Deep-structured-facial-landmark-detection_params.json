{
    "CNNmodels/FAN_crf.py": {
        "tensorflow": {
            "batch_normalization_49": {
                "variable": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_bn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim1 - 1, dim1, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "activations.relu(self.bn1(self.conv1(x), training=is_train, name='FAN_begin_bn1', trainable=True))",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(pool_size=(2, 2), strides=2, name='AvgPool2D_layer1')(ConvBlock(x, 64, 128, var_scope='ConvBlock_layer1', is_train=is_train))",
                            "Call"
                        ],
                        [
                            "ConvBlock(x, 128, 128, var_scope='ConvBlock_layer2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "ConvBlock(x, 128, 256, var_scope='ConvBlock_layer3', is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn', trainable=True, inputs=x, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(residual)",
                            "Call"
                        ],
                        [
                            "layers.Conv2D(filters=out_planes, kernel_size=1, strides=1, use_bias=False, name=var_scope + '_conv1')(residual)",
                            "Call"
                        ],
                        [
                            "downsample(x, out_planes=out_planes, var_scope=var_scope + '_downsample')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "batch_normalization_63": {
                "variable": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_bn1'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim1 - 1, dim1, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "activations.relu(self.bn1(self.conv1(x), training=is_train, name='FAN_begin_bn1', trainable=True))",
                            "Call"
                        ],
                        [
                            "layers.AveragePooling2D(pool_size=(2, 2), strides=2, name='AvgPool2D_layer1')(ConvBlock(x, 64, 128, var_scope='ConvBlock_layer1', is_train=is_train))",
                            "Call"
                        ],
                        [
                            "ConvBlock(x, 128, 128, var_scope='ConvBlock_layer2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "ConvBlock(x, 128, 256, var_scope='ConvBlock_layer3', is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn1', trainable=True, inputs=x, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(out1)",
                            "Call"
                        ],
                        [
                            "conv3x3(out_planes=int(out_planes / 2), var_scope=var_scope + '_out1')(out1)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_67": {
                "variable": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_bn2'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn1', trainable=True, inputs=x, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(out1)",
                            "Call"
                        ],
                        [
                            "conv3x3(out_planes=int(out_planes / 2), var_scope=var_scope + '_out1')(out1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn2', trainable=True, inputs=out1, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(out2)",
                            "Call"
                        ],
                        [
                            "conv3x3(out_planes=int(out_planes / 4), var_scope=var_scope + '_out2')(out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_71": {
                "variable": {
                    "value": "out3",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_bn3'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn2', trainable=True, inputs=out1, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(out2)",
                            "Call"
                        ],
                        [
                            "conv3x3(out_planes=int(out_planes / 4), var_scope=var_scope + '_out2')(out2)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out3",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(name=var_scope + '_bn3', trainable=True, inputs=out2, training=is_train)",
                            "Call"
                        ],
                        [
                            "activations.relu(out3)",
                            "Call"
                        ],
                        [
                            "conv3x3(out_planes=int(out_planes / 4), var_scope=var_scope + '_out3')(out3)",
                            "Call"
                        ],
                        [
                            "layers.concatenate([out1, out2, out3], axis=-1, name=var_scope + '_concatenate')",
                            "Call"
                        ],
                        [
                            "out3 + residual",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concatenate_75": {
                "variable": {
                    "value": "out3",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[out1, out2, out3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_concatenate'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_lmks, FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_85": {
                "variable": {
                    "value": "mask_a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([FLAGS.num_lmks, FLAGS.num_lmks])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_86": {
                "variable": {
                    "value": "mask_b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([FLAGS.num_lmks, FLAGS.num_lmks])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_a - mask_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_89": {
                "variable": {
                    "value": "in_tensor_IJ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_a - mask_b, dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "strd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "var_scope + '_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "self.bn1(self.conv1(x), training=is_train, name='FAN_begin_bn1', trainable=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_306": {
                "variable": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.ones([tf.shape(self.C_IJ_)[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_308": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "pts2d",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_313": {
                "variable": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_upper_tri_IJ(yij)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_320": {
                "variable": {
                    "value": "y_IJ_3d_post",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_upper_tri_IJ(y_IJ_3d)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_326": {
                "variable": {
                    "value": "zeros_F",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y_IJ_3d_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(y_IJ_3d), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(y_IJ_3d), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_327": {
                "variable": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_330": {
                "variable": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_333": {
                "variable": {
                    "value": "CF",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensordot(C_IJ_, F, axes=[[1], [1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "Cy",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensordot(C_IJ_, tf.reshape(tf.transpose(y_IJ_post, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]]), axes=[[1], [1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "CF",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(C_IJ_, F, axes=[[1], [1]]), perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "variable": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(Cy, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_343": {
                "variable": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                },
                "matrix": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(F, CF, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(F, tf.expand_dims(Cy, axis=-1), transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_346": {
                "variable": {
                    "value": "m1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, 0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_347": {
                "variable": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, 3:6, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_350": {
                "variable": {
                    "value": "lambda1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.norm(m1, ord='euclidean', axis=1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_352": {
                "variable": {
                    "value": "lambda2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.norm(m2, ord='euclidean', axis=1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_359": {
                "variable": {
                    "value": "m3",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "m1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(M[:, 0:3, :], axis=-1)",
                            "Call"
                        ],
                        [
                            "m1 / lambda1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(M[:, 3:6, :], axis=-1)",
                            "Call"
                        ],
                        [
                            "m2 / lambda2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_361": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[m1, m2, m3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_364": {
                "variable": {
                    "value": "(s, U, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([m1, m2, m3], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(U, V, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_366": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_367": {
                "variable": {
                    "value": "M_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[lambda1 * R[:, 0, :], lambda2 * R[:, 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_383": {
                "variable": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.ones([tf.shape(self.C_IJ_)[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_385": {
                "variable": {
                    "value": "T",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.solve(mat, rhs)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, y3d_N)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y_IJ_3d_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(y_IJ_3d), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(y_IJ_3d), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_389": {
                "variable": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.transpose(phi, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.cast(phi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_392": {
                "variable": {
                    "value": "phi_IJ",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_upper_tri_IJ(phi_ij)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_394": {
                "variable": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensordot(M, phi_IJ, axes=[[2], [0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_395": {
                "variable": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(M, phi_IJ, axes=[[2], [0]]), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [-1, 2 * tf.shape(y_IJ_post)[-1], int(DM['numcomp'])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2 * tf.shape(y_IJ_post)[-1], int(DM['numcomp'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_396": {
                "variable": {
                    "value": "CG",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensordot(C_IJ_, G, axes=[[1], [1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_397": {
                "variable": {
                    "value": "Cy_T",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensordot(C_IJ_, tf.reshape(tf.transpose(y_IJ_post - T, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]]), axes=[[1], [1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_404": {
                "variable": {
                    "value": "mat_q",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(M, phi_IJ, axes=[[2], [0]]), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [-1, 2 * tf.shape(y_IJ_post)[-1], int(DM['numcomp'])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "CG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(C_IJ_, G, axes=[[1], [1]]), perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_405": {
                "variable": {
                    "value": "rhs_q",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(M, phi_IJ, axes=[[2], [0]]), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [-1, 2 * tf.shape(y_IJ_post)[-1], int(DM['numcomp'])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(Cy_T, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_407": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "matrix": {
                    "value": "mat_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(G, CG, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "rhs_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(G, tf.expand_dims(Cy_T, axis=-1), transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_507": {
                "variable": {
                    "value": "inv_cov_unary",
                    "type": "Name",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.transpose(inv_cov, perm=[0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_512": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.transpose(inv_cov_unary, perm=[0, 3, 1, 4, 2]), [N, 2 * C, 2 * C])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(mu, [N, 2 * C, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_515": {
                "variable": {
                    "value": "muc",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tile(tf.expand_dims(tf.transpose(cij, [2, 3, 0, 1]), 0), [N, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(tf.transpose(muij, [0, 2, 3, 1]), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_518": {
                "variable": {
                    "value": "muc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(tf.reduce_sum(muc, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, 2 * C, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "variable": {
                    "value": "precision_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(precision, perm=[0, 3, 1, 4, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "size_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[N, 2 * C, 2 * C]",
                            "List"
                        ]
                    ]
                }
            },
            "cholesky_525": {
                "variable": {
                    "value": "chol",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "precision_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(precision, perm=[0, 3, 1, 4, 2]), size_cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_526": {
                "variable": {
                    "value": "mean_",
                    "type": "Name",
                    "possible_values": []
                },
                "chol": {
                    "value": "chol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(precision_)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "b_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b + muc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_536": {
                "variable": {
                    "value": "outlabels_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outlabels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels / down_scale",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "size_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.shape(labels)[0], 2 * tf.shape(labels)[1], 1]",
                            "List"
                        ]
                    ]
                }
            },
            "subtract_537": {
                "variable": {
                    "value": "y_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "outlabels_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(outlabels, size_mean)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky_solve(chol, b_)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_538": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(tf.matmul(y_diff, precision_, transpose_a=True), y_diff) - 2 * tf.reduce_sum(tf.math.log(tf.linalg.diag_part(chol)), -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "filters": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_167": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "FAN_begin_conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_199": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "inv_dense1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_201": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "inv_dense2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "variable": {
                    "value": "self.dense3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "inv_dense3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_205": {
                "variable": {
                    "value": "self.conv1_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "inv_conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_207": {
                "variable": {
                    "value": "self.conv2_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.FLAGS.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "inv_conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_212": {
                "variable": {
                    "value": "self.lij_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.01 * tf.stack([tf.ones([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]), tf.zeros([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]), tf.ones([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2])], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "cij/l_fac",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_219": {
                "variable": {
                    "value": "C_IJ",
                    "type": "Name",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "C_IJ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_upper_tri_IJ(self.cij)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(C_IJ)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(C_IJ, perm=[0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * tf.shape(C_IJ)[-1], 2 * tf.shape(C_IJ)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "ll",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "self._modules['bn_end' + str(i)](self._modules['conv_last' + str(i)](ll), training=is_train, name='bn_end_HG_%d' % i, trainable=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "output_p",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(output, [-1, tf.shape(output)[1] * tf.shape(output)[2], tf.shape(output)[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_280": {
                "variable": {
                    "value": "mesh_tile",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(mesh, [1, mesh.shape[0], 1, mesh.shape[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(output_p)[0], 1, FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_284": {
                "variable": {
                    "value": "output_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.tile(tf.expand_dims(output_p, -1), [1, 1, 1, 2]) * mesh_tile",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_422": {
                "variable": {
                    "value": "y3d",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(y3d_0, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_423": {
                "variable": {
                    "value": "y3d_N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y3d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(y3d_0, 0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(pts2d)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_428": {
                "variable": {
                    "value": "y_IJ_3d_post",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_upper_tri_IJ(y_IJ_3d)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_430": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "pts2d",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_435": {
                "variable": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_upper_tri_IJ(yij)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_451": {
                "variable": {
                    "value": "pts2d_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.solve(mat, rhs)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, y3d_N)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pts3d_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(y3d, [tf.shape(pts2d)[0], 1, 1]) + tf.tensordot(q, phi, axes=[[1], [-1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_diag_469": {
                "variable": {
                    "value": "self.lij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "lij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(self.lij_)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "lij_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.linalg.diag_part(lij)) + epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_473": {
                "variable": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "self.lij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.lij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_diag_477": {
                "variable": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.lij, self.lij, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.fill_triangular(tf.transpose(cij, perm=[1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(cij, tf.zeros([2, 2, self.FLAGS.num_lmks]))",
                            "Call"
                        ],
                        [
                            "cij + tf.transpose(cij, perm=[0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "self.cij",
                            "Attribute"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.zeros([2, 2, self.FLAGS.num_lmks])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_481": {
                "variable": {
                    "value": "sumcij_diag",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.lij, self.lij, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.fill_triangular(tf.transpose(cij, perm=[1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(cij, tf.zeros([2, 2, self.FLAGS.num_lmks]))",
                            "Call"
                        ],
                        [
                            "cij + tf.transpose(cij, perm=[0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "self.cij",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_diag_483": {
                "variable": {
                    "value": "inv_cov_pair",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_cov_pair",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-cij",
                            "UnaryOp"
                        ],
                        [
                            "tf.linalg.set_diag(inv_cov_pair, sumcij_diag)",
                            "Call"
                        ],
                        [
                            "self.inv_cov_pair",
                            "Attribute"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "sumcij_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cij, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_568": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.logits[i], self.last_feature[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_576": {
                "variable": {
                    "value": "h_8",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "h_8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.MaxPool2D(pool_size=(4, 4), strides=4, name=var_scope + '_MaxPool2D')(h_32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(h_8, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_8, shape=[tf.shape(h_8)[0], self.FLAGS.num_lmks, 64])",
                            "Call"
                        ],
                        [
                            "self.dense1(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense2(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense3(h_8)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_577": {
                "variable": {
                    "value": "h_8",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.MaxPool2D(pool_size=(4, 4), strides=4, name=var_scope + '_MaxPool2D')(h_32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(h_8, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_8, shape=[tf.shape(h_8)[0], self.FLAGS.num_lmks, 64])",
                            "Call"
                        ],
                        [
                            "self.dense1(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense2(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense3(h_8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(h_8)[0], self.FLAGS.num_lmks, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_585": {
                "variable": {
                    "value": "log_h_diag",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(tf.linalg.diag_part(h_low)) + 0.01",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_diag_586": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h_low",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(h_8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "h_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(tf.linalg.diag_part(h_low)) + 0.01",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_589": {
                "variable": {
                    "value": "learned_inv_cov",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_652": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "var_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv3x3'",
                            "MethodArgument"
                        ],
                        [
                            "'downsample'",
                            "MethodArgument"
                        ],
                        [
                            "'ConvBlock'",
                            "MethodArgument"
                        ],
                        [
                            "'HourGlass'",
                            "MethodArgument"
                        ],
                        [
                            "'HG'",
                            "MethodArgument"
                        ],
                        [
                            "'inv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AveragePooling2D_129": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_AvgPool2D_level_%d' % level",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpSampling2D_146": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_UpSample2D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "FAN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "inv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "pairwise",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "FAN_start",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_306": {
                "shape": {
                    "value": "[tf.shape(self.C_IJ_)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_310": {
                "input": {
                    "value": "tf.expand_dims(y, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_311": {
                "input": {
                    "value": "tf.expand_dims(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_317": {
                "input": {
                    "value": "tf.expand_dims(y3d_N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_318": {
                "input": {
                    "value": "tf.expand_dims(y3d_N, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_333": {
                "a": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C_IJ, perm=[0, 2, 1, 3]), [2 * tf.shape(C_IJ)[-1], 2 * tf.shape(C_IJ)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([y_IJ_3d_post, zeros_F, zeros_F, y_IJ_3d_post], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(F, [tf.shape(zeros_F)[0], 2 * tf.shape(zeros_F)[2], 6])",
                            "Call"
                        ],
                        [
                            "tf.cast(F, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_334": {
                "a": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C_IJ, perm=[0, 2, 1, 3]), [2 * tf.shape(C_IJ)[-1], 2 * tf.shape(C_IJ)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(tf.transpose(y_IJ_post, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_341": {
                "input": {
                    "value": "Cy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(C_IJ_, tf.reshape(tf.transpose(y_IJ_post, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]]), axes=[[1], [1]]), perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "input": {
                    "value": "tf.norm(m1, ord='euclidean', axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_352": {
                "input": {
                    "value": "tf.norm(m2, ord='euclidean', axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_383": {
                "shape": {
                    "value": "[tf.shape(self.C_IJ_)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_390": {
                "input": {
                    "value": "tf.expand_dims(phi, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_391": {
                "input": {
                    "value": "tf.expand_dims(phi, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_394": {
                "a": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.solve(mat, rhs)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, y3d_N)",
                            "Call"
                        ],
                        [
                            "self.M_from_y(pts2d, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "phi_IJ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(phi_ij), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_396": {
                "a": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C_IJ, perm=[0, 2, 1, 3]), [2 * tf.shape(C_IJ)[-1], 2 * tf.shape(C_IJ)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(M, phi_IJ, axes=[[2], [0]]), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [-1, 2 * tf.shape(y_IJ_post)[-1], int(DM['numcomp'])])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_397": {
                "a": {
                    "value": "C_IJ_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C_IJ, perm=[0, 2, 1, 3]), [2 * tf.shape(C_IJ)[-1], 2 * tf.shape(C_IJ)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.ones([tf.shape(self.C_IJ_)[0]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(tf.transpose(y_IJ_post - T, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_405": {
                "input": {
                    "value": "Cy_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.tensordot(C_IJ_, tf.reshape(tf.transpose(y_IJ_post - T, perm=[0, 2, 1]), [-1, 2 * tf.shape(y_IJ_post)[-1]]), axes=[[1], [1]]), perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "pairwise",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_442": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.solve(mat_q, rhs_q)",
                            "Call"
                        ],
                        [
                            "self.q_from_y(pts2d, y_IJ_3d_post, M, y_IJ_post)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(q, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.transpose(phi, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.cast(phi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_464": {
                "name_or_scope": {
                    "value": "pairwise",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_502": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_503": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_507": {
                "a": {
                    "value": "inv_cov",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_508": {
                "input": {
                    "value": "tf.expand_dims(inv_cov_pair, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[N, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "tensor": {
                    "value": "tf.transpose(inv_cov_unary, perm=[0, 3, 1, 4, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, 2 * C, 2 * C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_513": {
                "tensor": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, 2 * C, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_515": {
                "input": {
                    "value": "tf.expand_dims(tf.transpose(cij, [2, 3, 0, 1]), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[N, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_516": {
                "input": {
                    "value": "tf.transpose(muij, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_518": {
                "input": {
                    "value": "tf.reduce_sum(muc, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_522": {
                "a": {
                    "value": "precision",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv_cov_unary + tf.tile(tf.expand_dims(inv_cov_pair, 0), [N, 1, 1, 1, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collection_555": {
                "name": {
                    "value": "losses_joint",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.matmul(tf.matmul(y_diff, precision_, transpose_a=True), y_diff) - 2 * tf.reduce_sum(tf.math.log(tf.linalg.diag_part(chol)), -1))",
                            "Call"
                        ],
                        [
                            "self.loss_joint(joint_mean, labels, chol, precision_)",
                            "Call"
                        ],
                        [
                            "metric.softmax_nll_with_logits(logits=output[i], labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_557": {
                "inputs": {
                    "value": "tf.get_collection('losses_joint')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss_joint",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_645": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.matmul(tf.matmul(y_diff, precision_, transpose_a=True), y_diff) - 2 * tf.reduce_sum(tf.math.log(tf.linalg.diag_part(chol)), -1))",
                            "Call"
                        ],
                        [
                            "self.loss_joint(joint_mean, labels, chol, precision_)",
                            "Call"
                        ],
                        [
                            "metric.softmax_nll_with_logits(logits=output[i], labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_649": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "loss_gaussian",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 * metric.multi_gaussian_fullcov_nll(mean=mean[i], inv_cov=inv_cov[i], logdet_invcov=logdet_invcov[i], labels=labels)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_651": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "L1_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 * metric.L1_mean_loss(mean=mean[i], labels=labels)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_652": {
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_179": {
                "variable": {
                    "value": "self._modules[conv_last + str(hg_module)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_last_HG_%d' % hg_module",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_185": {
                "variable": {
                    "value": "self._modules[l + str(hg_module)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.FLAGS.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'l_HG_%d' % hg_module",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "C_IJ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_upper_tri_IJ(self.cij)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(C_IJ)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_230": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "AvgPool2D_layer1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(output)[1] * tf.shape(output)[2], tf.shape(output)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "mesh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.transpose(np.array(np.meshgrid(x, y)).reshape((2, -1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, mesh.shape[0], 1, mesh.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_310": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim2 - 1, dim2, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_311": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim2 - 1, dim2, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_317": {
                "input": {
                    "value": "y3d_N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(y3d, [tf.shape(pts2d)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_318": {
                "input": {
                    "value": "y3d_N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(y3d, [tf.shape(pts2d)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "tensor": {
                    "value": "tf.transpose(y_IJ_post, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2 * tf.shape(y_IJ_post)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_351": {
                "tensor": {
                    "value": "m1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(M[:, 0:3, :], axis=-1)",
                            "Call"
                        ],
                        [
                            "m1 / lambda1",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_353": {
                "tensor": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(M[:, 3:6, :], axis=-1)",
                            "Call"
                        ],
                        [
                            "m2 / lambda2",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_390": {
                "input": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.transpose(phi, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.cast(phi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_391": {
                "input": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.transpose(phi, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.cast(phi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "tensor": {
                    "value": "tf.transpose(y_IJ_post - T, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2 * tf.shape(y_IJ_post)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_422": {
                "input": {
                    "value": "y3d_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['mu'], [3, -1], order='F')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_425": {
                "input": {
                    "value": "tf.expand_dims(y3d_N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_426": {
                "input": {
                    "value": "tf.expand_dims(y3d_N, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_432": {
                "input": {
                    "value": "tf.expand_dims(y, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_433": {
                "input": {
                    "value": "tf.expand_dims(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_454": {
                "input": {
                    "value": "tf.expand_dims(pts2d_re, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_455": {
                "input": {
                    "value": "tf.expand_dims(pts2d_re, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.FLAGS.num_lmks, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_457": {
                "a": {
                    "value": "pts2d_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(M, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_468": {
                "features": {
                    "value": "tf.linalg.diag_part(lij)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_476": {
                "a": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.lij, self.lij, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.fill_triangular(tf.transpose(cij, perm=[1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(cij, tf.zeros([2, 2, self.FLAGS.num_lmks]))",
                            "Call"
                        ],
                        [
                            "cij + tf.transpose(cij, perm=[0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "self.cij",
                            "Attribute"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "shape": {
                    "value": "[2, 2, self.FLAGS.num_lmks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_478": {
                "a": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.lij, self.lij, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.fill_triangular(tf.transpose(cij, perm=[1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(cij, tf.zeros([2, 2, self.FLAGS.num_lmks]))",
                            "Call"
                        ],
                        [
                            "cij + tf.transpose(cij, perm=[0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "self.cij",
                            "Attribute"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_508": {
                "input": {
                    "value": "inv_cov_pair",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-cij",
                            "UnaryOp"
                        ],
                        [
                            "tf.linalg.set_diag(inv_cov_pair, sumcij_diag)",
                            "Call"
                        ],
                        [
                            "self.inv_cov_pair",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_512": {
                "a": {
                    "value": "inv_cov_unary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.diag(tf.transpose(inv_cov, perm=[0, 2, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_515": {
                "input": {
                    "value": "tf.transpose(cij, [2, 3, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_516": {
                "a": {
                    "value": "muij",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_518": {
                "input_tensor": {
                    "value": "muc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.tile(tf.expand_dims(tf.transpose(cij, [2, 3, 0, 1]), 0), [N, 1, 1, 1, 1]), tf.expand_dims(tf.transpose(muij, [0, 2, 3, 1]), -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.squeeze(tf.reduce_sum(muc, 2)), [N, 2 * C, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_534": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_538": {
                "a": {
                    "value": "y_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.subtract(outlabels_, mean_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "precision_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(precision, perm=[0, 3, 1, 4, 2]), size_cov)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_557": {
                "key": {
                    "value": "losses_joint",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_570": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_AvgPool2D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2D_573": {
                "pool_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "var_scope + '_MaxPool2D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_584": {
                "x": {
                    "value": "tf.linalg.diag_part(h_low)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_590": {
                "input_tensor": {
                    "value": "log_h_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.log(h_diag)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "'hg_module_%d' % hg_module",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_191": {
                "variable": {
                    "value": "self._modules[bl + str(hg_module)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'bl_HG_%d' % hg_module",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_194": {
                "variable": {
                    "value": "self._modules[al + str(hg_module)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'al_HG_%d' % hg_module",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_284": {
                "input": {
                    "value": "tf.expand_dims(output_p, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_329": {
                "input": {
                    "value": "zeros_F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(y_IJ_3d_post)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_335": {
                "a": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_398": {
                "a": {
                    "value": "y_IJ_post - T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_425": {
                "input": {
                    "value": "y3d_N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(y3d, [tf.shape(pts2d)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_426": {
                "input": {
                    "value": "y3d_N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(y3d, [tf.shape(pts2d)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_432": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim2 - 1, dim2, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_433": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, dim2 - 1, dim2, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts2d, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_446": {
                "input": {
                    "value": "y3d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(y3d_0, 0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(pts2d)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_446": {
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.solve(mat_q, rhs_q)",
                            "Call"
                        ],
                        [
                            "self.q_from_y(pts2d, y_IJ_3d_post, M, y_IJ_post)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(q, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.transpose(phi, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(DM['coeff'], [3, int(DM['numpts']), -1], order='F')",
                            "Call"
                        ],
                        [
                            "tf.cast(phi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_454": {
                "input": {
                    "value": "pts2d_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(M, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_455": {
                "input": {
                    "value": "pts2d_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(M, pts3d_re)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_part_468": {
                "input": {
                    "value": "lij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(self.lij_)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_515": {
                "a": {
                    "value": "cij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.lij, self.lij, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.fill_triangular(tf.transpose(cij, perm=[1, 2, 0]))",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(cij, tf.zeros([2, 2, self.FLAGS.num_lmks]))",
                            "Call"
                        ],
                        [
                            "cij + tf.transpose(cij, perm=[0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "self.cij",
                            "Attribute"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_539": {
                "input_tensor": {
                    "value": "tf.math.log(tf.linalg.diag_part(chol))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_549": {
                "tensor": {
                    "value": "joint_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_584": {
                "input": {
                    "value": "h_low",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(h_8)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_631": {
                "tensor": {
                    "value": "joint_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mean[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_212": {
                "values": {
                    "value": "[tf.ones([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]), tf.zeros([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]), tf.ones([self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_281": {
                "input": {
                    "value": "output_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(output, [-1, tf.shape(output)[1] * tf.shape(output)[2], tf.shape(output)[-1]]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_284": {
                "input": {
                    "value": "output_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(output, [-1, tf.shape(output)[1] * tf.shape(output)[2], tf.shape(output)[-1]]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_306": {
                "input": {
                    "value": "self.C_IJ_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_383": {
                "input": {
                    "value": "self.C_IJ_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_395": {
                "input": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_423": {
                "input": {
                    "value": "pts2d",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_539": {
                "x": {
                    "value": "tf.linalg.diag_part(chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_550": {
                "input": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_mean(logits)",
                            "Call"
                        ],
                        [
                            "self.compute_mean(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_632": {
                "input": {
                    "value": "mean[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_221": {
                "input": {
                    "value": "C_IJ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_upper_tri_IJ(self.cij)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(C_IJ)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_277": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_part_539": {
                "input": {
                    "value": "chol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(precision_)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_577": {
                "input": {
                    "value": "h_8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.MaxPool2D(pool_size=(4, 4), strides=4, name=var_scope + '_MaxPool2D')(h_32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(h_8, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_8, shape=[tf.shape(h_8)[0], self.FLAGS.num_lmks, 64])",
                            "Call"
                        ],
                        [
                            "self.dense1(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense2(h_8)",
                            "Call"
                        ],
                        [
                            "self.dense3(h_8)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_212": {
                "shape": {
                    "value": "[self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "shape": {
                    "value": "[self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_214": {
                "shape": {
                    "value": "[self.FLAGS.num_lmks * (self.FLAGS.num_lmks + 1) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_335": {
                "input": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_399": {
                "input": {
                    "value": "y_IJ_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_upper_tri_IJ(yij), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_446": {
                "input": {
                    "value": "pts2d",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "CNNmodels/FAN_crf_pred.py": {
        "tensorflow": {
            "DEFINE_list_21": {
                "name": {
                    "value": "IMAGE_SIZE",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Input image size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_25": {
                "name": {
                    "value": "gpu_mem_fraction",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU memory fraction to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_38": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "read_file_54": {
                "variable": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(tf.reduce_join([tf.constant(self.args.data_eval_dir), parsed['imagename']]))",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_image_55": {
                "variable": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.reshape(image_string, shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_56": {
                "variable": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(face_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(tf.expand_dims(face_, 0), [self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_59": {
                "variable": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(face_, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_85": {
                "variable": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(tf.reduce_join([tf.constant(self.args.data_eval_dir), parsed['imagename']]))",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_image_86": {
                "variable": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.reshape(image_string, shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_87": {
                "variable": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(img_, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.crop_and_resize(tf.expand_dims(img_, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_130": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_181": {
                "variable": {
                    "value": "parsed",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "example_fmt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'imagename': tf.FixedLenFeature((), tf.string, ''), 'pts2d_68': tf.FixedLenFeature(self.args.gt_num_lmks * 2, tf.float32, default_value=list(np.zeros(self.args.gt_num_lmks * 2)))}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['pts2d_68']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_185": {
                "variable": {
                    "value": "img_string",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.reduce_join([tf.constant(self.args.data_eval_dir), parsed['imagename']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_image_188": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.reshape(img_string, shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_189": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_197": {
                "variable": {
                    "value": "xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_198": {
                "variable": {
                    "value": "ymin",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_199": {
                "variable": {
                    "value": "xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_200": {
                "variable": {
                    "value": "ymax",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_211": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "corner",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1 * tf.cast(w - 1, tf.float32) * tf.ones(self.args.num_lmks), y1 * tf.cast(h - 1, tf.float32) * tf.ones(self.args.num_lmks)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones(self.args.num_lmks, dtype=tf.float32) * (self.args.IMAGE_SIZE[1] - 1) / ((x2 - x1) * tf.cast(w - 1, tf.float32)), tf.ones(self.args.num_lmks, dtype=tf.float32) * (self.args.IMAGE_SIZE[0] - 1) / ((y2 - y1) * tf.cast(h - 1, tf.float32))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_47": {
                "variable": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "self.args.gpu_mem_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=self.gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_133": {
                "variable": {
                    "value": "self.eval_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "os.path.join(self.args.data_eval_dir, self.args.eval_tfrecords_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "self.pred_lmk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.joint_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.args.num_lmks, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_146": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_148": {
                "variable": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "self.args.gpu_mem_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_149": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=self.gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(img_string)",
                            "Call"
                        ],
                        [
                            "tf.read_file(img_string)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(face_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(tf.expand_dims(face_, 0), [self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(face_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(tf.expand_dims(face_, 0), [self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "face_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(face_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(tf.expand_dims(face_, 0), [self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_60": {
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=self.gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(img_string)",
                            "Call"
                        ],
                        [
                            "tf.read_file(img_string)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(img_, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_89": {
                "input": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(img_, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_99": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_and_resize_104": {
                "image": {
                    "value": "tf.expand_dims(img_, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "[[y1, x1, y2, x2]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_112": {
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=self.gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_176": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_177": {
                "shape": {
                    "value": "self.args.gt_num_lmks * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "list(np.zeros(self.args.gt_num_lmks * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_join_185": {
                "inputs": {
                    "value": "[tf.constant(self.args.data_eval_dir), parsed['imagename']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "tensor": {
                    "value": "img_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(tf.reduce_join([tf.constant(self.args.data_eval_dir), parsed['imagename']]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_191": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_194": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_195": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_206": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_207": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_208": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_209": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_and_resize_211": {
                "image": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "[[y1, x1, y2, x2]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "input": {
                    "value": "img_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(image_string, shape=[]), channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(img_, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_image(tf.reshape(img_string, shape=[]), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.image.crop_and_resize(tf.expand_dims(image, 0), boxes=[[y1, x1, y2, x2]], box_ind=[0], crop_size=[self.args.IMAGE_SIZE[0], self.args.IMAGE_SIZE[1]], method='bilinear'), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "gpu_options": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_149": {
                "gpu_options": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_185": {
                "value": {
                    "value": "self.args.data_eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_216": {
                "shape": {
                    "value": "self.args.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_217": {
                "shape": {
                    "value": "self.args.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_216": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_217": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_219": {
                "shape": {
                    "value": "self.args.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_221": {
                "shape": {
                    "value": "self.args.num_lmks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_60": {
                "gpu_options": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_112": {
                "gpu_options": {
                    "value": "self.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval_fan_crf.py": {
        "tensorflow": {
            "DEFINE_integer_25": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "gt_num_lmks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "68",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of landmarks in ground truth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "num_lmks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "68",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of landmarks in prediction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "eval_num",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "689",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of evaluation faces.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset to add to prediction.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "data_eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/300w_train_val/val/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": " eval data folder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_tfrecords_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "thrWtrain_val_689.tfrecords",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": " eval tfrecords file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "model_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./pretrained_models/300wtrain/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for model file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "model_300wtrain.ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "model file name",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "facemodel_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./facemodel/DM68_wild34.mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "face model path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "save_result_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./results/300wtrain_val689.mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "mat file path to save result",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/metrics_FA_crf.py": {
        "tensorflow": {
            "clip_by_value_26": {
                "variable": {
                    "value": "int_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.floor(labels / down_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.cast(tf.shape(logits)[2], tf.float32) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "output_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(logits, [-1, dim1 * dim2, logits.shape[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.cast(flat_labels, tf.int32), logits=output_flat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.metrics.mae(outlabels, mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "y_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.subtract(outlabels, mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(tf.matmul(y_diff, inv_cov, transpose_a=True), y_diff) - tf.expand_dims(tf.expand_dims(logdet_invcov, -1), -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_26": {
                "x": {
                    "value": "labels / down_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim1 * dim2, logits.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_39": {
                "labels": {
                    "value": "tf.cast(flat_labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "output_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(logits, [-1, dim1 * dim2, logits.shape[-1]]), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_57": {
                "x": {
                    "value": "outlabels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels / down_scale",
                            "BinOp"
                        ],
                        [
                            "labels / down_scale",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "tf.shape(logits)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "y_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.subtract(outlabels, mean), -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "inv_cov",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "logdet_invcov",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_28": {
                "x": {
                    "value": "tf.shape(logits)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int_labels[:, :, 1] * tf.cast(tf.shape(logits)[2], tf.float32) + int_labels[:, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}