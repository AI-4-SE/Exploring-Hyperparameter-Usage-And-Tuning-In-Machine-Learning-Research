{
    "Unet/uNet.py": {
        "torch": {
            "Conv3d_8": {
                "in_channels": {
                    "value": "inplane",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_32": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_33": {
                "variable": {
                    "value": "self.deconv_batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_35": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "variable": {
                    "value": "self.deconv_batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_38": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv_batchnorm1(crop_tensor(self.deconv1(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv_batchnorm2(crop_tensor(self.deconv2(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "torch": {
            "load_89": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path + model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "Nbody.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([3, 32, 32, 32])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(data, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "periodic_padding.py": {
        "torch": {
            "ConstantPad3d_39": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reconLPT2Nbody_uNet.py": {
        "torch": {
            "MSELoss_37": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "configs['net_params']['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "configs['net_params']['reg']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "TrainLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TrainSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimuData(base_data_path, configs['train']['data_partition']['lIndex'], configs['train']['data_partition']['hIndex'], configs['train']['data_partition']['aug'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs['train']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs['val']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "ValLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ValSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimuData(base_data_path, configs['val']['data_partition']['lIndex'], configs['val']['data_partition']['hIndex'], configs['val']['data_partition']['aug'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs['val']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs['val']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path + 'BestModel.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "TestLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimuData(base_data_path, configs['test']['data_partition']['lIndex'], configs['test']['data_partition']['hIndex'], configs['test']['data_partition']['aug'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs['test']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs['test']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_104": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lpt2NbodyNet(BasicBlock)",
                            "Call"
                        ],
                        [
                            "torch.load(output_path + 'BestModel.pt')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path + 'BestModel.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lpt2NbodyNet(BasicBlock)",
                            "Call"
                        ],
                        [
                            "torch.load(output_path + 'BestModel.pt')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path + 'BestModel' + str(iterTime) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}