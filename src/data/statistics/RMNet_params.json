{
    "core/inference.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "utils.data_loaders.DatasetCollector.get_dataset(cfg, cfg.DATASET.TEST_DATASET, utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "tflownet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "tflownet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TinyFlowNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(tflownet).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_37": {
                "variable": {
                    "value": "rmnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rmnet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RMNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rmnet).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_62": {
                "variable": {
                    "value": "est_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_probs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/test.py": {
        "torch": {
            "L1Loss_60": {
                "variable": {
                    "value": "l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "cfg.CONST.IGNORE_IDX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "utils.data_loaders.DatasetCollector.get_dataset(cfg, cfg.DATASET.TEST_DATASET, utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "tflownet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "tflownet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TinyFlowNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(tflownet).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "rmnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rmnet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RMNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rmnet).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_91": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.helpers.var_or_cuda(masks)",
                            "Call"
                        ],
                        [
                            "torch.argmax(masks, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "est_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmnet(frames, masks, est_flows, n_objects, cfg.TEST.MEMORIZE_EVERY)",
                            "Call"
                        ],
                        [
                            "est_probs.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_105": {
                "input": {
                    "value": "n_objects[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_97": {
                "input": {
                    "value": "est_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmnet(frames, masks, est_flows, n_objects, cfg.TEST.MEMORIZE_EVERY)",
                            "Call"
                        ],
                        [
                            "est_probs.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/train.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "utils.data_loaders.DatasetCollector.get_dataset(cfg, cfg.DATASET.TRAIN_DATASET, utils.data_loaders.DatasetSubset.TRAIN)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "utils.data_loaders.DatasetCollector.get_dataset(cfg, cfg.DATASET.TEST_DATASET, utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, network.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_77": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, network.parameters()), lr=cfg.TRAIN.LEARNING_RATE, weight_decay=cfg.TRAIN.WEIGHT_DECAY, betas=cfg.TRAIN.BETAS)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "cfg.TRAIN.N_EPOCHS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_80": {
                "variable": {
                    "value": "l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_81": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "cfg.CONST.IGNORE_IDX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "tflownet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "tflownet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TinyFlowNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(tflownet)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(tflownet).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "rmnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rmnet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RMNet(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(rmnet)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rmnet).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_93": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': metrics.state_dict(), 'tflownet': tflownet.state_dict(), 'rmnet': rmnet.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, 'ckpt-epoch-%03d.pth' % epoch_idx)",
                            "Call"
                        ],
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, 'ckpt-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_225": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': metrics.state_dict(), 'tflownet': tflownet.state_dict(), 'rmnet': rmnet.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, 'ckpt-epoch-%03d.pth' % epoch_idx)",
                            "Call"
                        ],
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, 'ckpt-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_180": {
                "input": {
                    "value": "est_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmnet(frames, masks, optical_flows, n_objects, cfg.TRAIN.MEMORIZE_EVERY)",
                            "Call"
                        ],
                        [
                            "utils.helpers.var_or_cuda(est_probs[:, 1:]).permute(0, 2, 1, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "extensions/reg_att_map_generator/__init__.py": {
        "torch": {
            "ones_23": {
                "*size": {
                    "value": "grad_att_map.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "extensions/reg_att_map_generator/setup.py": {
        "torch": {}
    },
    "models/focal_loss.py": {
        "torch": {
            "nll_loss_24": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1, 3, 4).reshape(B * N, K, H * W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.reshape(B * N, H * W)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/lovasz_loss.py": {
        "torch": {
            "sort_45": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_48": {
                "input": {
                    "value": "errors_sorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self._lovasz_grad(fg_sorted)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/rmnet.py": {
        "torch": {
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.convFS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.convFM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.pred2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_139": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pred2(F.relu(m2))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "mi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m_key.view(B, D_e, T * H * W)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mi, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_155": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m_key.view(B, D_e, T * H * W)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mi, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "qi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_key.view(B, D_e, H * W)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(p2, scale_factor=4, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.bmm(mi, qi)",
                            "Call"
                        ],
                        [
                            "p / math.sqrt(D_e)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_160": {
                "variable": {
                    "value": "mem",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m_val.view(B, D_o, T * H * W)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(p2, scale_factor=4, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.bmm(mi, qi)",
                            "Call"
                        ],
                        [
                            "p / math.sqrt(D_e)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "mem_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem, q_val]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "keydim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "valdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "att_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(att_map, scale_factor=1 / 16).unsqueeze(dim=2).unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(batch_list['att_map'], scale_factor=1 / 16)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "att_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_257": {
                "variable": {
                    "value": "x_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_258": {
                "variable": {
                    "value": "y_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis, y_axis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_271": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img0.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grid + flow",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_273": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.helpers.var_or_cuda(torch.ones(img0.size()), img0.device)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(mask, vgrid, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grid + flow",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_300": {
                "variable": {
                    "value": "em",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "em",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.helpers.var_or_cuda(torch.zeros(B, K, H, W), ps.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(em, 1e-07, 1 - 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_301": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "em / (1 - em)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_356": {
                "variable": {
                    "value": "att_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_list['att_map']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_368": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder(m4, batch_list['r3e'], batch_list['r2e'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "variable": {
                    "value": "est_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masks.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "batch_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_297": {
                "variable": {
                    "value": "em[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - ps[begin:end]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "batch_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_450": {
                "variable": {
                    "value": "est_masks[:, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.log(em / (1 - em))",
                            "Call"
                        ],
                        [
                            "self.soft_aggregation(ps, K, n_objects)",
                            "Call"
                        ],
                        [
                            "logit[:, :, pad[2]:-pad[3], :]",
                            "Subscript"
                        ],
                        [
                            "logit[:, :, :, pad[0]:-pad[1]]",
                            "Subscript"
                        ],
                        [
                            "self.segment(curr_frame, reg_att_map, this_keys, this_values, this_bboxes, curr_bbox, n_max_objects)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_42": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(in_f) + self.conv1_m(m) + self.conv1_o(o)",
                            "BinOp"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(c1)",
                            "Call"
                        ],
                        [
                            "self.conv1(in_f)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(c1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_43": {
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(r))",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_117": {
                "input": {
                    "value": "pm",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_137": {
                "input": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.RF2(r2, m3)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_272": {
                "*size": {
                    "value": "img0.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_293": {
                "*size": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(n_objects)",
                            "Call"
                        ],
                        [
                            "len(n_objects)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_398": {
                "input": {
                    "value": "no",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_400": {
                "input": {
                    "value": "torch.argmax(masks[i, 0], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "this_keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keys, prev_key]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "this_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[values, prev_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "this_bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, prev_bbox.unsqueeze(dim=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "*size": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(n_objects)",
                            "Call"
                        ],
                        [
                            "len(n_objects)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_438": {
                "input": {
                    "value": "torch.argmax(masks[i, t], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_224": {
                "input": {
                    "value": "masks[i, 1:o].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "masks[i, o + 1:n_objects[i] + 1].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_400": {
                "input": {
                    "value": "masks[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_438": {
                "input": {
                    "value": "masks[i, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/tiny_flownet.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(6, 64, kernel_size=7, stride=2, padding=3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(64, 128, kernel_size=5, stride=2, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(128, 256, kernel_size=5, stride=2, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(256, 256, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(512, 512, kernel_size=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose2d(770, 128, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose2d(386, 64, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.predict_flow5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.predict_flow4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "770",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.predict_flow3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "386",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.predict_flow2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "194",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_77": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "img0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(img0, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(img1, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predict_flow2(concat2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow2, scale_factor=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "flow2[:, :, pad[2]:-pad[3], :]",
                            "Subscript"
                        ],
                        [
                            "flow2[:, :, :, pad[0]:-pad[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "est_optical_flows",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "in_channels": {
                    "value": "770",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "in_channels": {
                    "value": "386",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(img0, img1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "cfg.CONST.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "cfg.CONST.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_71": {
                "seed": {
                    "value": "cfg.CONST.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_loaders.py": {
        "torch": {}
    },
    "utils/data_transforms.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_46": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "optical_flows",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(optical_flows)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_48": {
                "variable": {
                    "value": "optical_flows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval_server.py": {
        "torch": {
            "load_91": {
                "variable": {
                    "value": "_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.basename(checkpoint)",
                            "Call"
                        ],
                        [
                            "get_next_checkpoints(tested_checkpoints, checkpoints)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "dataset": {
                    "value": "utils.data_loaders.DatasetCollector.get_dataset(cfg, cfg.DATASET.TEST_DATASET, utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_109": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argmax(masks, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_110": {
                "variable": {
                    "value": "est_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "network(frames, masks, optical_flows, n_objects, cfg.TEST.MEMORIZE_EVERY, device)",
                            "Call"
                        ],
                        [
                            "est_probs.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "n_objects[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "interpolate_50": {
                "variable": {
                    "value": "_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "fs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.FRAME_SCALES",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks[0].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "fs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.FRAME_SCALES",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "one_hot_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_hot_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((k, h, w), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(one_hot_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_65": {
                "variable": {
                    "value": "_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(frames[0], scale_factor=fs, mode='bilinear', align_corners=False).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.flip(_frames, dims=[4])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_66": {
                "variable": {
                    "value": "_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(masks[0].float(), scale_factor=fs, mode='nearest').int().unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.flip(_masks, dims=[4])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_69": {
                "variable": {
                    "value": "_est_flows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_est_flows",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tflownet(_frames)",
                            "Call"
                        ],
                        [
                            "torch.flip(_est_flows, dims=[4])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_73": {
                "variable": {
                    "value": "_est_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_est_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmnet(_frames, _masks, _est_flows, n_objects, cfg.TEST.MEMORIZE_EVERY)",
                            "Call"
                        ],
                        [
                            "rmnet(_frames, _masks, _est_flows, n_objects, cfg.TEST.MEMORIZE_EVERY)",
                            "Call"
                        ],
                        [
                            "torch.flip(_est_probs, dims=[4])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "torch.stack(est_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "input": {
                    "value": "_est_probs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "est_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_122": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_list",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(int(lw), int(uw), int(lh), int(uh))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_58": {
                "input": {
                    "value": "_est_flows[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "input": {
                    "value": "_est_probs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}