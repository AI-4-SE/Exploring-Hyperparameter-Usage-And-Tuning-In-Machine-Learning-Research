{
    "losses.py": {
        "tensorflow": {
            "CosineSimilarity_154": {
                "variable": {
                    "value": "cosine_sim_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_155": {
                "variable": {
                    "value": "cosine_sim_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(A * A, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_23": {
                "variable": {
                    "value": "d_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(A, tf.transpose(A)) + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "pdist_euclidean(z)",
                            "Call"
                        ],
                        [
                            "1 - tf.matmul(z, z, transpose_a=False, transpose_b=True)",
                            "BinOp"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(zip(triu_idx[0], triu_idx[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "y_col_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(y, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "y_contrasts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_y == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y, tf.transpose(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_125": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(z, tf.transpose(z))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "logits_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.matmul(z, tf.transpose(z)), temperature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(y, tf.transpose(y)), tf.float32)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfa.losses.contrastive_loss(y_contrasts, d_vec, margin=margin)",
                            "Call"
                        ],
                        [
                            "tfa.losses.npairs_loss(y, S)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_hard_loss(y, z, margin=margin, soft=False)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_hard_loss(y, z, margin=margin, soft=True)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_semihard_loss(y, z, margin=margin)",
                            "Call"
                        ],
                        [
                            "-(temperature / base_temperature) * mean_log_prob_pos",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_180": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(tf.transpose(y), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "x": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(A, tf.transpose(A)) + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "pdist_euclidean(z)",
                            "Call"
                        ],
                        [
                            "1 - tf.matmul(z, z, transpose_a=False, transpose_b=True)",
                            "BinOp"
                        ],
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_71": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfa.losses.contrastive_loss(y_contrasts, d_vec, margin=margin)",
                            "Call"
                        ],
                        [
                            "tfa.losses.npairs_loss(y, S)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_hard_loss(y, z, margin=margin, soft=False)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_hard_loss(y, z, margin=margin, soft=True)",
                            "Call"
                        ],
                        [
                            "tfa.losses.triplet_semihard_loss(y, z, margin=margin)",
                            "Call"
                        ],
                        [
                            "-(temperature / base_temperature) * mean_log_prob_pos",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_14": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_34": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_124": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_133": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(y, tf.transpose(y)), tf.float32)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_133": {
                "num_rows": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(z)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_136": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_138": {
                "x": {
                    "value": "tf.reduce_sum(exp_logits, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "tf.transpose(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "exp_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(logits) * logits_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "mask * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_14": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_fulsup.py": {
        "tensorflow": {
            "ImageDataGenerator_45": {
                "variable": {
                    "value": "train_image_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "zoom_range": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.8, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_58": {
                "variable": {
                    "value": "val_image_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "list_physical_devices_114": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ResNet50V2_69": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_73": {
                "variable": {
                    "value": "encoder_network",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input((img_shape, img_shape, 3))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=(img_shape, img_shape, 3))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(inputs, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_81": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_88": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input((img_shape, img_shape, 3))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=(img_shape, img_shape, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_class, activation='softmax')(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_memory_growth_115": {
                "device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_84": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_86": {
                "units": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "learning_rate": {
                    "value": "tf.keras.experimental.CosineDecay(initial_learning_rate=args.learning_rate, decay_steps=1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "EarlyStopping_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineDecay_90": {
                "initial_learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_supcon.py": {
        "tensorflow": {
            "ImageDataGenerator_49": {
                "variable": {
                    "value": "train_image_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "zoom_range": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "brightness_range": {
                    "value": "[0.8, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_63": {
                "variable": {
                    "value": "val_image_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf.keras.experimental.CosineDecay(initial_learning_rate=args.learning_rate, decay_steps=1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "list_physical_devices_200": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_83": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ResNet50V2_85": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_90": {
                "variable": {
                    "value": "encoder_network",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input((img_shape, img_shape, 3))",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(img_shape, img_shape, 3))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "norm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalization_layer(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "projector",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(128, activation='relu'), UnitNormLayer()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_106": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_shape, img_shape, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input((img_shape, img_shape, 3))",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(img_shape, img_shape, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_class, activation='softmax')(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Mean_155": {
                "variable": {
                    "value": "epoch_loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_156": {
                "variable": {
                    "value": "epoch_val_loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_memory_growth_201": {
                "device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineDecay_124": {
                "initial_learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_109": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "units": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "learning_rate": {
                    "value": "tf.keras.experimental.CosineDecay(initial_learning_rate=args.learning_rate, decay_steps=1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(input_tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineDecay_115": {
                "initial_learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}