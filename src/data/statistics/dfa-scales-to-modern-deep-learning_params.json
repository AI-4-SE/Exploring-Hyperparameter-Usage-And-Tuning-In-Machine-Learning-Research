{
    "paper-experiments/geometric-learning/alignment.py": {
        "sklearn": {
            "StratifiedKFold_95": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0001), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_68": {
                "input": {
                    "value": "model(data)[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0001), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_112": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/geometric-learning/geometric.py": {
        "sklearn": {
            "StratifiedKFold_113": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_86": {
                "input": {
                    "value": "model(data)[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0001), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0005), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0001), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0005), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/recommender-systems/alignment.py": {
        "sklearn": {
            "roc_auc_score_126": {
                "y_true": {
                    "value": "targets_for_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions_for_eval",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "validation_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_145": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "path.join(save_dir, signature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DFADeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout, training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFADeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout, training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFAAutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFAAdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method='dfa')",
                            "Call"
                        ],
                        [
                            "get_model(model_name, features_dimension, dropout, device)",
                            "Call"
                        ],
                        [
                            "torch.load(last_model_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(save_dir, f'{signature}', f'V{e}_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ],
                        [
                            "path.join(save_dir, f'{signature}', f'T_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_214": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DFADeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout, training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFADeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout, training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFAAutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method='dfa')",
                            "Call"
                        ],
                        [
                            "DFAAdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method='dfa')",
                            "Call"
                        ],
                        [
                            "get_model(model_name, features_dimension, dropout, device)",
                            "Call"
                        ],
                        [
                            "torch.load(last_model_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(save_dir, f'{signature}', f'V{e}_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ],
                        [
                            "path.join(save_dir, f'{signature}', f'T_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/recommender-systems/recsys.py": {
        "sklearn": {
            "roc_auc_score_157": {
                "y_true": {
                    "value": "targets_for_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions_for_eval",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "validation_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_169": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_176": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "path.join(save_dir, signature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FactorizationMachineModel(features_dimension, embed_dim=16)",
                            "Call"
                        ],
                        [
                            "DFADeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout, training_method=training_method)",
                            "Call"
                        ],
                        [
                            "DeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout)",
                            "Call"
                        ],
                        [
                            "DFADeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout, training_method=training_method)",
                            "Call"
                        ],
                        [
                            "DeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout)",
                            "Call"
                        ],
                        [
                            "DFAAutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method=training_method)",
                            "Call"
                        ],
                        [
                            "AutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout))",
                            "Call"
                        ],
                        [
                            "DFAAdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method=training_method)",
                            "Call"
                        ],
                        [
                            "AdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout))",
                            "Call"
                        ],
                        [
                            "get_model(model_name, training_method, features_dimension, dropout, device)",
                            "Call"
                        ],
                        [
                            "torch.load(last_model_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(save_dir, f'{signature}', f'V{e}_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ],
                        [
                            "path.join(save_dir, f'{signature}', f'T_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FactorizationMachineModel(features_dimension, embed_dim=16)",
                            "Call"
                        ],
                        [
                            "DFADeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout, training_method=training_method)",
                            "Call"
                        ],
                        [
                            "DeepFactorizationMachineModel(features_dimension, embed_dim=10, mlp_dims=(400, 400, 400), dropout=dropout)",
                            "Call"
                        ],
                        [
                            "DFADeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout, training_method=training_method)",
                            "Call"
                        ],
                        [
                            "DeepCrossNetworkModel(features_dimension, embed_dim=16, num_layers=6, mlp_dims=(1024, 1024), dropout=dropout)",
                            "Call"
                        ],
                        [
                            "DFAAutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method=training_method)",
                            "Call"
                        ],
                        [
                            "AutomaticFeatureInteractionModel(features_dimension, embed_dim=16, atten_embed_dim=32, num_heads=2, num_layers=3, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout))",
                            "Call"
                        ],
                        [
                            "DFAAdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout), training_method=training_method)",
                            "Call"
                        ],
                        [
                            "AdaptiveFactorizationNetwork(features_dimension, embed_dim=10, LNN_dim=1500, mlp_dims=(400, 400, 400), dropouts=(dropout, dropout, dropout))",
                            "Call"
                        ],
                        [
                            "get_model(model_name, training_method, features_dimension, dropout, device)",
                            "Call"
                        ],
                        [
                            "torch.load(last_model_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(save_dir, f'{signature}', f'V{e}_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ],
                        [
                            "path.join(save_dir, f'{signature}', f'T_{loss:.5f}_{auc:.5f}.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TinyDFA/mnist_example.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu_id}' if use_gpu else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(args.dataset_path, train=True, download=True, transform=mnist_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(args.dataset_path, train=False, transform=mnist_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_56": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TinyDFA/mnist_fast_example.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu_id}' if use_gpu else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(args.dataset_path, train=True, download=True, transform=mnist_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(args.dataset_path, train=False, transform=mnist_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_55": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TinyDFA/tinydfa/alignment.py": {
        "torch": {
            "CosineSimilarity_37": {
                "variable": {
                    "value": "self.cosine_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.sensitivity",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyDFA/tinydfa/dfa.py": {
        "torch": {
            "mm_49": {
                "variable": {
                    "value": "random_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.reshape(-1, grad_size).to(dfa_context.rp_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dfa_context.feedback_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_161": {
                "variable": {
                    "value": "feedback_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feedback_point.to(self.global_feedback_point.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, global_feedback_point_size - feedback_point_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_164": {
                "variable": {
                    "value": "self.global_feedback_point",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.global_feedback_point",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, feedback_point_size - global_feedback_point_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_145": {
                "*size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_feedback_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.rp_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TinyDFA/tinydfa/light_dfa.py": {
        "torch": {
            "mm_17": {
                "variable": {
                    "value": "random_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.reshape(grad_output.shape[0], -1).to(dfa_context.rp_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dfa_context.feedback_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_feedback_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.rp_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/geometric-learning/autoencoder.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/geometric-learning/models.py": {
        "torch": {
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "self.dfa(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_87": {
                "input": {
                    "value": "self.dfa(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_126": {
                "input": {
                    "value": "self.dfa(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_160": {
                "input": {
                    "value": "self.dfa(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x_all, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_all, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_191": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_all.detach(), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_217": {
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_227": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.0, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(data.x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, data.edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x_all, edge_index))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dfa1(F.relu(self.lin1(x)))",
                            "Call"
                        ],
                        [
                            "self.dfa_convs[i](F.relu(conv(x_all, edge_index)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.hidden_channels)",
                            "Call"
                        ],
                        [
                            "x_all[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.dfa_1(F.relu(self.conv1(x, edge_index)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_250": {
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_221": {
                "input": {
                    "value": "conv(x_all, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/geometric-learning/tsne.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0001), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=0.0005), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_49": {
                "input": {
                    "value": "model(data)[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/natural-language-processing/attention.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.linearV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "self.h4mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.energyfunc(0, i - 2, n_tokens) for i in range(n_tokens)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_155": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.contiguous().view(n_tokens, batch_size * self.n_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear_in(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_165": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(head_dim, n_tokens) if big else min(head_dim, n_tokens)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "empty_166": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(head_dim, n_tokens) if big else min(head_dim, n_tokens)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "empty_167": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(head_dim, n_tokens) if big else min(head_dim, n_tokens)",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_168": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_200": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "self.hlm_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.uniform_head(0, i - 2, n_tokens) for i in range(n_tokens)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_64": {
                "equation": {
                    "value": "ij,jkl->ikl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A[:n, :n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2, h3, h4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2, h3, h4, h5, h6, h7, h8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "data": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_heads, head_dim, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_176": {
                "data": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_heads, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "data": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_heads, h, n_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_178": {
                "data": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_heads, n_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_188": {
                "equation": {
                    "value": "ijkl,klm->ijkm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(n_tokens, batch_size, self.n_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijkl,klm->ijkm', x, self.w1) + self.b1",
                            "BinOp"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijkl,klm->ijkm', x, self.w2) + self.b2",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :, :l]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 3).contiguous().view(l, l, bs * nh).transpose(0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_190": {
                "equation": {
                    "value": "ijkl,klm->ijkm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(n_tokens, batch_size, self.n_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijkl,klm->ijkm', x, self.w1) + self.b1",
                            "BinOp"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijkl,klm->ijkm', x, self.w2) + self.b2",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :, :l]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 3).contiguous().view(l, l, bs * nh).transpose(0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_205": {
                "data": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_heads, n_tokens, n_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/natural-language-processing/radam.py": {
        "torch": {
            "zeros_like_51": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_142": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_143": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_218": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_219": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/natural-language-processing/train_lm.py": {
        "torch": {
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu_id}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "base_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(args.beta1, args.beta2)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(args.beta1, args.beta2)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(args.beta1, args.beta2)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneCycleLR_127": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.NoamOpt(args.dmodel, 1, args.warmup, base_optim)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "RAdam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "args.max_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "len(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "epochs": {
                    "value": "args.max_epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_144": {
                "type": {
                    "value": "f'cuda:{args.gpu_id + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optim': optimizer.state_dict(), 'epoch': epoch, 'step': steps}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(exp_dir, f'model_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(args.beta1, args.beta2)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.NoamOpt(args.dmodel, 1, args.warmup, base_optim)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "RAdam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr, betas=betas, eps=1e-09)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.schedule_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.schedule_patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/natural-language-processing/transformer.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_20": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_21": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_22": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerEncoder_44": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomTransformerEncoderLayer(d_model, n_heads, dim_feedforward, dropout, dfa=dfa, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer_encoder(src, self.src_mask)",
                            "Call"
                        ],
                        [
                            "self.dfa(output)",
                            "Call"
                        ],
                        [
                            "F.linear(output, weight=self.embedding.weight)",
                            "Call"
                        ],
                        [
                            "self.decoder(output)",
                            "Call"
                        ],
                        [
                            "self.dfa(output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiheadAttention_117": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_132": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_133": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_135": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_136": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_65": {
                "input": {
                    "value": "torch.ones(size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/natural-language-processing/utils.py": {
        "torch": {
            "clip_grad_norm__74": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/cache_dataset.py": {
        "torch": {
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses[:, :3, :4]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_74": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meshgrid_xy(torch.arange(H).to(device), torch.arange(W).to(device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "batch_rays",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ray_origins, ray_directions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "cache_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'height': H, 'width': W, 'focal_length': focal, 'ray_origins': ray_origins.detach().cpu(), 'ray_directions': ray_directions.detach().cpu(), 'target': img_target.detach().cpu()}",
                            "Dict"
                        ],
                        [
                            "{'height': H, 'width': W, 'focal_length': focal, 'ray_bundle': batch_rays.detach().cpu(), 'target': target_s.detach().cpu()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(args.savedir, 'val', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4), str(j).zfill(4), '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "cache_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'height': H, 'width': W, 'focal_length': focal, 'ray_origins': ray_origins.detach().cpu(), 'ray_directions': ray_directions.detach().cpu(), 'target': img_target.detach().cpu()}",
                            "Dict"
                        ],
                        [
                            "{'height': H, 'width': W, 'focal_length': focal, 'ray_bundle': batch_rays.detach().cpu(), 'target': target_s.detach().cpu()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(args.savedir, 'val', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4), str(j).zfill(4), '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.savedir, 'train', str(img_idx).zfill(4) + '.data')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_75": {
                "start": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/lieutils.py": {
        "torch": {
            "zeros_like_69": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_178": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_211": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_239": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_267": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_328": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_748": {
                "variable": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_470": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_472": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.stack((O, -x3, x2), dim=1), torch.stack((x3, O, -x1), dim=1), torch.stack((-x2, x1, O), dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_487": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_505": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X_.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_537": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tr - 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_543": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I + coeff_A(theta) * omega_hat + coeff_B(theta) * omega_hat_sq",
                            "BinOp"
                        ],
                        [
                            "g.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "g.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "I + coeff_A(t) * W + coeff_B(t) * S",
                            "BinOp"
                        ],
                        [
                            "g_[:, 0:3, 0:3]",
                            "Subscript"
                        ],
                        [
                            "g_[:, 0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_574": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_577": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(c)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 3).norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "w.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_625": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zw, zv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_639": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aw1",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_641": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.stack((O, -w3, w2, v1), dim=1), torch.stack((w2, O, -w1, v2), dim=1), torch.stack((-w2, w1, O, v3), dim=1), torch.stack((O, O, O, O), dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_658": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1, w2, w3, v1, v2, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_676": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_683": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_688": {
                "variable": {
                    "value": "Rp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Rp, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_700": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "Qq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "ig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Qq, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_717": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta4",
                            "variable"
                        ],
                        [
                            "omega.norm(p=2, dim=1).view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_79": {
                "input": {
                    "value": "theta[large_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_163": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_223": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_459": {
                "input": {
                    "value": "x.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_492": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_525": {
                "variable": {
                    "value": "tr[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_[i, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_550": {
                "variable": {
                    "value": "aw1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_551": {
                "variable": {
                    "value": "aw2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_552": {
                "variable": {
                    "value": "aw3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_555": {
                "variable": {
                    "value": "sgn_23",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_561": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1, w2, w3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_663": {
                "n": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_749": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_750": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_751": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_108": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_108": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_192": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_251": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_284": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_312": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_539": {
                "input": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coeff_A(t)",
                            "Call"
                        ],
                        [
                            "sc.view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_540": {
                "input": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coeff_A(t)",
                            "Call"
                        ],
                        [
                            "sc.view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_137": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_137": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_192": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_193": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_222": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_342": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_474": {
                "tensors": {
                    "value": "(O, -x3, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_475": {
                "tensors": {
                    "value": "(x3, O, -x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_476": {
                "tensors": {
                    "value": "(-x2, x1, O)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_643": {
                "tensors": {
                    "value": "(O, -w3, w2, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_644": {
                "tensors": {
                    "value": "(w2, O, -w1, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_645": {
                "tensors": {
                    "value": "(-w2, w1, O, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_646": {
                "tensors": {
                    "value": "(O, O, O, O)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_222": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_284": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_342": {
                "input": {
                    "value": "theta[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tan_580": {
                "input": {
                    "value": "t[l] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_549": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_549": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/nerf/load_blender.py": {
        "torch": {
            "stack_78": {
                "variable": {
                    "value": "render_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(pose_spherical(angle, -30.0, 4.0)) for angle in np.linspace(-180, 180, 40 + 1)[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_poses, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ],
                        [
                            "np.array(poses).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_97": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(25, 25), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(400, 400), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(imgs)",
                            "Call"
                        ],
                        [
                            "(np.array(imgs) / 255.0).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_poses, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ],
                        [
                            "np.array(poses).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_112": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(25, 25), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(400, 400), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(imgs)",
                            "Call"
                        ],
                        [
                            "(np.array(imgs) / 255.0).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(25, 25), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(cv2.resize(imgs[i], dsize=(400, 400), interpolation=cv2.INTER_AREA)) for i in range(imgs.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(imgs)",
                            "Call"
                        ],
                        [
                            "(np.array(imgs) / 255.0).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "pose_spherical(angle, -30.0, 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "cv2.resize(imgs[i], dsize=(25, 25), interpolation=cv2.INTER_AREA)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "cv2.resize(imgs[i], dsize=(400, 400), interpolation=cv2.INTER_AREA)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/nerf/models.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.xyz_encoding_dims + self.viewdir_encoding_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.xyz_encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.layer3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.layer3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.viewdir_encoding_dims + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, view)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + self.dim_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.layers_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.layers_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.fc_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.layers_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.layers_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_283": {
                "variable": {
                    "value": "self.dfa_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "(x, sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(rgb, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "(rgb, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_222": {
                "variable": {
                    "value": "self.layers_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.fc_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.fc_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.fc_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, view)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.fc_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.fc_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.layers_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.fc_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, view)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "self.dim_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "256 + self.dim_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "(rgb, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(feat, direction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(feat, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "self.dim_dir + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "in_features": {
                    "value": "self.dim_dir + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_342": {
                "tensors": {
                    "value": "(rgb, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "self.dim_xyz + 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "(xyz, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "self.dim_xyz + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "self.dim_xyz + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/neural-rendering/nerf/nerf_helpers.py": {
        "torch": {
            "meshgrid_39": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "indexing": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cumprod_58": {
                "variable": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "roll_60": {
                "variable": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumprod(tensor, dim)",
                            "Call"
                        ],
                        [
                            "torch.roll(cumprod, 1, dim)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "stack_98": {
                "variable": {
                    "value": "directions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(ii - width * 0.5) / focal_length, -(jj - height * 0.5) / focal_length, -torch.ones_like(ii)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "ray_directions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "directions[..., None, :] * tform_cam2world[:3, :3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "rays_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o0, o1, o2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "rays_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d0, d1, d2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_230": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights / weights.sum(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weights / torch.sum(weights, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(cdf[..., :1]), cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_244": {
                "variable": {
                    "value": "below",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_245": {
                "variable": {
                    "value": "above",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cdf.shape[-1] - 1) * torch.ones_like(inds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_246": {
                "variable": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(below, above)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_253": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "denom < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(denom)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ],
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_267": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights / weights.sum(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weights / torch.sum(weights, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(cdf[..., :1]), cdf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_289": {
                "variable": {
                    "value": "below",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(inds - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_290": {
                "variable": {
                    "value": "above",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cdf.shape[-1] - 1) * torch.ones_like(inds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_291": {
                "variable": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(below, above)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_294": {
                "variable": {
                    "value": "cdf_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cdf.unsqueeze(1).expand(matched_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((below, above), -1)",
                            "Call"
                        ],
                        [
                            "torch.stack((below, above), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_295": {
                "variable": {
                    "value": "bins_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bins.unsqueeze(1).expand(matched_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((below, above), -1)",
                            "Call"
                        ],
                        [
                            "torch.stack((below, above), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_298": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "denom < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(denom)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ],
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_369": {
                "variable": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_370": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_10": {
                "input": {
                    "value": "img_src",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "img_tgt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_141": {
                "variable": {
                    "value": "frequency_bands",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2.0 ** 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0 ** (num_encoding_functions - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_encoding_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "cdf_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cdf[i][ind] for (i, ind) in enumerate(inds_flat)]",
                            "ListComp"
                        ],
                        [
                            "[cdf_flat[i] * valid_mask[i] for i in range(len(cdf_flat))]",
                            "ListComp"
                        ],
                        [
                            "[cdf_chunk.reshape([1] + list(orig_inds_shape[1:])) for cdf_chunk in cdf_flat]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_235": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_238": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(cdf.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_274": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_279": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(cdf.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_91": {
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tform_cam2world.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tform_cam2world.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_94": {
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tform_cam2world.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tform_cam2world.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor] if include_input else []",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_207": {
                "condition": {
                    "value": "ind >= cdf.shape[1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(ind)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_211": {
                "condition": {
                    "value": "ind >= cdf.shape[1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(cdf.shape[1] - 1) * torch.ones_like(ind)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchsearchsorted.searchsorted(cdf.contiguous(), u.contiguous(), side='right')",
                            "Call"
                        ],
                        [
                            "torchsearchsorted.searchsorted(cdf, u, side='right')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_253": {
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ],
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_266": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 4)",
                            "Call"
                        ],
                        [
                            "weights + 1e-05",
                            "BinOp"
                        ],
                        [
                            "weights + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_289": {
                "input": {
                    "value": "inds - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_298": {
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ],
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_133": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "num_encoding_functions - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_encoding_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_207": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_231": {
                "input": {
                    "value": "cdf[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_245": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchsearchsorted.searchsorted(cdf.contiguous(), u.contiguous(), side='right')",
                            "Call"
                        ],
                        [
                            "torchsearchsorted.searchsorted(cdf, u, side='right')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "cdf[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_290": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchsearchsorted.searchsorted(cdf.contiguous(), u.contiguous(), side='right')",
                            "Call"
                        ],
                        [
                            "torchsearchsorted.searchsorted(cdf, u, side='right')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_211": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/nerf/train_utils.py": {
        "torch": {
            "cat_26": {
                "variable": {
                    "value": "radiance_field",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[network_fn(batch.to(network_device)).to(nerf_device) for batch in batches]",
                            "ListComp"
                        ],
                        [
                            "[network_fn(batch) for batch in batches]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_52": {
                "variable": {
                    "value": "t_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "getattr(options.nerf, mode).num_coarse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ro.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ro.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ro, rd, near, far)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, embedded_dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mids, z_vals[..., -1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_vals[..., :1], mids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_71": {
                "variable": {
                    "value": "t_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_vals.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ro.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ro.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_116": {
                "variable": {
                    "value": "(z_vals, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((z_vals, z_samples), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "rays",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rays, viewdirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "radiance_field",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fine_weight * 2 * radiance_field, coarse_weight * 2 * coarse_radiance_field)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "radiance_field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "radiance_field.reshape(list(pts.shape[:-1]) + [radiance_field.shape[-1]])",
                            "Call"
                        ],
                        [
                            "run_network(model_coarse, pts, ray_batch, getattr(options.nerf, mode).chunksize, encode_position_fn, encode_direction_fn)",
                            "Call"
                        ],
                        [
                            "run_network(model_fine, pts, ray_batch, getattr(options.nerf, mode).chunksize, encode_position_fn, encode_direction_fn, network_device=fine_device)",
                            "Call"
                        ],
                        [
                            "radiance_field.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((fine_weight * 2 * radiance_field, coarse_weight * 2 * coarse_radiance_field), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(radiance_field, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(z_vals, z_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_209": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_210": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_213": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_214": {
                "input": {
                    "value": "rd[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/nerf/volume_rendering_utils.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "one_e_10",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[10000000000.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ray_directions.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ray_directions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(depth_values[..., 1:] - depth_values[..., :-1], one_e_10.expand(depth_values[..., :1].shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "sigma_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field[..., 3] + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_39": {
                "input": {
                    "value": "-sigma_a * dists",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_48": {
                "input": {
                    "value": "1e-10 * torch.ones_like(depth_map)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "radiance_field[..., 3].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "radiance_field.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "radiance_field.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights * depth_values",
                            "BinOp"
                        ],
                        [
                            "depth_map.sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/neural-rendering/render_nerf.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "configargs.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "render_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "render_poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(render_poses)",
                            "Call"
                        ],
                        [
                            "render_poses.float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_88": {
                "device": {
                    "value": "configargs.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/test_nerf.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "configargs.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "render_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "render_poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(render_poses)",
                            "Call"
                        ],
                        [
                            "render_poses.float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[..., :3] * images[..., -1:] + (1.0 - images[..., -1:])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_51": {
                "device": {
                    "value": "configargs.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/neural-rendering/tiny_nerf.py": {
        "torch": {
            "linspace_51": {
                "variable": {
                    "value": "depth_values",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "near_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "float"
                        ]
                    ]
                },
                "end": {
                    "value": "far_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6.0",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "sigma_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "one_e_10",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[10000000000.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ray_origins.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ray_origins.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(depth_values[..., 1:] - depth_values[..., :-1], one_e_10.expand(depth_values[..., :1].shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "radiance_field_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "radiance_field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radiance_field_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(predictions, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "unflattened_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(query_points.shape[:-1]) + [4]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_214": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "tform_cam2world",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tform_cam2world",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['poses']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(tform_cam2world).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "focal_length",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "focal_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['focal']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(focal_length).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "testimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testimg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(testimg).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[:100, ..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_261": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 + 3 * 2 * num_encoding_functions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_217": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9458",
                            "int"
                        ]
                    ]
                }
            },
            "mse_loss_279": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_one_iter_of_tinynerf(height, width, focal_length, target_tform_cam2world, near_thresh, far_thresh, depth_samples_per_ray, encode, get_minibatches, chunksize, model, num_encoding_functions)",
                            "Call"
                        ],
                        [
                            "run_one_iter_of_tinynerf(height, width, focal_length, testpose, near_thresh, far_thresh, depth_samples_per_ray, encode, get_minibatches, chunksize, model, num_encoding_functions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[target_img_idx].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_105": {
                "input": {
                    "value": "-sigma_a * dists",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_290": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_one_iter_of_tinynerf(height, width, focal_length, target_tform_cam2world, near_thresh, far_thresh, depth_samples_per_ray, encode, get_minibatches, chunksize, model, num_encoding_functions)",
                            "Call"
                        ],
                        [
                            "run_one_iter_of_tinynerf(height, width, focal_length, testpose, near_thresh, far_thresh, depth_samples_per_ray, encode, get_minibatches, chunksize, model, num_encoding_functions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[target_img_idx].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_292": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.mse_loss(rgb_predicted, target_img)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.mse_loss(rgb_predicted, target_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_59": {
                "*size": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(ray_origins.shape[:-1]) + [num_samples]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "paper-experiments/neural-rendering/train_nerf.py": {
        "torch": {
            "SummaryWriter_171": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.experiment.logdir, cfg.experiment.id)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.experiment.randomseed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "configargs.load_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_276": {
                "variable": {
                    "value": "coarse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_coarse[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_ray_values[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_114": {
                "device": {
                    "value": "configargs.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "cache_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "datafile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(train_paths)",
                            "Call"
                        ],
                        [
                            "np.random.choice(validation_paths)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_244": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meshgrid_xy(torch.arange(H).to(device), torch.arange(W).to(device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_281": {
                "variable": {
                    "value": "fine_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_fine[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_ray_values[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[..., :3] * images[..., -1:] + (1.0 - images[..., -1:])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses[:, :3, :4]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_423": {
                "obj": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iter': i, 'model_coarse_state_dict': model_coarse.state_dict(), 'model_fine_state_dict': None if not model_fine else model_fine.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss, 'psnr': psnr}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(logdir, 'checkpoint' + str(i).zfill(5) + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[..., :3] * images[..., -1:] + (1.0 - images[..., -1:])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses[:, :3, :4]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(poses)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_335": {
                "variable": {
                    "value": "cache_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "datafile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(train_paths)",
                            "Call"
                        ],
                        [
                            "np.random.choice(validation_paths)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_245": {
                "start": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "paper-experiments/recommender-systems/dfa_models.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(input_dim, 1, bias=False) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_49": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[torch.nn.Parameter(torch.zeros((input_dim,))) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_dims[-1] + self.embed_output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l1, h_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.atten_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "atten_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.self_attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.MultiheadAttention(atten_embed_dim, num_heads, dropout=dropouts[0]) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.attn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.atten_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_165": {
                "variable": {
                    "value": "cross_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atten_x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "cross_term.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "cross_term.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dfa_self_attns[i](cross_term)",
                            "Call"
                        ],
                        [
                            "cross_term.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "cross_term + V_res",
                            "BinOp"
                        ],
                        [
                            "F.relu(cross_term).contiguous().view(-1, self.atten_output_dim)",
                            "Call"
                        ],
                        [
                            "self.dfa_cross(cross_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_85": {
                "input": {
                    "value": "x.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "p.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.V_res_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "atten_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "input": {
                    "value": "x.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_201": {
                "input": {
                    "value": "x.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "data": {
                    "value": "torch.zeros((input_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiheadAttention_132": {
                "embed_dim": {
                    "value": "atten_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropouts[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}