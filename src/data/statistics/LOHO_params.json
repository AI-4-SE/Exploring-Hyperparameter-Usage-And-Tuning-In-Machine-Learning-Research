{
    "datasets/ffhq.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "raw_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FFHQ(BASE_DIR='/home/ubuntu/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "hair_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hair_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[0, ...]",
                            "Subscript"
                        ],
                        [
                            "hair_mask.numpy()",
                            "Call"
                        ],
                        [
                            "mask[0, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(hair_mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "face_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[-1, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(face_mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_path).convert('RGB')",
                            "Call"
                        ],
                        [
                            "transforms.Resize((size, size))(mask)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(mask)",
                            "Call"
                        ],
                        [
                            "Image.open(mask_path).convert('RGB')",
                            "Call"
                        ],
                        [
                            "transforms.Resize((1024, 1024))(mask)",
                            "Call"
                        ],
                        [
                            "transforms.Resize((size, size))(mask)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(mask)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask, 0, keepdim=False)",
                            "Call"
                        ],
                        [
                            "(mask > 0.001).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "hair_mask_erode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.ndimage.binary_erosion(hair_mask, iterations=5)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(hair_mask_erode, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/graphonomy_process.py": {
        "torch": {
            "interpolate_14": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img, scale_factor=self.scale, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img * 2.0 / 255.0 - 1",
                            "BinOp"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(img, axis=0)",
                            "Call"
                        ],
                        [
                            "self.rgb2bgr(img)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.flip(img, [-1])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img, scale_factor=self.scale, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img * 2.0 / 255.0 - 1",
                            "BinOp"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(img, axis=0)",
                            "Call"
                        ],
                        [
                            "self.rgb2bgr(img)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.flip(img, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_51": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img, scale_factor=self.scale, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "img * 2.0 / 255.0 - 1",
                            "BinOp"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(img, axis=0)",
                            "Call"
                        ],
                        [
                            "self.rgb2bgr(img)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "torch.flip(img, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "loho.py": {
        "torch": {
            "load_189": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "graphonomy_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoints/inference.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "Adam_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "noise_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "unsqueeze_264": {
                "variable": {
                    "value": "HM_G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "HM_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HM_G.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(HM_G, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "FM_G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FM_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(FM_G, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_37": {
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_196": {
                "f": {
                    "value": "styleganv2_ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoints/stylegan2-ffhq-config-f.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "stack_366": {
                "variable": {
                    "value": "norm_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "norm_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(norm_vector)",
                            "Call"
                        ],
                        [
                            "torch.transpose(norm_vector, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_367": {
                "variable": {
                    "value": "norm_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(norm_vector)",
                            "Call"
                        ],
                        [
                            "torch.transpose(norm_vector, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_283": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask2 >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(mask2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(mask2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_360": {
                "variable": {
                    "value": "g_S2_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_S2[0, w_pos, :].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_284": {
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HM_G",
                            "variable"
                        ],
                        [
                            "HM_2 + ignore_region * HM_G",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask2 >= 1, torch.ones_like(mask2), torch.zeros_like(mask2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_284": {
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HM_G",
                            "variable"
                        ],
                        [
                            "HM_2 + ignore_region * HM_G",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask2 >= 1, torch.ones_like(mask2), torch.zeros_like(mask2))",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_362": {
                "input": {
                    "value": "g_L[0, w_pos, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "g_S2_hat.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_373": {
                "input": {
                    "value": "g_S2[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_374": {
                "input": {
                    "value": "g_S3[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_375": {
                "input": {
                    "value": "g_L[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_377": {
                "input": {
                    "value": "adjusted_g_L[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_380": {
                "input": {
                    "value": "g_L[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "g_S2[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_383": {
                "input": {
                    "value": "adjusted_g_L[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "g_S2[0, idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "losses/appearance_loss.py": {
        "torch": {
            "Upsample_81": {
                "variable": {
                    "value": "upsample2d",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "256 / H",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "on_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_x[0, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "appearance_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_x[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "on_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_x_hat[0, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "appearance_x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_x_hat[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_x[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "feat_x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_x_hat[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "losses/custom_loss.py": {
        "torch": {
            "MSELoss_5": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "x_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[Nx, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "y_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[Nx, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_mask(x, mask)",
                            "Call"
                        ],
                        [
                            "mask.repeat(1, Cx, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, scale_factor=Hx / Hm, mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[Nx, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "sum_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff * mask_reshape",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "norm_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(mask, [Nx, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_diff / (norm_count + 1.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_mask(x, mask)",
                            "Call"
                        ],
                        [
                            "mask.repeat(1, Cx, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, scale_factor=Hx / Hm, mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "Hx / Hm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_39": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshape - y_reshape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_24": {
                "variable": {
                    "value": "loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "losses/noise_loss.py": {
        "torch": {
            "roll_14": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_13": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "losses/style_loss.py": {
        "torch": {
            "mm_37": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N * C, H * W)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "upsample2d(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_104": {
                "variable": {
                    "value": "upsample2d",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "256 / H",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/deeplab_xception.py": {
        "torch": {
            "pad_46": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(pad_beg, pad_end, pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.depthwise_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.pointwise_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.depthwise_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_169": {
                "variable": {
                    "value": "self.pointwise_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_204": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_281": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_362": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_366": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_703": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_705": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_712": {
                "variable": {
                    "value": "self.concat_projection_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_713": {
                "variable": {
                    "value": "self.concat_projection_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_716": {
                "variable": {
                    "value": "self.feature_projection_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_717": {
                "variable": {
                    "value": "self.feature_projection_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_719": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Decoder_module(304, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_720": {
                "variable": {
                    "value": "self.semantic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_730": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_732": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_743": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "fixed_padding(x, self.depthwise.kernel_size[0], rate=self.depthwise.dilation[0])",
                            "Call"
                        ],
                        [
                            "self.depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.block13(x)",
                            "Call"
                        ],
                        [
                            "self.block14(x)",
                            "Call"
                        ],
                        [
                            "self.block15(x)",
                            "Call"
                        ],
                        [
                            "self.block16(x)",
                            "Call"
                        ],
                        [
                            "self.block17(x)",
                            "Call"
                        ],
                        [
                            "self.block18(x)",
                            "Call"
                        ],
                        [
                            "self.block19(x)",
                            "Call"
                        ],
                        [
                            "self.block20(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_features.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.atrous_convolution(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "fixed_padding(x, self.depthwise.kernel_size[0], rate=self.depthwise.dilation[0])",
                            "Call"
                        ],
                        [
                            "self.depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_bn(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.block13(x)",
                            "Call"
                        ],
                        [
                            "self.block14(x)",
                            "Call"
                        ],
                        [
                            "self.block15(x)",
                            "Call"
                        ],
                        [
                            "self.block16(x)",
                            "Call"
                        ],
                        [
                            "self.block17(x)",
                            "Call"
                        ],
                        [
                            "self.block18(x)",
                            "Call"
                        ],
                        [
                            "self.block19(x)",
                            "Call"
                        ],
                        [
                            "self.block20(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.atrous_convolution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.skipbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_277": {
                "variable": {
                    "value": "self.skipbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.block2_lastconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.relu, SeparableConv2d_same(planes, planes, 3, stride=2, dilation=dilation)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_981": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_982": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_706": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_707": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_708": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_709": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/deeplab_xception_transfer.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.target_skip_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(input_channels, input_channels, kernel_size=1), nn.ReLU(True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "upsample_143": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_features.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.target_skip_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(input_channels, input_channels, kernel_size=1), nn.ReLU(True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "upsample_306": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_314": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_features.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_350": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_405": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_features.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph1.squeeze(0), source_2_target_graph1_v5.squeeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph2, source_2_target_graph2_v5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph3, source_2_target_graph3_v5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "upsample_495": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_500": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(target, p=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.normalize(source, p=2, dim=-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_504": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "upsample_603": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_605": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_611": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_features.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_620": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_652": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph1.squeeze(0), source_2_target_graph1_v5.squeeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_666": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph2, source_2_target_graph2_v5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph, source_2_target_graph3, source_2_target_graph3_v5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "upsample_690": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4, x5), dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.concat_projection_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=low_level_features.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_features), dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.target_skip_conv(x)",
                            "Call"
                        ],
                        [
                            "x + graph",
                            "BinOp"
                        ],
                        [
                            "self.semantic(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=input.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_695": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(target, p=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.normalize(source, p=2, dim=-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_699": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_505": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_700": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(F.normalize(target, p=2, dim=-1), F.normalize(source, p=2, dim=-1).transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "F.softmax(sim, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_501": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_502": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_502": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_696": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_697": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_697": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/gcn.py": {
        "torch": {
            "randn_303": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.pre_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels, nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels, hidden_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.pre_fea",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "weight_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input1, self.pre_fea)",
                            "Call"
                        ],
                        [
                            "F.softmax(fea_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input1, self.pre_fea)",
                            "Call"
                        ],
                        [
                            "F.softmax(fea_node, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "graph_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(fea_node.transpose(1, 2), weight_node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.pre_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels, nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels, hidden_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.pre_fea_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(source_nodes, source_nodes), nn.LeakyReLU(True), nn.Linear(source_nodes, nodes), nn.LeakyReLU(True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.pre_fea",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "weight_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input1, self.pre_fea)",
                            "Call"
                        ],
                        [
                            "F.softmax(fea_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input1, self.pre_fea)",
                            "Call"
                        ],
                        [
                            "F.softmax(fea_node, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "graph_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(fea_node.transpose(1, 2), weight_node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.node_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels + hidden_layers, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_layers, output_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "new_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res_feature_after_view1, input1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((res_feature_after_view1, input1), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.node_fea",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_fea, self.node_fea)",
                            "Call"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "new_node1 + new_node2",
                            "BinOp"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_fea, self.node_fea)",
                            "Call"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "new_node1 + new_node2",
                            "BinOp"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.node_fea_for_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(input_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_179": {
                "variable": {
                    "value": "self.node_fea_for_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_layers, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_layers, output_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "new_node1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res_feature_after_view1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_feature_after_view.unsqueeze(2).expand(batch, hi * wi, nodes, channeli)",
                            "Call"
                        ],
                        [
                            "res_feature_after_view.unsqueeze(2).expand(batch, hi * wi, nodes, channeli)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.node_fea_for_res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "new_node2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.view(n, c, h * w)",
                            "Call"
                        ],
                        [
                            "input1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1).expand(batch, hi * wi, nodes, hidden)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.node_fea_for_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "variable": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_fea, self.node_fea)",
                            "Call"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "new_node1 + new_node2",
                            "BinOp"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "variable": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_fea, self.node_fea)",
                            "Call"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ],
                        [
                            "new_node1 + new_node2",
                            "BinOp"
                        ],
                        [
                            "new_node.view(batch, hi * wi, nodes)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_node, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_244": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm_trans_adj(adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_290": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adj",
                            "Attribute"
                        ],
                        [
                            "graph.normalize_adj_torch(F.relu(self.adj_mat))",
                            "Call"
                        ],
                        [
                            "F.relu(adj)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adj",
                            "Attribute"
                        ],
                        [
                            "graph.normalize_adj_torch(F.relu(self.adj_mat))",
                            "Call"
                        ],
                        [
                            "F.relu(adj)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adj",
                            "Attribute"
                        ],
                        [
                            "graph.normalize_adj_torch(F.relu(self.adj_mat))",
                            "Call"
                        ],
                        [
                            "F.relu(adj)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_171": {
                "input": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_node, new_weight)",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 3).contiguous().view(res_feature.size())",
                            "Call"
                        ],
                        [
                            "torch.matmul(new_node, new_weight)",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 3).contiguous().view(res_feature.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_228": {
                "input": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(new_node, new_weight)",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 3).contiguous().view(res_feature.size())",
                            "Call"
                        ],
                        [
                            "torch.matmul(new_node, new_weight)",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 3).contiguous().view(res_feature.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_250": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(end_nodes, begin_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_252": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_272": {
                "variable": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(adj, support)",
                            "Call"
                        ],
                        [
                            "support",
                            "variable"
                        ],
                        [
                            "torch.matmul(adj1, support)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "self.adj_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(output, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output1.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "input": {
                    "value": "fea_node.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input1, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input1, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "input": {
                    "value": "fea_node.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input1, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(input1, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_283": {
                "input": {
                    "value": "self.adj_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_42": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(adj, support)",
                            "Call"
                        ],
                        [
                            "support",
                            "variable"
                        ],
                        [
                            "torch.matmul(adj1, support)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_278": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(adj, support)",
                            "Call"
                        ],
                        [
                            "support",
                            "variable"
                        ],
                        [
                            "torch.matmul(adj1, support)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "source_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "source_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "source_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_96": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/graph.py": {
        "torch": {
            "diag_828": {
                "variable": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(rowsum, -0.5).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_829": {
                "input": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.diags(d_inv_sqrt)",
                            "Call"
                        ],
                        [
                            "torch.diag(d_inv_sqrt)",
                            "Call"
                        ],
                        [
                            "torch.diag(d_inv_sqrt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "nx.adjacency_matrix(nx.from_dict_of_lists(adj))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_815": {
                "variable": {
                    "value": "new_r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "adj.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_821": {
                "variable": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(rowsum, -0.5).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_822": {
                "input": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.diags(d_inv_sqrt)",
                            "Call"
                        ],
                        [
                            "torch.diag(d_inv_sqrt)",
                            "Call"
                        ],
                        [
                            "torch.diag(d_inv_sqrt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj[0, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_827": {
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(rowsum, -0.5).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_820": {
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(rowsum, -0.5).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ],
                        [
                            "rowsum.pow_(-0.5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks/graphonomy_inference.py": {
        "torch": {
            "where_59": {
                "variable": {
                    "value": "hair_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_61": {
                "variable": {
                    "value": "face_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 13",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_84": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "adj2_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "graph.cihp2pascal_nlp_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_176": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.new('RGB', (len(mask[i, 0]), len(mask[i])))",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, -1, 1)",
                            "Call"
                        ],
                        [
                            "(img + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "img * 255",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "tail_list_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * 20",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, inputs_f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_61": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "graph.preprocess_adj(graph.pascal_graph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "cihp_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.preprocess_adj(graph.cihp_graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_245": {
                "input": {
                    "value": "outputs_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_final + outputs",
                            "BinOp"
                        ],
                        [
                            "outputs.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_238": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((num_images, h, w, 3), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "net.forward(inputs, adj1_test.cuda(), adj3_test.cuda(), adj2_test.cuda())",
                            "Call"
                        ],
                        [
                            "(outputs[0] + flip(flip_cihp(outputs[1]), dim=-1)) / 2",
                            "BinOp"
                        ],
                        [
                            "outputs.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.upsample(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/lpips/__init__.py": {
        "torch": {
            "sqrt_63": {
                "variable": {
                    "value": "norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/lpips/base_model.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_49": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks/lpips/dist_model.py": {
        "torch": {
            "Adam_126": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_134": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_201": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_166": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/lpips/networks_basic.py": {
        "torch": {
            "Sequential_222": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_263": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_35": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_285": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.mean((in0 - in1) ** 2, dim=1).view(N, 1, X, Y), dim=2).view(N, 1, 1, Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mask, axis=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=(H, W), mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mask, axis=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=(H, W), mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mask, axis=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=(H, W), mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_235": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_241": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_286": {
                "input": {
                    "value": "torch.mean((in0 - in1) ** 2, dim=1).view(N, 1, X, Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_287": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/lpips/pretrained_networks.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/op/fused_act.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_89": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "networks/op/upfirdn2d.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_186": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_101": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "networks/style_gan_2.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_298": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_352": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_417": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_464": {
                "variable": {
                    "value": "latent_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_662": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_668": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_681": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_153": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_243": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_258": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_523": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_548": {
                "variable": {
                    "value": "path_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_19": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_138": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_223": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_273": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_298": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_352": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_455": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_424": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_like_544": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "skip",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_19": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_459": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "networks/vgg_activations.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(vgg16.features)",
                            "Call"
                        ],
                        [
                            "list(vgg19.features)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(vgg16.features)",
                            "Call"
                        ],
                        [
                            "list(vgg19.features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.relu3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "25088",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.dropout7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2622",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2_inversion.py": {
        "torch": {
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "w_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_load_pickle(w_latent_path)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(w_latent).cuda()",
                            "Call"
                        ],
                        [
                            "w_latent.repeat(1, styleganv2_gen.n_latent, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_141": {
                "variable": {
                    "value": "noise_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "styleganv2_ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/image_utils.py": {
        "torch": {
            "unsqueeze_31": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "listOfVariables",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(var, axis=0)",
                            "Call"
                        ],
                        [
                            "makeMask(var)",
                            "Call"
                        ],
                        [
                            "var[0, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "Image.fromarray(var)",
                            "Call"
                        ],
                        [
                            "makeImage(var)",
                            "Call"
                        ],
                        [
                            "var[0]",
                            "Subscript"
                        ],
                        [
                            "Image.fromarray(var)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizer_utils.py": {
        "torch": {
            "is_tensor_9": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_21": {
                "module": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "li_variables",
                            "variable"
                        ],
                        [
                            "DataParallel(var) if var else None",
                            "IfExp"
                        ],
                        [
                            "li_variables",
                            "variable"
                        ],
                        [
                            "var.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}