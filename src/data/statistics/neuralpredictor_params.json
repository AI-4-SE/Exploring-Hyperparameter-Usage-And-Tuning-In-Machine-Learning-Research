{
    "dataset.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "div_10": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rowsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj.sum(2, keepdim=True).repeat(1, 1, last_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_15": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.sum(1)",
                            "Call"
                        ],
                        [
                            "(output1 + output2) / 2",
                            "BinOp"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "layer(out, adj_with_diag)",
                            "Call"
                        ],
                        [
                            "graph_pooling(out, numv)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "num_vertices.unsqueeze(-1).expand_as(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "output1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(norm_adj, torch.matmul(inputs, self.weight1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inv_norm_adj, torch.matmul(inputs, self.weight2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gcn_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "144",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_60": {
                "n": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Nb101Dataset(split=args.train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Nb101Dataset(split=args.eval_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_72": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_22": {
                "input": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Nb101Dataset.denormalize(predict.detach()) * scale",
                            "BinOp"
                        ],
                        [
                            "Nb101Dataset.denormalize(predict) * scale",
                            "BinOp"
                        ],
                        [
                            "net(batch)",
                            "Call"
                        ],
                        [
                            "net(batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Nb101Dataset.denormalize(target) * scale",
                            "BinOp"
                        ],
                        [
                            "Nb101Dataset.denormalize(target) * scale",
                            "BinOp"
                        ],
                        [
                            "batch['val_acc']",
                            "Subscript"
                        ],
                        [
                            "batch['val_acc']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}