{
    "pysot/core/xcorr.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, 0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, kernel, groups=batch * channel)",
                            "Call"
                        ],
                        [
                            "out.view(batch, channel, out.size(2), out.size(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "po",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[i]",
                            "Subscript"
                        ],
                        [
                            "px.view(1, -1, px.size()[1], px.size()[2])",
                            "Call"
                        ],
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel[i]",
                            "Subscript"
                        ],
                        [
                            "pk.view(1, -1, pk.size()[1], pk.size()[2])",
                            "Call"
                        ],
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "kernel.size()[0]",
                            "Subscript"
                        ],
                        [
                            "kernel.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, batch * channel, x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.view(batch * channel, 1, kernel.size(2), kernel.size(3))",
                            "Call"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch * channel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "po",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[i]",
                            "Subscript"
                        ],
                        [
                            "px.view(1, -1, px.size()[1], px.size()[2])",
                            "Call"
                        ],
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel[i]",
                            "Subscript"
                        ],
                        [
                            "pk.view(1, -1, pk.size()[1], pk.size()[2])",
                            "Call"
                        ],
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/datasets/dataset.py": {
        "torch": {}
    },
    "pysot/models/backbone/alexnet.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[0], configs[1], kernel_size=11, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[0], configs[1], kernel_size=11, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[1], configs[2], kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[2], configs[3], kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[3], configs[4], kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(configs[4], configs[5], kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "configs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "configs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "configs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "configs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "configs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "configs[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "configs[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/backbone/mobile_v2.py": {
        "torch": {
            "Sequential_11": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_121": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/backbone/resnet_atrous.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "dd",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dd",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=3, stride=stride, bias=False, padding=padding, dilation=dd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dd",
                            "variable"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/head/attention.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_41": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_58": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_120": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_124": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_128": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/head/conv_module.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False if self.with_norm else True",
                            "IfExp"
                        ],
                        [
                            "'auto'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels if self.activate_last else in_channels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/models/head/dcn/deform_conv.py": {
        "torch": {
            "zeros_like_156": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_332": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_334": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/models/head/dcn/deform_pool.py": {
        "torch": {
            "zeros_like_59": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size, self.out_size)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size, self.out_size)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_212": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/head/dcn/setup.py": {
        "torch": {}
    },
    "pysot/models/head/detection.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.tail_det",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, fc_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.tail_det_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/head/mask.py": {
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "self.v0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_76": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.post0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.post1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.post2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_175": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels if i == 0 else self.conv_out_channels",
                            "IfExp"
                        ],
                        [
                            "self.in_channels if i == 0 else self.conv_out_channels",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up_scale * 2",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.up_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "logits_in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_241": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_280": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_292": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes * self.out_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classify(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.roi_pool_m(x, roi_list)",
                            "Call"
                        ],
                        [
                            "self.convs[i](x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_82": {
                "input": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[16, 16, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_83": {
                "input": {
                    "value": "f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[8, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_84": {
                "input": {
                    "value": "f[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[4, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "upsample_89": {
                "input": {
                    "value": "self.h2(out) + self.v2(p2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(31, 31)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_90": {
                "input": {
                    "value": "self.h1(out) + self.v1(p1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(61, 61)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_91": {
                "input": {
                    "value": "self.h0(out) + self.v0(p0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(127, 127)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_227": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "upsample_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.num_convs > 0 else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_233": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/head/rpn.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.template_cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_in * cls_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.template_loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_in * loc_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.search_cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.search_loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.loc_adjust",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "loc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * anchor_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "loc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * anchor_num",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden, kernel_size=kernel_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv_search",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden, kernel_size=kernel_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden, hidden, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.cls_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(len(in_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.loc_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(len(in_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "cls_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cls_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "loc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loc_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "len(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "len(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/init_weight.py": {
        "torch": {}
    },
    "pysot/models/loss.py": {
        "torch": {
            "index_select_15": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_16": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_50": {
                "variable": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_51": {
                "variable": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "soft_margin_loss_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_74": {
                "variable": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "variable": {
                    "value": "intxn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_110": {
                "variable": {
                    "value": "bboxes_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(bboxes_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "bboxes_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_111": {
                "variable": {
                    "value": "bboxes_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(bboxes_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(bboxes_gt, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "bboxes_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(1).nonzero().squeeze().cuda()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "mask_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "bbox_weight.data.eq(1).nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_114": {
                "variable": {
                    "value": "bbox_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(bboxes_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "bboxes_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "bboxes_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(bboxes_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(bboxes_gt, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "bboxes_gt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_18": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_85": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff * loss_weight",
                            "BinOp"
                        ],
                        [
                            "F.soft_margin_loss(masks_pred, masks_gt)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(masks_pred, masks_gt, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss[index[1]])",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(masks_pred, masks_gt)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(top_k * loss.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss[index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_pred, 0, pos)",
                            "Call"
                        ],
                        [
                            "masks_pred.view(-1, h * w)",
                            "Call"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ],
                        [
                            "masks_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(masks_gt, 0, pos)",
                            "Call"
                        ],
                        [
                            "Variable(masks_gt.view(-1, h * w), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ],
                        [
                            "masks_gt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_100": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intxn / (union + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "iou > 0.7",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/model_builder.py": {
        "torch": {
            "log_softmax_92": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_head(zf, xf[2:])",
                            "Call"
                        ],
                        [
                            "cls.view(b, 2, a2 // 2, h, w)",
                            "Call"
                        ],
                        [
                            "cls.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(cls, dim=4)",
                            "Call"
                        ],
                        [
                            "self.rpn_head(zf[2:], xf[2:])",
                            "Call"
                        ],
                        [
                            "cls",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(cfg.TRAIN.BATCH_SIZE).repeat(cfg.TRAIN.ROI_PER_IMG).reshape(cfg.TRAIN.BATCH_SIZE * cfg.TRAIN.ROI_PER_IMG, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, torch.stack(select_roi_list).view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_140": {
                "tensors": {
                    "value": "select_roi_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_mask_target(rois, cls_ind, search_mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/models/neck/__init__.py": {
        "torch": {}
    },
    "pysot/models/neck/enhance.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.pams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.cam_cals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.cam_uses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.deform_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/neck/feature_fusion.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.xcorr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat in enumerate(m_feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "feat in enumerate(b_feats[1:], start=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/models/neck/neck.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/tracker/base_tracker.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[int(context_ymin):int(context_ymax + 1), int(context_xmin):int(context_xmax + 1), :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(im_patch, (model_sz, model_sz))",
                            "Call"
                        ],
                        [
                            "im_patch.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "im_patch[np.newaxis, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "im_patch.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_patch)",
                            "Call"
                        ],
                        [
                            "im_patch.cuda()",
                            "Call"
                        ],
                        [
                            "te_im[int(context_ymin):int(context_ymax + 1), int(context_xmin):int(context_xmax + 1), :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pysot/tracker/siammask_tracker.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "rpn_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([0]).unsqueeze(0), torch.Tensor(rpn_roi).unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "bbox_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([0]).unsqueeze(0), torch.Tensor(bbox_roi).unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/tracker/siamrpn_tracker.py": {
        "torch": {
            "softmax_57": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score.permute(1, 2, 3, 0).contiguous().view(2, -1).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=1).data[:, 1].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_score(outputs['cls'])",
                            "Call"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/utils/distributed.py": {
        "torch": {
            "device_count_84": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_85": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_54": {
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict().values()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_66": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._all_buffers()",
                            "Call"
                        ],
                        [
                            "b / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/utils/lr_scheduler.py": {
        "torch": {
            "SGD_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net().parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/utils/mask_target_builder.py": {
        "torch": {
            "cat_101": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "keep_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_144": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cx - width / 2, cy - height / 2, cx + width / 2, cy + height / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_rois, gt_box)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fg_inds.repeat(times), _rand_choice_idx(fg_inds, mod))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bg_inds.repeat(times), _rand_choice_idx(bg_inds, mod))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(boxes)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(query_boxes)",
                            "Call"
                        ],
                        [
                            "query_boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "batch_select_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch_select_rois, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(crop_masks, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_296": {
                "variable": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.anchors",
                            "Attribute"
                        ],
                        [
                            "np.stack([(x1 + x2) * 0.5, (y1 + y2) * 0.5, x2 - x1, y2 - y1], 1)",
                            "Call"
                        ],
                        [
                            "np.tile(anchor, score_size * score_size).reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor).cuda()",
                            "Call"
                        ],
                        [
                            "anchor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_315": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.min(cx, other=torch.tensor(boundary[1] - 1).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_317": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.min(cy, other=torch.tensor(boundary[0] - 1).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_319": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(10).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.min(width, other=torch.tensor(boundary[1] - 1).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_321": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(10).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.min(height, other=torch.tensor(boundary[0] - 1).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_302": {
                "input": {
                    "value": "delta[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_303": {
                "input": {
                    "value": "delta[:, 3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "data": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_193": {
                "input": {
                    "value": "boxes[:, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_194": {
                "input": {
                    "value": "boxes[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_195": {
                "input": {
                    "value": "boxes[:, 3:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "boxes[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_316": {
                "input": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_bbox[:, 0, :] + center_pos[0]",
                            "BinOp"
                        ],
                        [
                            "_bbox_clip(cx, cy, width, height, [cfg.TRAIN.SEARCH_SIZE, cfg.TRAIN.SEARCH_SIZE])",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0).float().cuda(), other=torch.min(cx, other=torch.tensor(boundary[1] - 1).float().cuda()))",
                            "Call"
                        ],
                        [
                            "cx",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(boundary[1] - 1).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_318": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_bbox[:, 1, :] + center_pos[1]",
                            "BinOp"
                        ],
                        [
                            "_bbox_clip(cx, cy, width, height, [cfg.TRAIN.SEARCH_SIZE, cfg.TRAIN.SEARCH_SIZE])",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0).float().cuda(), other=torch.min(cy, other=torch.tensor(boundary[0] - 1).float().cuda()))",
                            "Call"
                        ],
                        [
                            "cy",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(boundary[0] - 1).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_320": {
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_bbox[:, 2, :]",
                            "Subscript"
                        ],
                        [
                            "_bbox_clip(cx, cy, width, height, [cfg.TRAIN.SEARCH_SIZE, cfg.TRAIN.SEARCH_SIZE])",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(10).float().cuda(), other=torch.min(width, other=torch.tensor(boundary[1] - 1).float().cuda()))",
                            "Call"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(boundary[1] - 1).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_322": {
                "input": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_bbox[:, 3, :]",
                            "Subscript"
                        ],
                        [
                            "_bbox_clip(cx, cy, width, height, [cfg.TRAIN.SEARCH_SIZE, cfg.TRAIN.SEARCH_SIZE])",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(10).float().cuda(), other=torch.min(height, other=torch.tensor(boundary[0] - 1).float().cuda()))",
                            "Call"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(boundary[0] - 1).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "boundary[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "boundary[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "data": {
                    "value": "boundary[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "data": {
                    "value": "boundary[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pysot/utils/model_load.py": {
        "torch": {
            "current_device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "current_device_72": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_path",
                            "Method Argument"
                        ],
                        [
                            "ckpt_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "current_device_85": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_path",
                            "Method Argument"
                        ],
                        [
                            "ckpt_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo.py": {
        "torch": {
            "set_num_threads_18": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cfg.CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "args.snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cpu()",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tools/hp_search.py": {
        "torch": {
            "set_num_threads_18": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "set_num_threads_37": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrkDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.TRAIN.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "trainable_params + [{'params': model.refine_head.parameters(), 'lr': cfg.TRAIN.LR.BASE_LR}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_65": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrkDataset()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__222": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg.TRAIN.GRAD_CLIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.TRAIN.SNAPSHOT_DIR + '/checkpoint_e%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vot_iter/vot_iter.py": {
        "torch": {}
    }
}