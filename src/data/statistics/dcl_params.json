{
    "dialogue_pl/models/bert/modeling_bert.py": {
        "tensorflow": {
            "list_variables_109": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_114": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_163": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_173": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_174": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_178": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_231": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past_key_value[1]",
                            "Subscript"
                        ],
                        [
                            "self.transpose_for_scores(self.value(encoder_hidden_states))",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(self.value(hidden_states))",
                            "Call"
                        ],
                        [
                            "torch.cat([past_key_value[1], value_layer], dim=2)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(self.value(hidden_states))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_343": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_421": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_422": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_518": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_614": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_615": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_629": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_634": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_650": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_652": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_676": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_687": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1349": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_1350": {
                "variable": {
                    "value": "dummy_token",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1353": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1462": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1463": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1511": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1512": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1557": {
                "variable": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mask_output, self.label_word_idx.T)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_1578": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1579": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1582": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./dataset/word_idx.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1626": {
                "variable": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mask_output, self.label_word_idx.T)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1629": {
                "variable": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_output)",
                            "Call"
                        ],
                        [
                            "self.cls(mask_output)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mask_output, self.label_word_idx.T)",
                            "Call"
                        ],
                        [
                            "self.dropout(mask_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.label_word_idx.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1654": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1655": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1749": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1750": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1840": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.position_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_235": {
                "variable": {
                    "value": "self.distance_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * config.max_position_embeddings - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_296": {
                "variable": {
                    "value": "position_ids_l",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_297": {
                "variable": {
                    "value": "position_ids_r",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_939": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length + past_key_values_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_941": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1087": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1218": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1329": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1441": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1584": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('./dataset/word_idx.pt')",
                            "Call"
                        ],
                        [
                            "torch.stack(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1718": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1800": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1908": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_182": {
                "start": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_303": {
                "variable": {
                    "value": "relative_position_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhld,lrd->bhlr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_316": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_652": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_953": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_1585": {
                "input": {
                    "value": "F.one_hot(a, num_classes=config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1805": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_key_value[0], key_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_key_value[1], value_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_306": {
                "variable": {
                    "value": "relative_position_scores_query",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhld,lrd->bhlr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_307": {
                "variable": {
                    "value": "relative_position_scores_key",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhrd,lrd->bhlr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past_key_value[0]",
                            "Subscript"
                        ],
                        [
                            "self.transpose_for_scores(self.key(encoder_hidden_states))",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(self.key(hidden_states))",
                            "Call"
                        ],
                        [
                            "torch.cat([past_key_value[0], key_layer], dim=2)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(self.key(hidden_states))",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_1585": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('./dataset/word_idx.pt')",
                            "Call"
                        ],
                        [
                            "torch.stack(a)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1806": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/attack.py": {
        "tensorflow": {
            "enable_eager_execution_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(device_id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attack.py": {
        "torch": {}
    },
    "da_utils.py": {
        "torch": {
            "load_731": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_755": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dcl_main.py": {
        "torch": {}
    },
    "dialogue_pl/data/base_data_module.py": {
        "torch": {
            "DataLoader_69": {
                "dataset": {
                    "value": "self.data_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "dataset": {
                    "value": "self.data_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "dataset": {
                    "value": "self.data_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_pl/data/processor.py": {
        "torch": {
            "tensor_475": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "segment_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example.label",
                            "Attribute"
                        ],
                        [
                            "example.label",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_480": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_pl/lit_models/base.py": {
        "torch": {
            "OneCycleLR_45": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.get('optimizer', OPTIMIZER)",
                            "Call"
                        ],
                        [
                            "self.optimizer_class(self.parameters(), lr=self.lr)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "self.one_cycle_max_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_steps": {
                    "value": "self.one_cycle_total_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_pl/lit_models/transformer.py": {
        "torch": {
            "BCEWithLogitsLoss_19": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_pl/main.py": {
        "torch": {
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/bert_base_network.py": {
        "torch": {}
    },
    "models/mlp_head.py": {
        "torch": {
            "repeat_interleave_26": {
                "variable": {
                    "value": "moment2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(gn_input * gn_input, dim=3, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "Cg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C // self.group_num",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "moment2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, mlp_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_197": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_29": {
                "input": {
                    "value": "moment2 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_204": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "mlp_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_87": {
                "input": {
                    "value": "var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_26": {
                "input": {
                    "value": "gn_input * gn_input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_base_network.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "run_glue_from_da.py": {
        "torch": {}
    },
    "run_glue_from_dcl.py": {
        "torch": {
            "load_154": {
                "variable": {
                    "value": "load_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('/home/chenxiang/pretrained_model/PyTorch-BYOL/new_result/bert_power_pretrain_glue', data_args.task_name.upper(), 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_glue_from_raw.py": {
        "torch": {}
    },
    "run_squad.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_278": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_78": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_126": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_283": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_422": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_693": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_697": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_81": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_81": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_696": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_778": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_462": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_694": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__221": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__223": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_200": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_315": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "similarity_contrast.py": {
        "torch": {
            "load_209": {
                "variable": {
                    "value": "load_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.join('wikidata_pretrain_roberta/wikidata160_172', 'pytorch_model.bin'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(torch.device(training_args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "batch_encoding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_211": {
                "type": {
                    "value": "training_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DistributedSampler_142": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "xm.xrt_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "xm.get_ordinal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_333": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_334": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(y, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(y, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_788": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_795": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_805": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_806": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(y, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(y, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_817": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_141": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_179": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_213": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_train_sampler()",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.data_collator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.args.dataloader_drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_385": {
                "variable": {
                    "value": "online_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "online_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_network",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(online_network)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(online_network, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "online_network",
                            "Method Argument"
                        ],
                        [
                            "online_network",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_386": {
                "variable": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictor",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(predictor)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(predictor, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "predictor",
                            "Method Argument"
                        ],
                        [
                            "predictor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_387": {
                "variable": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_network",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(target_network)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(target_network, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "target_network",
                            "Method Argument"
                        ],
                        [
                            "target_network",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_391": {
                "variable": {
                    "value": "online_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "online_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_network",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(online_network)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(online_network, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "online_network",
                            "Method Argument"
                        ],
                        [
                            "online_network",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_397": {
                "variable": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictor",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(predictor)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(predictor, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "predictor",
                            "Method Argument"
                        ],
                        [
                            "predictor",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_403": {
                "variable": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_network",
                            "Attribute"
                        ],
                        [
                            "amp.initialize((online_network, predictor, target_network), self.optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(target_network)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(target_network, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "target_network",
                            "Method Argument"
                        ],
                        [
                            "target_network",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_738": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_739": {
                "obj": {
                    "value": "{'online_network_state_dict': self.online_network.state_dict(), 'target_network_state_dict': self.target_network.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_870": {
                "obj": {
                    "value": "{'online_network_state_dict': self.online_network.state_dict(), 'target_network_state_dict': self.target_network.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_626": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_860": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_370": {
                "f": {
                    "value": "os.path.join(model_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_372": {
                "f": {
                    "value": "os.path.join(model_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "autocast_591": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_607": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_224": {
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_226": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__501": {
                "parameters": {
                    "value": "online_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__502": {
                "parameters": {
                    "value": "predictor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__504": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__506": {
                "parameters": {
                    "value": "online_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__507": {
                "parameters": {
                    "value": "predictor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/attack_util.py": {
        "torch": {
            "tensor_662": {
                "data": {
                    "value": "self.features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_600": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_653": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/da_util.py": {
        "torch": {
            "tensor_698": {
                "data": {
                    "value": "self.features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_613": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_689": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/filter_correct.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizers.py": {
        "torch": {
            "zeros_like_155": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_239": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/victim.py": {
        "torch": {
            "softmax_98": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(**inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(logits, dim=1).squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "./glue_model/ + task_name + /pytorch_model.bin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "batch_encoding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(**inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(logits, dim=1).squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "batch_encoding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}