{
    "data.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "FLAGS.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.998)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_dataset",
                            "Method Argument"
                        ],
                        [
                            "val_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.n_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "titer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiIter(train_dataset, aug_data, 1 - FLAGS.paug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.n_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.n_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "FLAGS.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_392": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_572": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tb_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.tb_dir + f'/seed_{FLAGS.seed}_' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_598": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FLAGS.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__136": {
                "variable": {
                    "value": "gnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.gclip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mutex.py": {
        "torch": {}
    },
    "src/attention.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.make_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.make_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "(1 + copy) * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.make_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_57": {
                "variable": {
                    "value": "(scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(key * query).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "scores + mask * -99999",
                            "BinOp"
                        ],
                        [
                            "torch.chunk(scores, 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "copy_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(key * query).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "scores + mask * -99999",
                            "BinOp"
                        ],
                        [
                            "torch.chunk(scores, 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/decoder.py": {
        "torch": {
            "Embedding_53": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.seq_picker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(attention)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "self.nllreduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.high_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "FLAGS.highdropvalue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp.unsqueeze(0), hidden] + list(summary)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "running_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "running_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "running_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "variable": {
                    "value": "running_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_embed + n_hidden * (2 + len(attention))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_embed + n_hidden * (1 + len(attention))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_state.tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_state.hiddens + [hidden]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(comb_features)",
                            "Call"
                        ],
                        [
                            "torch.log(comb_probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_156": {
                "variable": {
                    "value": "copy_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(weighted_dists[i].unsqueeze(2) * projs[i]).sum(0) for i in range(len(dists))]",
                            "ListComp"
                        ],
                        [
                            "sum(copy_probs) * copy_weights",
                            "BinOp"
                        ],
                        [
                            "copy_probs + EPS",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_157": {
                "variable": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comb_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy_probs + pred_probs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_274": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "self.step(decoder_state, tuple((f.expand(f.shape[0], len(beam), f.shape[2]) for f in att_features)), tuple((t.expand(t.shape[0], len(beam)) for t in att_tokens)), tuple((m.expand(m.shape[0], len(beam)) for m in att_masks)), tuple((p.expand(p.shape[0], len(beam), p.shape[2]) for p in att_token_proj if p is not None)), self_att_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_348": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_399": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ],
                        [
                            "self.forward(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_454": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gumbel_softmax_458": {
                "variable": {
                    "value": "onehots",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "tau": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_459": {
                "variable": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehots.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_552": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "self.step(decoder_state, tuple((f.expand(f.shape[0], len(beam), f.shape[2]) for f in att_features)), tuple((t.expand(t.shape[0], len(beam)) for t in att_tokens)), tuple((m.expand(m.shape[0], len(beam)) for m in att_masks)), tuple((p.expand(p.shape[0], len(beam), p.shape[2]) for p in att_token_proj if p is not None)), self_att_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_599": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_tgt.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_601": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ],
                        [
                            "self.forward(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_610": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, max_len, att_features=att_features, att_tokens=att_tokens, token_picker=token_picker)",
                            "Call"
                        ],
                        [
                            "self.forward_onehot(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ],
                        [
                            "self.forward(rnn_state, out_src.shape[0], ref_tokens=out_src, att_features=att_features, att_tokens=att_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_686": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "self.step(decoder_state, tuple((f.expand(f.shape[0], len(beam), f.shape[2]) for f in att_features)), tuple((t.expand(t.shape[0], len(beam)) for t in att_tokens)), tuple((m.expand(m.shape[0], len(beam)) for m in att_masks)), tuple((p.expand(p.shape[0], len(beam), p.shape[2]) for p in att_token_proj if p is not None)), self_att_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "comb_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_out(self.combine(all_features).squeeze(0))",
                            "Call"
                        ],
                        [
                            "F.dropout(comb_features, p=self.high_drop.p, training=True)",
                            "Call"
                        ],
                        [
                            "self.high_drop(comb_features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.high_drop.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_131": {
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(comb_features)",
                            "Call"
                        ],
                        [
                            "torch.log(comb_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_280": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "self.step(decoder_state, tuple((f.expand(f.shape[0], len(beam), f.shape[2]) for f in att_features)), tuple((t.expand(t.shape[0], len(beam)) for t in att_tokens)), tuple((m.expand(m.shape[0], len(beam)) for m in att_masks)), tuple((p.expand(p.shape[0], len(beam), p.shape[2]) for p in att_token_proj if p is not None)), self_att_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_299": {
                "tensors": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_300": {
                "tensors": {
                    "value": "all_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tokens]",
                            "List"
                        ],
                        [
                            "[tokens]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "rnnstate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_354": {
                "variable": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "rnnstate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_446": {
                "variable": {
                    "value": "onehots",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(dist.sample(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(tokens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(onehots.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "row.topk(beam_size)",
                            "Call"
                        ],
                        [
                            "toks",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_558": {
                "variable": {
                    "value": "new_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.step(decoder_state, att_features, att_tokens, att_masks, att_token_proj, self_att_proj)",
                            "Call"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "pred + new_pred",
                            "BinOp"
                        ],
                        [
                            "self.step(decoder_state, tuple((f.expand(f.shape[0], len(beam), f.shape[2]) for f in att_features)), tuple((t.expand(t.shape[0], len(beam)) for t in att_tokens)), tuple((m.expand(m.shape[0], len(beam)) for m in att_masks)), tuple((p.expand(p.shape[0], len(beam), p.shape[2]) for p in att_token_proj if p is not None)), self_att_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_577": {
                "tensors": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_578": {
                "tensors": {
                    "value": "all_tokens_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[onehots]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "rnnstate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(emb, decoder_state.feed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((tokens.shape[0], tokens.shape[1], len(self.vocab)), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens.device",
                            "Attribute"
                        ],
                        [
                            "self.embed.weight.device",
                            "Attribute"
                        ],
                        [
                            "self.embed.weight.device",
                            "Attribute"
                        ],
                        [
                            "self.embed.weight.device",
                            "Attribute"
                        ],
                        [
                            "rnn_state[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_259": {
                "tensors": {
                    "value": "all_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tokens]",
                            "List"
                        ],
                        [
                            "[tokens]",
                            "List"
                        ]
                    ]
                }
            },
            "Multinomial_365": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "total_count": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_366": {
                "variable": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_369": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_460": {
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(dist.sample(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(tokens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(onehots.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "row.topk(beam_size)",
                            "Call"
                        ],
                        [
                            "toks",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.eos()",
                            "Call"
                        ],
                        [
                            "self.vocab.eos()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_497": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehots.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_661": {
                "tensors": {
                    "value": "[s.rnn_state[i] for s in beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_669": {
                "tensors": {
                    "value": "[s.feed for s in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eq_355": {
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(dist.sample(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(tokens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(onehots.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "row.topk(beam_size)",
                            "Call"
                        ],
                        [
                            "toks",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.eos()",
                            "Call"
                        ],
                        [
                            "self.vocab.eos()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_359": {
                "variable": {
                    "value": "(top_values, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_362": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + new_pred).detach()",
                            "Call"
                        ],
                        [
                            "logits / temp",
                            "BinOp"
                        ],
                        [
                            "logits.masked_fill(ignore, -99999)",
                            "Call"
                        ],
                        [
                            "logits + new_pred",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "kth_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_values[:, -1].view([-1, 1])",
                            "Call"
                        ],
                        [
                            "kth_best.repeat([1, logits.shape[1]]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_587": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_671": {
                "tensors": {
                    "value": "[s.hiddens[tt] if tt < len(s.hiddens) else s.hiddens[-1] for s in beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "toks.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_367": {
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(dist.sample(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(tokens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([sos] * n_batch).to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(onehots.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "row.topk(beam_size)",
                            "Call"
                        ],
                        [
                            "toks",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.eos()",
                            "Call"
                        ],
                        [
                            "self.vocab.eos()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row in enumerate(tok_arr)",
                            "Call"
                        ],
                        [
                            "row in enumerate(probs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(row).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "row in enumerate(logprobs)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_377": {
                "variable": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_429": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "rnn_state.shape[1]",
                            "Subscript"
                        ],
                        [
                            "ref_tokens.shape[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/encdec.py": {
        "torch": {
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab_y.pad()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "self.nll_wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab_y.pad()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_42": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/encoder.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_27": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_34": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_dropout(emb)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_36": {
                "variable": {
                    "value": "(output_padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed_sequence)",
                            "Call"
                        ]
                    ]
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_sequence.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "self.vocab.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/multiiter.py": {
        "torch": {}
    },
    "src/projection.py": {
        "torch": {
            "from_numpy_11": {
                "variable": {
                    "value": "proj_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_12": {
                "variable": {
                    "value": "proj_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(proj_tensor, dim=1) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "proj_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(proj)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.softmax(proj_tensor, dim=1) + EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_19": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(self.proj, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_12": {
                "input": {
                    "value": "proj_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(proj)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.softmax(proj_tensor, dim=1) + EPS)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {}
    },
    "utils/pmi_align.py": {
        "torch": {
            "softmax_48": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(list(vs.values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "list(vs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}