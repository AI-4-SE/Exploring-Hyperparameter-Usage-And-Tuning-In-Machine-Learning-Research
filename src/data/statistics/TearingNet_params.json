{
    "experiments/counting.py": {
        "sklearn": {
            "SVC_130": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "opt.svm_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "str_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/__init__.py": {
        "torch": {
            "from_numpy_62": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(rotation_theta) * np.eye(3)",
                            "BinOp"
                        ],
                        [
                            "R + (1 - np.cos(rotation_theta)) * np.dot(np.expand_dims(rotation_axis, axis=1), np.expand_dims(rotation_axis, axis=0))",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_15": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cadmulobj_loader.CADMultiObjectDataset(num_points=2048, split=train_split, normalize=True)",
                            "Call"
                        ],
                        [
                            "kittimulobj_loader.KITTIMultiObjectDataset(num_points=2048, split=train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cadmulobj_loader.CADMultiObjectDataset(num_points=2048, split=test_split, normalize=True)",
                            "Call"
                        ],
                        [
                            "kittimulobj_loader.KITTIMultiObjectDataset(num_points=2048, split=test_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cadmulobj_loader.CADMultiObjectDataset(num_points=2048, split=train_split, normalize=True)",
                            "Call"
                        ],
                        [
                            "kittimulobj_loader.KITTIMultiObjectDataset(num_points=2048, split=train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cadmulobj_loader.CADMultiObjectDataset(num_points=2048, split=test_split, normalize=True)",
                            "Call"
                        ],
                        [
                            "kittimulobj_loader.KITTIMultiObjectDataset(num_points=2048, split=test_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/cad_models_loader.py": {
        "torch": {}
    },
    "dataloaders/cadmulobj_loader.py": {
        "torch": {}
    },
    "dataloaders/kittimulobj_loader.py": {
        "torch": {}
    },
    "dataloaders/modelnet_loader.py": {
        "torch": {}
    },
    "dataloaders/shapenet_part_loader.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "point_set",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "point_set[choice, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set)",
                            "Call"
                        ],
                        [
                            "self.pc_normalize(point_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg[choice]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(fn[2]).astype(np.int64) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/reconstruction.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(opt.checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid[0].contiguous().data.cpu(), torch.zeros(point_cnt, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "point_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.grid_dims[0] * opt.grid_dims[1]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_basic.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointCloudAutoencoder(opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(ae)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(opt.optim_args[0], opt.optim_args[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.optim_args[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_51": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(ae.parameters(), lr=lr[0], betas=(opt.optim_args[0], opt.optim_args[1]), weight_decay=opt.optim_args[2])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "{'model_state_dict': ae.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'last_epoch': scheduler.state_dict()['last_epoch'], 'opt': opt}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.exp_name + '/epoch_' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_88": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.cuda()",
                            "Call"
                        ],
                        [
                            "torch.bmm(points, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "points * noise_scale",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_rotation_matrix(theta=opt.augmentation_theta, rotation_axis=opt.augmentation_rotation_axis).unsqueeze(0).cuda().expand(opt.batch_size, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "(rec[0, 0:, 0:3], points[0, :, 0:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_tearing.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_37": {
                "variable": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointCloudAutoencoder(opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(ae)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "StepLR_56": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(ae.parameters(), lr=lr[0])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "{'model_state_dict': ae.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'last_epoch': scheduler.state_dict()['last_epoch'], 'opt': opt}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.exp_name + '/epoch_' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_110": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.cuda()",
                            "Call"
                        ],
                        [
                            "torch.bmm(points, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "points * noise_scale",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_rotation_matrix(theta=opt.augmentation_theta, rotation_axis=opt.augmentation_rotation_axis).unsqueeze(0).cuda().expand(opt.batch_size, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "(rec[0, 0:, 0:3], points[0, :, 0:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/autoencoder.py": {
        "torch": {
            "max_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.sqrt(dist1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.mean(torch.sqrt(dist1), 1), torch.mean(torch.sqrt(dist2), 1))",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(dist1), 1) + torch.mean(torch.sqrt(dist2), 1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(dist1) + torch.mean(dist2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.mean(torch.sqrt(dist1), 1), torch.mean(torch.sqrt(dist2), 1))",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(dist1), 1) + torch.mean(torch.sqrt(dist2), 1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(dist1) + torch.mean(dist2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_62": {
                "input": {
                    "value": "torch.sqrt(dist2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist2 * self.xyz_chamfer_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_65": {
                "input": {
                    "value": "torch.sqrt(dist2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist2 * self.xyz_chamfer_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_68": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist2 * self.xyz_chamfer_weight",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/foldingnet.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid, cw_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_55": {
                "variable": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_56": {
                "variable": {
                    "value": "(x_coor, y_coor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[0])",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_coor, y_coor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "in2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, cw_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/pointnet.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "li",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "din",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_57": {
                "output_size": {
                    "value": "(1, dims[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/tearingnet.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_exp, pc_exp, cw_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_45": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "in2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in1, out1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_78": {
                "variable": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_79": {
                "variable": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_80": {
                "variable": {
                    "value": "(x_coor, y_coor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[0])",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_81": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_coor, y_coor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "dims[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_16": {
                "padding": {
                    "value": "int((kernel_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/tearingnet_graph.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "graph_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_exp, pc_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_29": {
                "variable": {
                    "value": "graph_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_34": {
                "variable": {
                    "value": "wght_hori",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(wght_hori * wght_hori, dim=1) / self.graph_eps_sqr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "wght_vert",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(wght_vert * wght_vert, dim=1) / self.graph_eps_sqr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "wght_lft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros([bs_cur, 1, self.grid_dims[1]]).cuda(), wght_hori)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "wght_rgh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wght_hori, torch.zeros([bs_cur, 1, self.grid_dims[1]]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "wght_top",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros([bs_cur, self.grid_dims[0], 1]).cuda(), wght_vert)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "wght_bot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wght_vert, torch.zeros([bs_cur, self.grid_dims[0], 1]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "wght_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wght_lft.unsqueeze(1), wght_rgh.unsqueeze(1), wght_top.unsqueeze(1), wght_bot.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_87": {
                "variable": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_88": {
                "variable": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "opt.grid_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_89": {
                "variable": {
                    "value": "(x_coor, y_coor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "range_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[0])",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "range_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, opt.grid_dims[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_90": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_coor, y_coor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "(pc[:, :, :, 1:] * wght_vert, torch.zeros([bs_cur, 3, self.grid_dims[0], 1]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "[bs_cur, 1, self.grid_dims[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "[bs_cur, 1, self.grid_dims[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "[bs_cur, self.grid_dims[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "[bs_cur, self.grid_dims[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(torch.zeros([bs_cur, 3, self.grid_dims[0], 1]).cuda(), pc[:, :, :, :-1] * wght_vert)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "wght_hori * wght_hori",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "wght_vert * wght_vert",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "(torch.zeros([bs_cur, 3, 1, self.grid_dims[1]]).cuda(), pc[:, :, :-1, :] * wght_hori)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(pc[:, :, 1:, :] * wght_hori, torch.zeros([bs_cur, 3, 1, self.grid_dims[1]]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "[bs_cur, 3, self.grid_dims[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "[bs_cur, 3, self.grid_dims[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "wght_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wght_lft.unsqueeze(1), wght_rgh.unsqueeze(1), wght_top.unsqueeze(1), wght_bot.unsqueeze(1)), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "[bs_cur, 3, 1, self.grid_dims[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "[bs_cur, 3, 1, self.grid_dims[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}