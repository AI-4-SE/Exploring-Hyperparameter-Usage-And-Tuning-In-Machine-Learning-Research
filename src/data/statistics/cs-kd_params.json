{
    "datasets.py": {
        "torch": {
            "DataLoader_254": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=train_val_dataset_dir, transform=transform_train))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=train_val_dataset_dir, transform=transform_train))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=train_val_dataset_dir, transform=transform_train))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(CIFAR(root, train=True, download=True, transform=transform_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "get_train_sampler(trainset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=test_dataset_dir, transform=transform_test))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=test_dataset_dir, transform=transform_test))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(datasets.ImageFolder(root=test_dataset_dir, transform=transform_test))",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(CIFAR(root, train=False, download=True, transform=transform_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "get_test_sampler(valset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchSampler_244": {
                "sampler": {
                    "value": "RandomSampler(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchSampler_245": {
                "sampler": {
                    "value": "SequentialSampler(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomSampler_244": {
                "data_source": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_245": {
                "data_source": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchSampler_249": {
                "sampler": {
                    "value": "SequentialSampler(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_249": {
                "data_source": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/densenet.py": {
        "torch": {
            "cat_25": {
                "variable": {
                    "value": "concated_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_159": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_160": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_161": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_56": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(*features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_89": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/densenet3.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.bn(out)), 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_18": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_19": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "input": {
                    "value": "self.bn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_154": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_235": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(out4)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_240": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "self.linear(out4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_130": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_38": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.load_model(args.model, num_class)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=list(range(args.sgpu, args.sgpu + args.ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.sgpu, args.sgpu + args.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logdir, 'ckpt.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_64": {
                "device": {
                    "value": "args.sgpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_90": {
                "new_state": {
                    "value": "rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint['rng_state']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "KLDivLoss_99": {
                "variable": {
                    "value": "self.kl_div",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_102": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input / self.temp_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target / self.temp_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'acc': acc, 'epoch': epoch, 'rng_state': torch.get_rng_state()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(logdir, 'ckpt.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion(outputs, targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_127": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs[:batch_size // 2])",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_133": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion(outputs, targets_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_142": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs[:batch_size // 2])",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_178": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion(outputs, targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_181": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs[:batch_size // 2])",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_rng_state_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}