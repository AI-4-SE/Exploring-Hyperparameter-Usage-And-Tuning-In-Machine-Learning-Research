{
    "GAT/utils/process_ppi.py": {
        "sklearn": {
            "StandardScaler_122": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/mm-imdb/run_mmimdb.py": {
        "sklearn": {
            "f1_score_321": {
                "y_true": {
                    "value": "out_label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_322": {
                "y_true": {
                    "value": "out_label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_275": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_99": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_140": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_282": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_494": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_498": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_561": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.tensor(label_frequences, device=args.device, dtype=torch.float) / len(train_dataset)) ** (-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_102": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_497": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_577": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_581": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_585": {
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_312": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_559": {
                "data": {
                    "value": "label_frequences",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_dataset.get_label_frequencies()",
                            "Call"
                        ],
                        [
                            "[label_frequences[l] for l in labels]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_604": {
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/data/metrics/__init__.py": {
        "sklearn": {
            "f1_score_37": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_56": {
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GAT/execute_cora.py": {
        "tensorflow": {
            "reshape_176": {
                "variable": {
                    "value": "log_resh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.inference(ftr_in, nb_classes, nb_nodes, is_train, attn_drop, ffd_drop, bias_mat=bias_in, hid_units=hid_units, n_heads=n_heads, residual=residual, activation=nonlinearity, args=args)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "lab_resh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lbl_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int32, shape=(batch_size, nb_nodes, nb_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "msk_resh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "msk_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int32, shape=(batch_size, nb_nodes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_192": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_194": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "ftr_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, nb_nodes, ft_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "bias_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, nb_nodes, nb_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "lbl_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, nb_nodes, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "msk_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, nb_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "attn_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "ffd_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "epoch_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_160": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_183": {
                "inputs": {
                    "value": "tf.get_collection('kl_list')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_183": {
                "key": {
                    "value": "kl_list",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_184": {
                "x": {
                    "value": "epoch_num * args.kl_anneal_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softmax_13": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.inference(ftr_in, nb_classes, nb_nodes, is_train, attn_drop, ffd_drop, bias_mat=bias_in, hid_units=hid_units, n_heads=n_heads, residual=residual, activation=nonlinearity, args=args)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_14": {
                "variable": {
                    "value": "probmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_15": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probmean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(prob, 2)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argmax(y_test, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "output_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=[nb_nodes, nb_classes, args.sample_num])",
                            "Call"
                        ],
                        [
                            "output_sample[test_mask]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(output_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "testresult",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "two_sample_test_batch(output_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "logits_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "logits_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(logits_pred).type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_319": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "aa - bb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GAT/models/base_gattn.py": {
        "tensorflow": {
            "reduce_sum_5": {
                "variable": {
                    "value": "sample_wts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(labels, nb_classes), class_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_6": {
                "variable": {
                    "value": "xentropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sample_wts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(tf.one_hot(labels, nb_classes), class_weights), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_12": {
                "variable": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_17": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "log_resh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "new_sh_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[-1, nb_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "lab_resh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_sh_lab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[-1]",
                            "List"
                        ]
                    ]
                }
            },
            "argmax_32": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_42": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_50": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_59": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_68": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(tf.nn.sigmoid(logits))",
                            "Call"
                        ],
                        [
                            "tf.cast(predicted, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "count_nonzero_79": {
                "variable": {
                    "value": "tp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted * labels * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "count_nonzero_80": {
                "variable": {
                    "value": "tn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predicted - 1) * (labels - 1) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "count_nonzero_81": {
                "variable": {
                    "value": "fp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted * (labels - 1) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "count_nonzero_82": {
                "variable": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predicted - 1) * labels * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "fmeasure",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmeasure",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * precision * recall / (precision + recall)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(fmeasure, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_8": {
                "input_tensor": {
                    "value": "xentropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits), sample_wts)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_43": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_55": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_5": {
                "x": {
                    "value": "tf.one_hot(labels, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "class_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_6": {
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_13": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if v.name not in ['bias', 'gamma', 'b', 'g', 'beta']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_5": {
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_13": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GAT/models/gat.py": {
        "tensorflow": {
            "concat_15": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_23": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_29": {
                "inputs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "GAT/utils/layers.py": {
        "tensorflow": {
            "conv1d_11": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_14": {
                "variable": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_15": {
                "variable": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_17": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.leaky_relu(logits) + bias_mat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_19": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coefs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_weibull / tf.reduce_sum(sample_weibull, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(sample_normal)",
                            "Call"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(out_coefs, 1.0 - coef_drop)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=sample_weibull.values * training + mean_weibull.values * (1 - training), dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=sample_normal.values * training + mean_normal.values * (1 - training), dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.SparseTensor(indices=coefs.indices, values=tf.nn.dropout(out_coefs.values, 1.0 - coef_drop), dense_shape=coefs.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_reshape(out_coefs, [nb_nodes, nb_nodes])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_87": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(vals, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_108": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_111": {
                "variable": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_112": {
                "variable": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_1, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * f_1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_2, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * tf.transpose(f_2, [1, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_add_120": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_1, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * f_1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_2, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * tf.transpose(f_2, [1, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseTensor_121": {
                "variable": {
                    "value": "lrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.nn.leaky_relu(logits.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_125": {
                "variable": {
                    "value": "eps_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(logits.values, dtype=tf.float32) * eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_128": {
                "variable": {
                    "value": "one_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(logits.values, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_132": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.log(tf.sparse_add(coefs, eps_tensor).values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(vals, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_247": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(out_coefs, seq_fts)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(vals, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_7": {
                "name": {
                    "value": "my_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_9": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "he_normal_21": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_weibull / tf.reduce_sum(sample_weibull, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(sample_normal)",
                            "Call"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(out_coefs, 1.0 - coef_drop)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=sample_weibull.values * training + mean_weibull.values * (1 - training), dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=sample_normal.values * training + mean_normal.values * (1 - training), dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.SparseTensor(indices=coefs.indices, values=tf.nn.dropout(out_coefs.values, 1.0 - coef_drop), dense_shape=coefs.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_reshape(out_coefs, [nb_nodes, nb_nodes])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - coef_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "sp_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "he_normal_137": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_138": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseTensor_166": {
                "variable": {
                    "value": "sample_weibull",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull) + tf.log(-tf.log(tf.ones_like(logits.values) - rand_uniform + eps * tf.ones_like(logits.values)) + eps * tf.ones_like(logits.values)) / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_170": {
                "variable": {
                    "value": "lambda_weibull",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.exp(logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_175": {
                "variable": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "sample_weibull.values * training + mean_weibull.values * (1 - training)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_237": {
                "variable": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "coefs.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.nn.dropout(out_coefs.values, 1.0 - coef_drop)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "coefs.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_241": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_16": {
                "a": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_2, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * tf.transpose(f_2, [1, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_40": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "variable": {
                    "value": "mean_normal_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dot_mu + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_63": {
                "name": {
                    "value": "kl_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "KL_backward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "-(KL_1_mean + KL_2_mean)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.sparse_reduce_sum(KL) / tf.sparse_reduce_sum(one_tensor)",
                            "BinOp"
                        ],
                        [
                            "KL",
                            "Name"
                        ],
                        [
                            "KL",
                            "Name"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "sample_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_normal_posterior + bias_mat + args.sigma_normal_posterior * tf.random_normal(shape=logprobs.shape, dtype=logprobs.dtype) * training + args.sigma_normal_posterior ** 2 / 2 * (1 - training)",
                            "BinOp"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=sample_normal_value, dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(sample_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(f_2, (nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "adj_mat * tf.transpose(f_2, [1, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_143": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_151": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_153": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_154": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_mu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_mu, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_mu, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dot_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_158": {
                "variable": {
                    "value": "mean_normal_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dot_mu + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SparseTensor_179": {
                "variable": {
                    "value": "alpha_gamma_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.gather_nd(tf.squeeze(tf.squeeze(alpha_gamma, 0), 0), tf.expand_dims(logits.indices[:, 1], axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_184": {
                "variable": {
                    "value": "KL_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull)) * alpha_gamma_sparse.values - args.beta_gamma * lambda_weibull.values * tf.exp(tf.lgamma(1 + 1.0 / args.k_weibull))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "KL_2_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-np.euler_gamma * alpha_gamma_sparse.values / args.k_weibull + alpha_gamma_sparse.values * tf.log(args.beta_gamma + eps) - tf.lgamma(alpha_gamma_sparse.values + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SparseTensor_195": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull)) * alpha_gamma - args.beta_gamma * lambda_weibull.values * tf.exp(tf.lgamma(1 + 1.0 / args.k_weibull))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_201": {
                "name": {
                    "value": "kl_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "KL_backward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "-(KL_1_mean + KL_2_mean)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.sparse_reduce_sum(KL) / tf.sparse_reduce_sum(one_tensor)",
                            "BinOp"
                        ],
                        [
                            "KL",
                            "Name"
                        ],
                        [
                            "KL",
                            "Name"
                        ]
                    ]
                }
            },
            "SparseTensor_208": {
                "variable": {
                    "value": "sample_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "sample_normal_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_normal_posterior + args.sigma_normal_posterior * tf.random_normal(shape=[108365], dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_213": {
                "variable": {
                    "value": "out_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "sample_normal.values * training + mean_normal.values * (1 - training)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_17": {
                "features": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_1 + tf.transpose(f_2, [0, 2, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_add(f_1, f_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_26": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seq_fts)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_29": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "variable": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "tf.lgamma(1 + 1.0 / args.k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "sample_weibull",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda_weibull * (tf.exp(1.0 / args.k_weibull * tf.log(-tf.log(1.0 - u_weibull + eps) + eps)) * training + tf.exp(tf.lgamma(1.0 + 1.0 / args.k_weibull)) * (1 - training))",
                            "BinOp"
                        ],
                        [
                            "sample_weibull",
                            "Name"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull) + tf.log(-tf.log(tf.ones_like(logits.values) - rand_uniform + eps * tf.ones_like(logits.values)) + eps * tf.ones_like(logits.values)) / args.k_weibull, dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(sample_weibull)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "bias_mat > -10000000.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "KL.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "tf.cast(bias_mat > -10000000.0, KL.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_77": {
                "name": {
                    "value": "kl_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "KL_backward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "-(KL_1_mean + KL_2_mean)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.sparse_reduce_sum(KL) / tf.sparse_reduce_sum(one_tensor)",
                            "BinOp"
                        ],
                        [
                            "KL",
                            "Name"
                        ],
                        [
                            "KL",
                            "Name"
                        ]
                    ]
                }
            },
            "leaky_relu_122": {
                "features": {
                    "value": "logits.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "logits.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_133": {
                "x": {
                    "value": "tf.sparse_add(coefs, eps_tensor).values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_217": {
                "variable": {
                    "value": "mean_normal_prior_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "logits.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.gather_nd(tf.squeeze(tf.squeeze(mean_normal_prior, 0), 0), tf.expand_dims(logits.indices[:, 1], axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "logits.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(args.sigma_normal_posterior ** 2 + (mean_normal_prior_sparse.values - mean_normal_posterior) ** 2) / (2 * args.sigma_normal_prior ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(args.sigma_normal_posterior ** 2 + (mean_normal_prior - mean_normal_posterior) ** 2) / (2 * args.sigma_normal_prior ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_232": {
                "name": {
                    "value": "kl_list",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "KL_backward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(KL) / tf.reduce_sum(tf.cast(bias_mat > -10000000.0, KL.dtype))",
                            "BinOp"
                        ],
                        [
                            "-(KL_1_mean + KL_2_mean)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.sparse_reduce_sum(KL) / tf.sparse_reduce_sum(one_tensor)",
                            "BinOp"
                        ],
                        [
                            "KL",
                            "Name"
                        ],
                        [
                            "KL",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "alpha_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ],
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lgamma_50": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_60": {
                "x": {
                    "value": "alpha_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_62": {
                "x": {
                    "value": "bias_mat > -10000000.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "KL.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "bias_mat > -10000000.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "KL.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.cast(bias_mat > -10000000.0, KL.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "logits.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "logits": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "input_tensor": {
                    "value": "alpha_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ],
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_171": {
                "x": {
                    "value": "logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_189": {
                "sp_input": {
                    "value": "one_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=logits.indices, values=tf.ones_like(logits.values, dtype=tf.float32), dense_shape=logits.dense_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_reduce_sum_200": {
                "sp_input": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(alpha_gamma * tf.log(lambda_weibull + eps) - np.euler_gamma * alpha_gamma / args.k_weibull - tf.log(args.k_weibull + eps) - args.beta_gamma * lambda_weibull * tf.exp(tf.lgamma(1 + 1.0 / args.k_weibull)) + np.euler_gamma + 1.0 + alpha_gamma * tf.log(args.beta_gamma + eps) - tf.lgamma(alpha_gamma + eps))",
                            "UnaryOp"
                        ],
                        [
                            "KL * tf.cast(bias_mat > -10000000.0, KL.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.log(args.sigma_normal_prior / args.sigma_normal_posterior + eps) + (args.sigma_normal_posterior ** 2 + (mean_normal_prior - mean_normal_posterior) ** 2) / (2 * args.sigma_normal_prior ** 2) - 0.5",
                            "BinOp"
                        ],
                        [
                            "KL * tf.cast(bias_mat > -10000000.0, KL.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.SparseTensor(indices=logits.indices, values=(logprobs.values - tf.lgamma(1 + 1.0 / args.k_weibull)) * alpha_gamma - args.beta_gamma * lambda_weibull.values * tf.exp(tf.lgamma(1 + 1.0 / args.k_weibull)), dense_shape=logits.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean((args.sigma_normal_posterior ** 2 + (mean_normal_prior_sparse.values - mean_normal_posterior) ** 2) / (2 * args.sigma_normal_prior ** 2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean((args.sigma_normal_posterior ** 2 + (mean_normal_prior - mean_normal_posterior) ** 2) / (2 * args.sigma_normal_prior ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_238": {
                "x": {
                    "value": "out_coefs.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - coef_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "logits": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=True, kernel_initializer=kernel_initializer, bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(seq_fts, args.att_se_hid_size, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dot_gamma)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dot_gamma, 1, activation=None, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dot_gamma, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_52": {
                "x": {
                    "value": "1.0 / args.k_weibull * tf.log(-tf.log(1.0 - u_weibull + eps) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_53": {
                "x": {
                    "value": "tf.lgamma(1.0 + 1.0 / args.k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_72": {
                "x": {
                    "value": "args.sigma_normal_prior / args.sigma_normal_posterior + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "bias_mat > -10000000.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "KL.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_add_133": {
                "a": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits) + bias_mat)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(lrelu)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "eps_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=logits.indices, values=tf.ones_like(logits.values, dtype=tf.float32) * eps, dense_shape=logits.dense_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_180": {
                "params": {
                    "value": "tf.squeeze(tf.squeeze(alpha_gamma, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(logits.indices[:, 1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lgamma_192": {
                "x": {
                    "value": "alpha_gamma_sparse.values + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lgamma_54": {
                "x": {
                    "value": "1.0 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "args.beta_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_167": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_167": {
                "x": {
                    "value": "-tf.log(tf.ones_like(logits.values) - rand_uniform + eps * tf.ones_like(logits.values)) + eps * tf.ones_like(logits.values)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_171": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_180": {
                "input": {
                    "value": "alpha_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "coefs",
                            "Name"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ],
                        [
                            "args.alpha_gamma",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(dot_gamma, axis=-1) * args.beta_gamma",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "input": {
                    "value": "logits.indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_218": {
                "params": {
                    "value": "tf.squeeze(tf.squeeze(mean_normal_prior, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(logits.indices[:, 1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "x": {
                    "value": "-tf.log(1.0 - u_weibull + eps) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_187": {
                "x": {
                    "value": "tf.lgamma(1 + 1.0 / args.k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_191": {
                "x": {
                    "value": "args.beta_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_198": {
                "x": {
                    "value": "tf.lgamma(1 + 1.0 / args.k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "input": {
                    "value": "mean_normal_prior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.log(dot_mu + eps)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.log(dot_mu + eps)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "logits.indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lgamma_185": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_187": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_196": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_198": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_58": {
                "x": {
                    "value": "args.k_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_58": {
                "x": {
                    "value": "tf.lgamma(1 + 1.0 / args.k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_168": {
                "x": {
                    "value": "tf.ones_like(logits.values) - rand_uniform + eps * tf.ones_like(logits.values)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "logits.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "1.0 - u_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_59": {
                "x": {
                    "value": "1 + 1.0 / args.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "x": {
                    "value": "lambda_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/benchmarks.py": {
        "tensorflow": {
            "set_experimental_options_280": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "stack_525": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(tf.constant(tokenized_sequence[:slice_size])[None, :])] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_526": {
                "input": {
                    "value": "tf.constant(tokenized_sequence[:slice_size])[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_526": {
                "value": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_455": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if gpu and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "trace_459": {
                "variable": {
                    "value": "inference",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ],
                        [
                            "TFAutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/hans/hans_processors.py": {
        "tensorflow": {
            "TensorShape_165": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_161": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_162": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_163": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/ner/run_tf_ner.py": {
        "tensorflow": {
            "create_file_writer_147": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "/tmp/mylogs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_303": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_365": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "cached_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_373": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], 'cached_{}_{}_{}.tf_record'.format(mode, tokenizer.__class__.__name__, str(args['max_seq_length'])))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseCategoricalCrossentropy_150": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_158": {
                "variable": {
                    "value": "loss_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_353": {
                "variable": {
                    "value": "name_to_features[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_356": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'attention_mask': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'label_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_390": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=record_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_463": {
                "variable": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "args['tpu']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flags.FLAGS.flag_values_dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUStrategy_466": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LossScaleOptimizer_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "boolean_mask_319": {
                "variable": {
                    "value": "active_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(logits, (-1, len(labels)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_320": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(eval_labels, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "FixedLenFeature_347": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_348": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_349": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_380": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_experimental_options_460": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_464": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_465": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_470": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "[f'/gpu:{gpu}' for gpu in args['gpus'].split(',')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "boolean_mask_199": {
                "variable": {
                    "value": "active_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(logits, (-1, len(labels)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_200": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(train_labels, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "OneDeviceStrategy_473": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_476": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'/gpu:' + args['gpus'].split(',')[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GFile_573": {
                "name": {
                    "value": "output_eval_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_599": {
                "name": {
                    "value": "output_test_results_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_607": {
                "name": {
                    "value": "output_test_predictions_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_predictions.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_318": {
                "tensor": {
                    "value": "eval_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "tensor": {
                    "value": "eval_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_390": {
                "feature": {
                    "value": "record_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_608": {
                "name": {
                    "value": "os.path.join(args['data_dir'], 'test.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "tensor": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_380": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_271": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_metric.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_263": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr(step)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_264": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "(loss_metric.result() - logging_loss) / args['logging_steps']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_254": {
                "name": {
                    "value": "eval_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_255": {
                "name": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metrics.precision_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "recall",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metrics.recall_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_257": {
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metrics.f1_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/run_tf_glue.py": {
        "tensorflow": {
            "Adam_59": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_70": {
                "variable": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_experimental_options_36": {
                "options": {
                    "value": "{'auto_mixed_precision': USE_AMP}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_62": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MeanSquaredError_66": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/benchmark_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "transformers-master/src/transformers/commands/env.py": {
        "tensorflow": {
            "is_gpu_available_36": {
                "variable": {
                    "value": "tf_cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_39": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_26": {
                "variable": {
                    "value": "pt_cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_bert_pytorch_checkpoint_to_original_tf.py": {
        "tensorflow": {
            "as_dtype_70": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "tf_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_72": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_104": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/data/processors/glue.py": {
        "tensorflow": {
            "TensorShape_102": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_98": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_99": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_100": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/data/processors/squad.py": {
        "tensorflow": {
            "TensorShape_421": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_422": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_423": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_424": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_425": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_428": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_429": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_430": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_431": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_432": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_351": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "all_attention_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_is_impossible",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_359": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_360": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_366": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/data/processors/utils.py": {
        "tensorflow": {
            "TensorShape_323": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_332": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_339": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "transformers-master/src/transformers/modeling_albert.py": {
        "tensorflow": {
            "list_variables_63": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_68": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace('module/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn_1', 'ffn')",
                            "Call"
                        ],
                        [
                            "name.replace('bert/', 'albert/')",
                            "Call"
                        ],
                        [
                            "name.replace('attention_1', 'attention')",
                            "Call"
                        ],
                        [
                            "name.replace('transform/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm_1', 'full_layer_layer_norm')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm', 'attention/LayerNorm')",
                            "Call"
                        ],
                        [
                            "name.replace('transformer/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('intermediate/dense/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn/intermediate/output/dense/', 'ffn_output/')",
                            "Call"
                        ],
                        [
                            "name.replace('/output/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('/self/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('pooler/dense', 'pooler')",
                            "Call"
                        ],
                        [
                            "name.replace('cls/predictions', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('predictions/attention', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('embeddings/attention', 'embeddings')",
                            "Call"
                        ],
                        [
                            "name.replace('inner_group_', 'albert_layers/')",
                            "Call"
                        ],
                        [
                            "name.replace('group_', 'albert_layer_groups/')",
                            "Call"
                        ],
                        [
                            "'classifier/' + name",
                            "BinOp"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_166": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_179": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_180": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_181": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_182": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_195": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "self.k_weibull",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.k_weibull",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "self.sigma_normal_posterior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.sigma_normal_posterior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_243": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_281": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_360": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_probs",
                            "Name"
                        ],
                        [
                            "attention_probs",
                            "Name"
                        ],
                        [
                            "self.dropout(out_weight)",
                            "Call"
                        ],
                        [
                            "F.softmax(logprobs - torch.lgamma(1 + 1.0 / self.k_weibull) + 1.0 / self.k_weibull * torch.log(-torch.log(1.0 - u_weibull + eps) + eps), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(mean_normal_posterior + self.sigma_normal_posterior * torch.randn_like(logprobs), dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_probs",
                            "Name"
                        ],
                        [
                            "out_weight * head_mask",
                            "BinOp"
                        ],
                        [
                            "sample_weibull / sample_weibull.sum(-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_383": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_385": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_386": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_407": {
                "variable": {
                    "value": "self.albert_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayer(config) for _ in range(config.inner_group_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_441": {
                "variable": {
                    "value": "self.albert_layer_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_572": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_573": {
                "variable": {
                    "value": "self.pooler_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_696": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_697": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_699": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_815": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_816": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_919": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_920": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1016": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.se_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.se_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_se_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_668": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_670": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_797": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_991": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1116": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1120": {
                "variable": {
                    "value": "start_positions_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_positions_noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_positions - ber_start",
                            "BinOp"
                        ],
                        [
                            "torch.max(start_positions_noise, torch.zeros_like(start_positions_noise))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1124": {
                "variable": {
                    "value": "end_positions_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_positions_noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_positions - ber_end",
                            "BinOp"
                        ],
                        [
                            "torch.max(end_positions_noise, torch.zeros_like(end_positions_noise))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_217": {
                "variable": {
                    "value": "self.se_nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self.alpha_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "self.beta_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.beta_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "self.alpha_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.alpha_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "self.beta_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.beta_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "self.mean_normal_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_280": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "self.prior_att_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.se_linear1(key_layer)",
                            "Call"
                        ],
                        [
                            "self.se_linear2(self.se_nonlinear(self.se_linear1(key_layer)))",
                            "Call"
                        ],
                        [
                            "dot_gamma.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "dot_gamma + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_372": {
                "equation": {
                    "value": "bfnd,ndh->bfh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(out_weight, value_layer)",
                            "Call"
                        ],
                        [
                            "context_layer.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_697": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_898": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_901": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "variable": {
                    "value": "self.se_nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_233": {
                "variable": {
                    "value": "self.sigma_normal_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "self.sigma_normal_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.sigma_normal_prior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "self.prior_att_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.se_linear1(key_layer)",
                            "Call"
                        ],
                        [
                            "self.se_linear2(self.se_nonlinear(self.se_linear1(key_layer)))",
                            "Call"
                        ],
                        [
                            "dot_mu.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "dot_mu + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_303": {
                "variable": {
                    "value": "self.mean_normal_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior_att_weights + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_316": {
                "variable": {
                    "value": "u_weibull",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(attention_probs + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_329": {
                "variable": {
                    "value": "u_weibull",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(attention_probs + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_330": {
                "variable": {
                    "value": "out_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - torch.lgamma(1 + 1.0 / self.k_weibull) + 1.0 / self.k_weibull * torch.log(-torch.log(1.0 - u_weibull + eps) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_343": {
                "variable": {
                    "value": "out_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_normal_posterior + self.sigma_normal_posterior * torch.randn_like(logprobs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1120": {
                "input": {
                    "value": "start_positions_noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_positions - ber_start",
                            "BinOp"
                        ],
                        [
                            "torch.max(start_positions_noise, torch.zeros_like(start_positions_noise))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1124": {
                "input": {
                    "value": "end_positions_noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_positions - ber_end",
                            "BinOp"
                        ],
                        [
                            "torch.max(end_positions_noise, torch.zeros_like(end_positions_noise))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_221": {
                "variable": {
                    "value": "self.se_nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_250": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_895": {
                "data": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(self.alpha_gamma * (logprobs - torch.lgamma(1 + 1.0 / self.k_weibull)) - np.euler_gamma * self.alpha_gamma / self.k_weibull - self.beta_gamma * torch.exp(logprobs - torch.lgamma(1 + 1.0 / self.k_weibull) + torch.lgamma(1 + 1.0 / self.k_weibull)) + self.alpha_gamma * torch.log(self.beta_gamma + eps) - torch.lgamma(self.alpha_gamma + eps))",
                            "UnaryOp"
                        ],
                        [
                            "torch.log(self.sigma_normal_prior / self.sigma_normal_posterior + eps) + (self.sigma_normal_posterior ** 2 + (mean_normal_posterior - self.mean_normal_prior) ** 2) / (2 * self.sigma_normal_prior ** 2) - 0.5",
                            "BinOp"
                        ],
                        [
                            "-(self.alpha_gamma * torch.log(lambda_weibull + eps) - np.euler_gamma * self.alpha_gamma / k_weibull - torch.log(k_weibull + eps) - self.beta_gamma * lambda_weibull * torch.exp(torch.lgamma(1 + 1.0 / k_weibull)) + self.alpha_gamma * torch.log(self.beta_gamma + eps) - torch.lgamma(self.alpha_gamma + eps))",
                            "UnaryOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "KL / count",
                            "BinOp"
                        ],
                        [
                            "KL + item",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "KL / count",
                            "BinOp"
                        ],
                        [
                            "KL + item",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_1105": {
                "data": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(self.alpha_gamma * (logprobs - torch.lgamma(1 + 1.0 / self.k_weibull)) - np.euler_gamma * self.alpha_gamma / self.k_weibull - self.beta_gamma * torch.exp(logprobs - torch.lgamma(1 + 1.0 / self.k_weibull) + torch.lgamma(1 + 1.0 / self.k_weibull)) + self.alpha_gamma * torch.log(self.beta_gamma + eps) - torch.lgamma(self.alpha_gamma + eps))",
                            "UnaryOp"
                        ],
                        [
                            "torch.log(self.sigma_normal_prior / self.sigma_normal_posterior + eps) + (self.sigma_normal_posterior ** 2 + (mean_normal_posterior - self.mean_normal_prior) ** 2) / (2 * self.sigma_normal_prior ** 2) - 0.5",
                            "BinOp"
                        ],
                        [
                            "-(self.alpha_gamma * torch.log(lambda_weibull + eps) - np.euler_gamma * self.alpha_gamma / k_weibull - torch.log(k_weibull + eps) - self.beta_gamma * lambda_weibull * torch.exp(torch.lgamma(1 + 1.0 / k_weibull)) + self.alpha_gamma * torch.log(self.beta_gamma + eps) - torch.lgamma(self.alpha_gamma + eps))",
                            "UnaryOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "KL / count",
                            "BinOp"
                        ],
                        [
                            "KL + item",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "KL / count",
                            "BinOp"
                        ],
                        [
                            "KL + item",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_315": {
                "input": {
                    "value": "logprobs - torch.lgamma(1 + 1.0 / k_weibull)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_317": {
                "input": {
                    "value": "1.0 / self.k_weibull * torch.log(-torch.log(1.0 - u_weibull + eps) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_1118": {
                "input": {
                    "value": "start_positions.type_as(start_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_1122": {
                "input": {
                    "value": "end_positions.type_as(start_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_314": {
                "variable": {
                    "value": "k_weibull",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(attention_probs + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_325": {
                "input": {
                    "value": "self.alpha_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_335": {
                "input": {
                    "value": "self.alpha_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_344": {
                "input": {
                    "value": "self.sigma_normal_prior / self.sigma_normal_posterior + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_312": {
                "input": {
                    "value": "-logprobs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lgamma_315": {
                "input": {
                    "value": "1 + 1.0 / k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_317": {
                "input": {
                    "value": "-torch.log(1.0 - u_weibull + eps) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_330": {
                "input": {
                    "value": "1 + 1.0 / self.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_330": {
                "input": {
                    "value": "1.0 - u_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_343": {
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(attention_probs + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_325": {
                "input": {
                    "value": "self.beta_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_335": {
                "input": {
                    "value": "self.beta_gamma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_323": {
                "input": {
                    "value": "k_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_323": {
                "input": {
                    "value": "torch.lgamma(1 + 1.0 / k_weibull)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_333": {
                "input": {
                    "value": "logprobs - torch.lgamma(1 + 1.0 / self.k_weibull) + torch.lgamma(1 + 1.0 / self.k_weibull)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_318": {
                "input": {
                    "value": "1.0 - u_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_324": {
                "input": {
                    "value": "1 + 1.0 / k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_322": {
                "input": {
                    "value": "lambda_weibull + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_332": {
                "input": {
                    "value": "1 + 1.0 / self.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_334": {
                "input": {
                    "value": "1 + 1.0 / self.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_333": {
                "input": {
                    "value": "1 + 1.0 / self.k_weibull",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_77": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_82": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_149": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_150": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_285": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_430": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1081": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1082": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1178": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1278": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1279": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1376": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_700": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_702": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_842": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_948": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_956": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_973": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_977": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_980": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1063": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1260": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1349": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1470": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_134": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_241": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_716": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1157": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1160": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1354": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_292": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1355": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_electra.py": {
        "tensorflow": {
            "list_variables_42": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_47": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace('electra/embeddings/', 'generator/embeddings/')",
                            "Call"
                        ],
                        [
                            "name.replace('electra/', 'discriminator/')",
                            "Call"
                        ],
                        [
                            "name.replace('generator/', 'electra/')",
                            "Call"
                        ],
                        [
                            "name.replace('dense_1', 'dense_prediction')",
                            "Call"
                        ],
                        [
                            "name.replace('generator_predictions/output_bias', 'generator_lm_head/bias')",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Embedding_112": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_113": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_114": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.generator_lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_532": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_314": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_411": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_511": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_597": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_58": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_63": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_94": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "index_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_148": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(self.n_head, self.split_size // self.n_head)",
                            "Call"
                        ],
                        [
                            "mask.view(-1).contiguous().eq(1)",
                            "Call"
                        ],
                        [
                            "self.bias[:, :, ns - nd:ns, :ns]",
                            "Subscript"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / v.size(-1) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask, w, self.masked_bias)",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.masked_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_227": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_346": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_349": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_350": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_538": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_647": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_447": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_627": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_752": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_758": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_107": {
                "input": {
                    "value": "torch.ones((n_ctx, n_ctx), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_154": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / v.size(-1) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask, w, self.masked_bias)",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_107": {
                "*size": {
                    "value": "(n_ctx, n_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_t5.py": {
        "tensorflow": {
            "list_variables_68": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_73": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "txt_name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_127": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wi(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "self.wo(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_213": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_kv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_273": {
                "variable": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_359": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_376": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_382": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_401": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_432": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_466": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_560": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_632": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_636": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_842": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_964": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_973": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_207": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_260": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_262": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_275": {
                "condition": {
                    "value": "is_small",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_618": {
                "input": {
                    "value": "shifted_input_ids >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_691": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_694": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1100": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "input": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_273": {
                "input": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_280": {
                "start": {
                    "value": "qlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_281": {
                "start": {
                    "value": "klen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "real_qlen",
                            "Name"
                        ],
                        [
                            "kv.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_219": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_271": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_albert.py": {
        "tensorflow": {
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_67": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_158": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_161": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_164": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_190": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_222": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_225": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_242": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_245": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_267": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_310": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_322": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "full_layer_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_385": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_hidden_mapping_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_452": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_460": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_492": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_568": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_784": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_785": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_841": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_887": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_888": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_889": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_117": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_551": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_553": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_268": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_115": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_bert.py": {
        "tensorflow": {
            "Activation_86": {
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Activation_88": {
                "activation": {
                    "value": "swish",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Activation_89": {
                "activation": {
                    "value": "gelu_new",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_118": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_211": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_214": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_217": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_263": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_275": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_278": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_279": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_311": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_328": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_331": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_398": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_416": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_423": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_466": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_556": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_886": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_887": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_943": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_944": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_1045": {
                "variable": {
                    "value": "reshaped_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_1063": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_1064": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1121": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1168": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1169": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1170": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_168": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_171": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_539": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_541": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "erf_64": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_244": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_955": {
                "value": {
                    "value": "MULTIPLE_CHOICE_DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_1025": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1026": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1027": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1028": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_166": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_77": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_ctrl.py": {
        "tensorflow": {
            "cast_48": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.concatenate([sines, cosines], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(k, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_key, k), axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_value, v), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "original_size_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(output[0], perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='relu', name='0'), tf.keras.layers.Dense(d_model_size, name='2')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_157": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_158": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_213": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_336": {
                "variable": {
                    "value": "pos_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pos_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_109": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "x": {
                    "value": "use_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_290": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_550": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_141": {
                "units": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_332": {
                "input": {
                    "value": "tf.ones((seq_len, seq_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_334": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_289": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_324": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_332": {
                "shape": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_371": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_348": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_distilbert.py": {
        "tensorflow": {
            "Embedding_78": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_85": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_182": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_185": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_191": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(key))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[bs, 1, 1, k_length]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_265": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_268": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_300": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "sa_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_303": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.ones(input_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_607": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_610": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNormalization_611": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_671": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_677": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_680": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_735": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_736": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_791": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_795": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_834": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_835": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_836": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_444": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "erf_52": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_275": {
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_144": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_65": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_electra.py": {
        "tensorflow": {
            "Embedding_36": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_51": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_133": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense_prediction(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_149": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_150": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "self.get_extended_attention_mask(attention_mask, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_565": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_566": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_101": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_104": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(self.dense_prediction(hidden_states))",
                            "Call"
                        ],
                        [
                            "self.discriminator_predictions(discriminator_sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(discriminator_sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_168": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_206": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings_project",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_262": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_264": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_99": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_flaubert.py": {
        "tensorflow": {
            "assert_equal_177": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_172": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_195": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_201": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_170": {
                "x": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_gpt2.py": {
        "tensorflow": {
            "Dropout_77": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_140": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_194": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_196": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_230": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_238": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_739": {
                "variable": {
                    "value": "mc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.ln_2(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(m, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_145": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_key, key]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_value, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_152": {
                "x": {
                    "value": "use_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "inputs[8] if len(inputs) > 8 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_159": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_329": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_544": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_89": {},
            "matmul_119": {
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_715": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_716": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_717": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_718": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_313": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_365": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_58": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_openai.py": {
        "tensorflow": {
            "Activation_60": {
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "swish",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_144": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_181": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_183": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "positions_embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_651": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_656": {
                "variable": {
                    "value": "mc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_96": {
                "x": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.mlp(n, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_138": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_93": {},
            "matmul_123": {
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_634": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_635": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_636": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_637": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_104": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_272": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_pytorch_utils.py": {
        "tensorflow": {},
        "torch": {
            "load_89": {
                "variable": {
                    "value": "pt_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(pytorch_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "new_pt_params_dict[pt_weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "loaded_pt_weights_data_ptr[pt_weight.data_ptr()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_roberta.py": {
        "tensorflow": {
            "cast_55": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(x, self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_234": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_237": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_238": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_315": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_322": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_401": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_457": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_503": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output, training=kwargs.get('training', False))",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_504": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_55": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x, mode='linear') + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_67": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_t5.py": {
        "tensorflow": {
            "reduce_mean_62": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_115": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_164": {
                "variable": {
                    "value": "is_small",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_exact",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(values, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.k(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_308": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_343": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_521": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_589": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_728": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_729": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_MASK",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relative_attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_159": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_161": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_172": {
                "condition": {
                    "value": "is_small",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.less(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_253": {
                "x": {
                    "value": "use_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_578": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, mask_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_581": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, encoder_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_626": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, encoder_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_62": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_63": {
                "x": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relative_attention_bias(rp_bucket)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.inner_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_555": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.constant(DUMMY_INPUTS)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, input_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_834": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_955": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "tf.math.less(n, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_487": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_496": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_598": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_equal_599": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_158": {
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "tf.dtypes.cast(n, tf.float32) / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_600": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, mask_seq_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_1115": {
                "params": {
                    "value": "layer_past_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_past_states",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "einsum_45": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.drop_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNormalization_69": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_124": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "qkv_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_130": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_134": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_147": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "r_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1] + 1, x_size[0], x_size[2], x_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "w_head_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w_head_q[-qlen:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(qlen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "w_head_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "w_head_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "r_head_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_head_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rlen, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rw_head_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_w_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rr_head_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_r_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r_head_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score * (1 - attn_mask_t) - 1e+30 * attn_mask_t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropatt(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, w_head_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_409": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_566": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_567": {
                "variable": {
                    "value": "mask_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_568": {
                "variable": {
                    "value": "mask_dia",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_570": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_183": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_192": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "inp_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(inp_flat)[0], self.d_proj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(shape_list(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "embed_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(inp) + [self.d_proj]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_510": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "band_part_572": {
                "variable": {
                    "value": "mask_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_573": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_49": {
                "input": {
                    "value": "pos_emb[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_369": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,de->ie",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_371": {
                "variable": {
                    "value": "mask_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mem_len, bsz, self.d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_511": {
                "input": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, w], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([mems[i], hids[i]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_537": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_593": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_614": {
                "a": {
                    "value": "core_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer_norm(inp)",
                            "Call"
                        ],
                        [
                            "self.layer_1(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_1(inp)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.drop(word_emb, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(core_out, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sin_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_372": {
                "indices": {
                    "value": "mask_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(mask_i), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.cast(shape_list(emb_flat), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_540": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_42": {},
            "Embedding_335": {
                "input_dim": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "self.d_embed // self.div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'emb_layers_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_367": {
                "tensor": {
                    "value": "inp_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_371": {
                "condition": {
                    "value": "mask_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_372": {
                "x": {
                    "value": "shape_list(emb_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_618": {
                "a": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_622": {
                "a": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_transfo_xl_utilities.py": {
        "tensorflow": {
            "range_113": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, target]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibd,ed->ibe",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_nd_115": {
                "params": {
                    "value": "logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([r, target], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "hidden_sizes[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.log_softmax(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_108": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_123": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(shape_list(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_133": {
                "variable": {
                    "value": "mask_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "cur_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_W, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "cur_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_b, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_155": {
                "variable": {
                    "value": "tail_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tail_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_151": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_160": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_161": {
                "variable": {
                    "value": "cur_tail_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_logprob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(tail_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scatter_nd_165": {
                "indices": {
                    "value": "mask_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-cur_logprob",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.cast(shape_list(loss), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_134": {
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_165": {
                "x": {
                    "value": "shape_list(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_utils.py": {
        "tensorflow": {
            "reshape_1434": {
                "variable": {
                    "value": "broad_casted_batch_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(shape[0]), axis=-1), shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1436": {
                "variable": {
                    "value": "pair_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1695": {
                "variable": {
                    "value": "dynamic",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_847": {
                "variable": {
                    "value": "unfinished_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_961": {
                "variable": {
                    "value": "min_sent_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_962": {
                "variable": {
                    "value": "max_sent_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1026": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_beams,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1265": {
                "variable": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sent_lengths_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1319": {
                "value": {
                    "value": "token_penalties",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(shape_list(logits))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_1400": {
                "variable": {
                    "value": "sorted_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1401": {
                "variable": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argsort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_1405": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(sorted_logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roll_1421": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_indices_to_remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cumulative_probs > top_p",
                            "Compare"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]], -1)",
                            "Call"
                        ],
                        [
                            "tf.roll(sorted_indices_to_remove, 1, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1422": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_1438": {
                "indices": {
                    "value": "pair_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1444": {
                "condition": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(tensor) + value",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_1516": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1519": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bz, sl, self.nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1579": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1580": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TruncatedNormal_1706": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_670": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_691": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(input_ids, pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_731": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_734": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_737": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_740": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_755": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_932": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(tokens_to_add, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_969": {
                "variable": {
                    "value": "broad_casted_sent_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sent_lengths, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_972": {
                "variable": {
                    "value": "broad_casted_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(max_length), -1), [max_length, batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_976": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "broad_casted_range < broad_casted_sent_lengths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, max_sent_length.numpy()], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "pad_token_id * tf.ones((num_pad_tokens,), dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_1020": {
                "variable": {
                    "value": "beam_scores_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1022": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[beam_scores_begin, beam_scores_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1024": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_1057": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1204": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[0] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1205": {
                "variable": {
                    "value": "beam_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[1] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1206": {
                "variable": {
                    "value": "beam_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[2] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1209": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.identity(input_ids[x, :]) for x in beam_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_1210": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(beam_tokens, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1295": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "decoded_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1299": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "best",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1412": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_1434": {
                "input": {
                    "value": "tf.expand_dims(tf.range(shape[0]), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1436": {
                "values": {
                    "value": "[broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1438": {
                "tensor": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1443": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_1568": {
                "params": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1582": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_1617": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_1627": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1631": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "register_keras_serializable_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_135": {
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_693": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_848": {
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_868": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_902": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_905": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_918": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random.categorical(next_token_logits, dtype=tf.int32, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_923": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_937": {
                "variable": {
                    "value": "is_sents_unfinished_and_token_to_add_is_eos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unfinished_sents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(eos_in_sents, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_954": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_1050": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1064": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1067": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch_hypotheses, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1115": {
                "variable": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "categorical_1117": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1121": {
                "variable": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_1124": {
                "variable": {
                    "value": "next_scores_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1125": {
                "variable": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1126": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1134": {
                "variable": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_1138": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_1217": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_1268": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1268": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1405": {
                "logits": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(logits, sorted_indices, axis=-1, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1434": {
                "input": {
                    "value": "tf.range(shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_1517": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_691": {
                "x": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "pad_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_token_id if pad_token_id is not None else self.config.pad_token_id",
                            "IfExp"
                        ],
                        [
                            "eos_token_id",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_732": {
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_735": {
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_747": {
                "shape": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_756": {
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_beams * effective_batch_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_760": {
                "params": {
                    "value": "encoder_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "expanded_batch_idxs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_949": {
                "input_tensor": {
                    "value": "unfinished_sents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_966": {
                "shape": {
                    "value": "[batch_size, max_sent_length.numpy()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_970": {
                "input": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_973": {
                "input": {
                    "value": "tf.expand_dims(tf.range(max_length), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_length, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1021": {
                "shape": {
                    "value": "(batch_size, num_beams - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_1233": {
                "input_tensor": {
                    "value": "next_scores[batch_idx, :num_beams] == tf.reshape(beam_scores, (batch_size, num_beams))[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_1283": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypo, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1305": {
                "params": {
                    "value": "layer_past",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[2] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1423": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1436": {
                "tensor": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_1511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1656": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_756": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_882": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_896": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_919": {
                "logits": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_932": {
                "input": {
                    "value": "tokens_to_add",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_938": {
                "x": {
                    "value": "eos_in_sents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_973": {
                "input": {
                    "value": "tf.range(max_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1086": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1100": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1106": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_1129": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_1209": {
                "input": {
                    "value": "input_ids[x, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_1210": {
                "input": {
                    "value": "beam_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[1] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1270": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1287": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decoded_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hypo",
                            "Name"
                        ],
                        [
                            "tf.concat([hypo, padding], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i], eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32), decoded_slice)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1396": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits_shape[-1])",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_1414": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :min_tokens_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_1670": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "inputs.get('cls_index', None)",
                            "Call"
                        ],
                        [
                            "tf.fill(hidden_shape[:-2], hidden_shape[-2] - 1)",
                            "Call"
                        ],
                        [
                            "cls_index[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1671": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._generate_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, early_stopping=early_stopping, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, num_return_sequences=num_return_sequences, length_penalty=length_penalty, num_beams=num_beams, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "self._generate_no_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "hidden_states[:, -1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.first_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden_states, axis=1)",
                            "Call"
                        ],
                        [
                            "self.summary(output)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "self.last_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.gather(hidden_states, cls_index, batch_dims=len(hidden_shape) - 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=len(hidden_shape) - 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_955": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_1190": {
                "input_tensor": {
                    "value": "next_scores[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1218": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1236": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1282": {
                "shape": {
                    "value": "(num_pad_tokens,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_1660": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "hidden_shape[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_1178": {
                "input": {
                    "value": "input_ids[effective_beam_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1234": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_1288": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1289": {
                "shape": {
                    "value": "(sent_max_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_xlm.py": {
        "tensorflow": {
            "constant_50": {
                "variable": {
                    "value": "out[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.sin(position_enc[:, 0::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "out[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.cos(position_enc[:, 1::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1)), alen[tf.newaxis, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.cast(attn_mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_75": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(slen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_equal_79": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alen[tf.newaxis, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assert_equal_87": {
                "x": {
                    "value": "shape_list(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_109": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_110": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k_lin(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(bs, 1, qlen, klen) if len(shape_list(mask)) == 3 else (bs, 1, 1, klen)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_187": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_237": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_256": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_479": {
                "variable": {
                    "value": "inputs_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_480": {
                "variable": {
                    "value": "attns_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_667": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_778": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_820": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_821": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_822": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lang_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_360": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(lengths)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "langs_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_61": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_80": {
                "input": {
                    "value": "alen[tf.newaxis, tf.newaxis, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(bs, slen, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_189": {
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_355": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_378": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_384": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_666": {
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNormalization_272": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm1_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_281": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm2_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_375": {},
            "ones_like_670": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([inputs, mask_token], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_353": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_353": {
                "x": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_tf_xlnet.py": {
        "tensorflow": {
            "Activation_60": {
                "activation": {
                    "value": "gelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "swish",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNormalization_83": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[1], x_size[0], x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_138": {
                "variable": {
                    "value": "ac",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "bd",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_170": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_182": {
                "variable": {
                    "value": "attn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask], training=training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_292": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_293": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_296": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_413": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_417": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_437": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / self.d_model)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_438": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_448": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_859": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_860": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_865": {
                "variable": {
                    "value": "perm_mask_seq_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_866": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_869": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_870": {
                "variable": {
                    "value": "target_mapping_seq_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_871": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_952": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1013": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1070": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1118": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lm_loss(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.logits_proj(output)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1119": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1120": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_148": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_149": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + self.r_s_bias, self.seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_214": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_229": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_265": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_420": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_433": {
                "input": {
                    "value": "new_mem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_out[-self.mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-self.mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_442": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "self.relative_positional_encoding(qlen, klen, bsz=bsz, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "self.dropout(pos_emb, training=training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_450": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, self.d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_463": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_464": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_485": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(data_mask)[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_590": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_597": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_601": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=dtype_float), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tile_613": {
                "variable": {
                    "value": "word_emb_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[shape_list(target_mapping)[0], bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_625": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_628": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_629": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tanh_51": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_233": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_241": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_259": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_467": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_468": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_471": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_472": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_487": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_489": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_542": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_550": {
                "a": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[5] if len(inputs) > 5 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(token_type_ids, perm=(1, 0)) if token_type_ids is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_551": {
                "a": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[6] if len(inputs) > 6 else input_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('input_mask', input_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(input_mask, perm=(1, 0)) if input_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "1.0 - tf.cast(attention_mask, dtype=dtype_float)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_552": {
                "a": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_553": {
                "a": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else perm_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('perm_mask', perm_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(perm_mask, perm=(1, 2, 0)) if perm_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, sequence_length, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([perm_mask, perm_mask_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_554": {
                "a": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_682": {
                "a": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer_norm(attn_out)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "self.layer_1(output)",
                            "Call"
                        ],
                        [
                            "self.activation_function(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + inp)",
                            "Call"
                        ],
                        [
                            "self.dropout(output_g if output_g is not None else output_h, training=training)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_431": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_545": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[8] if len(inputs) > 8 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_577": {
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "eye_600": {
                "num_rows": {
                    "value": "qlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "logical_not_628": {
                "x": {
                    "value": "tf.equal(token_type_ids[:, None], cat_ids[None, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_601": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_628": {
                "x": {
                    "value": "token_type_ids[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_694": {
                "a": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_689": {
                "a": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_691": {
                "a": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_124": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_128": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ger_176": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_201": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_253": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_312": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_406": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_584": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_300": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_581": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_763": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_323": {
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_422": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_438": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_641": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_661": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_408": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_756": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_415": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_754": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_754": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_835": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_840": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_137": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_141": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_208": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_248": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "ac",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_260": {
                "variable": {
                    "value": "bd",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_288": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_298": {
                "variable": {
                    "value": "attn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_430": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_583": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_585": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_586": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_618": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_619": {
                "variable": {
                    "value": "mask_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_643": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_654": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_934": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_945": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_946": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_950": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, sequence_length, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_956": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1090": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1195": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1304": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1417": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_267": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_320": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_323": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_342": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_377": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_378": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_379": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_382": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_623": {
                "variable": {
                    "value": "mask_lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_667": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_668": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_683": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_838": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1071": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1277": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1399": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1520": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1654": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1673": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1675": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1679": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1687": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1689": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1695": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_234": {
                "start": {
                    "value": "klen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_248": {
                "start": {
                    "value": "klen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_346": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_354": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_372": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_655": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_794": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_795": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_807": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_831": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_832": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1174": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1177": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1282": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1662": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_285": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_291": {
                "equation": {
                    "value": "bnij->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_637": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_805": {
                "n": {
                    "value": "qlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1283": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_275": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_277": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_807": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/optimization_tf.py": {
        "tensorflow": {
            "PolynomialDecay_62": {
                "variable": {
                    "value": "learning_rate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_118": {
                "variable": {
                    "value": "apply_state[weight_decay_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adam_weight_decay_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_130": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "self._accum_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "global_step_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "has_strategy_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_replica_context_236": {
                "variable": {
                    "value": "replica_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "self.name or 'WarmUp'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_42": {
                "pred": {
                    "value": "global_step_float < warmup_steps_float",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.decay_schedule_fn(step)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'AdamWeightDecay'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_149": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_155": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_41": {
                "x": {
                    "value": "warmup_percent_done",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "global_step_float / warmup_steps_float",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "input": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_208": {
                "initial_value": {
                    "value": "tf.zeros_like(gradient)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_strategy_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/pipelines.py": {
        "tensorflow": {
            "where_737": {
                "variable": {
                    "value": "masked_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_ids == self.tokenizer.mask_token_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_739": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ],
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_740": {
                "variable": {
                    "value": "topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits.softmax(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_405": {
                "device_name": {
                    "value": "'/CPU:0' if self.device == -1 else '/device:GPU:{}'.format(self.device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "constant_1070": {
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_1311": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_1430": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_353": {
                "type": {
                    "value": "'cpu' if device < 0 else 'cuda:{}'.format(device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_409": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_848": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1074": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1076": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_1982": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1985": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1988": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2533": {
                "variable": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1783": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_2339": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_1991": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1994": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1997": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2535": {
                "variable": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1791": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_2341": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/templates/adding_a_new_model/modeling_tf_xxx.py": {
        "tensorflow": {
            "cast_146": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_404": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_405": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_459": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_460": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_516": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_526": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_527": {
                "variable": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_528": {
                "variable": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_129": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_131": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/templates/adding_a_new_model/modeling_xxx.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_507": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_508": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_593": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_692": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_347": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_457": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_625": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_736": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_542": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_545": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_bert.py": {
        "tensorflow": {
            "tile_218": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_220": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_220": {
                "input": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_camembert.py": {
        "tensorflow": {
            "convert_to_tensor_35": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5, 121, 11, 660, 16, 730, 25543, 110, 83, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_40": {
                "variable": {
                    "value": "expected_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 10, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_43": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_common.py": {
        "tensorflow": {
            "constant_541": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype if dtype is not None else tf.int32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "list_physical_devices_36": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "clipnorm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_239": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_240": {
                "variable": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_551": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[8.2220991, -0.5620044, 5.23229752, 4.0386393, -6.8798378, -0.54785802, -3.2012153, 2.92777176, 1.88171953, 7.35341276, 8.43207833, -9.85711836, -5.96209236, -1.13039161, -7.1115294, -0.8369633, -5.3186408, 7.06427407, 0.81369344, -0.82023817, -5.9179796, 0.58813443, -6.99778438, 4.71551189, -0.18771637, 7.44020759, 9.38450987, 2.12662941, -9.32562038, 2.35652522], [0.58425518, 4.53139238, -5.57510464, -6.28030699, -7.19529503, -4.02122551, 1.39337037, -6.06707057, 1.59480517, -9.643119, 0.03907799, 0.67231762, -8.88206726, 6.27115922, 2.28520723, 4.82767506, 4.30421368, 8.8275313, 5.44029958, -4.4735794, 7.38579536, -2.91051663, 2.61946077, -2.5674762, -9.48959302, -4.02922645, -1.35416918, 9.67702323, -5.89478553, 1.85370467]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_621": {
                "variable": {
                    "value": "non_inf_expected_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_625": {
                "variable": {
                    "value": "non_inf_expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[8.222099, 7.3534126, 8.432078, 7.4402075, 9.38451, 6.271159, 8.827531, 5.4402995, 7.3857956, 9.677023]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_633": {
                "variable": {
                    "value": "non_inf_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_114": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "symbolic_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{name: tf.keras.Input(tensor.shape[1:], dtype=tensor.dtype) for (name, tensor) in inputs_dict.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "main_layer(symbolic_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_237": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_259": {
                "variable": {
                    "value": "extended_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_near_637": {
                "x": {
                    "value": "non_inf_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[output != -float('inf')]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "non_inf_expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([8.222099, 7.3534126, 8.432078, 7.4402075, 9.38451, 6.271159, 8.827531, 5.4402995, 7.3857956, 9.677023], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_equal_638": {
                "x": {
                    "value": "non_inf_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32))), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_inf_expected_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_logical_devices_43": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_model_120": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'keras_model.h5')",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{main_layer_class.__name__: main_layer_class}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "where_634": {
                "condition": {
                    "value": "tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_112": {
                "shape": {
                    "value": "tensor.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_233": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_234": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_256": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "input": {
                    "value": "ids_tensor((1, 1), self.model_tester.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_634": {
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(values, shape=shape, dtype=dtype if dtype is not None else tf.int32)",
                            "Call"
                        ],
                        [
                            "tf_top_k_top_p_filtering(logits, top_k=10, top_p=0.6, min_tokens_to_keep=4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(-float('inf'), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_634": {
                "value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_395": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_397": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "pt_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'pt_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_ctrl.py": {
        "tensorflow": {
            "convert_to_tensor_212": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[11859, 0, 1611, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_gpt2.py": {
        "tensorflow": {
            "convert_to_tensor_335": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[464, 3290]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_364": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[464, 1893]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "next_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[token_type_ids, next_token_types]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_203": {
                "variable": {
                    "value": "attn_mask_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "attn_mask_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length - half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_begin, attn_mask_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_220": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "random_other_next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor((self.batch_size, self.seq_length), config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 3290]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 1893]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_223": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_224": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask, tf.ones((shape_list(attn_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_258": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_259": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_260": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assert_near_194": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_near_236": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "broadcast_to_218": {
                "input": {
                    "value": "tf.expand_dims(vector_condition, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.seq_length, self.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_258": {
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 3290]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 1893]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "input": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_260": {
                "input": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "vector_condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(self.seq_length) == self.seq_length - random_seq_idx_to_change",
                            "Compare"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_224": {
                "shape": {
                    "value": "(shape_list(attn_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_openai_gpt.py": {
        "tensorflow": {
            "convert_to_tensor_247": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[481, 4735, 544]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_183": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[481, 4735, 544]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_183": {
                "input": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "input": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_roberta.py": {
        "tensorflow": {
            "constant_245": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_259": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_271": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_t5.py": {
        "tensorflow": {
            "concat_169": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_189": {
                "variable": {
                    "value": "attn_mask_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "attn_mask_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length - half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_begin, attn_mask_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "random_other_next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor((self.batch_size, self.seq_length), config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids[:1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_209": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask, tf.ones((attn_mask.shape[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assert_near_180": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_near_224": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_all_133": {
                "input_tensor": {
                    "value": "tf.math.equal(decoder_past[0][0], encoder_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_204": {
                "input": {
                    "value": "tf.expand_dims(vector_condition, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.seq_length, self.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_233": {
                "value": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_133": {
                "x": {
                    "value": "decoder_past[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_204": {
                "input": {
                    "value": "vector_condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(self.seq_length) == self.seq_length - random_seq_idx_to_change",
                            "Compare"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_210": {
                "shape": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "convert_to_tensor_221": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[33, 1297, 2, 1, 1009, 4, 1109, 11739, 4762, 358, 5, 25, 245, 22, 1706, 17, 20098, 5, 3215, 21, 37, 1110, 3, 13, 1041, 4, 24, 603, 490, 2, 71477, 20098, 104447, 2, 20961, 1, 2604, 4, 1, 329, 3, 6224, 831, 16002, 2, 8, 603, 78967, 29546, 23, 803, 20, 25, 416, 5, 8, 232, 4, 277, 6, 1855, 4601, 3, 29546, 54, 8, 3609, 5, 57211, 49, 4, 1, 277, 18, 8, 1755, 15691, 3, 341, 25, 416, 693, 42573, 71, 17, 401, 94, 31, 17919, 2, 29546, 7873, 18, 1, 435, 23, 11011, 755, 5, 5167, 3, 7983, 98, 84, 2, 29546, 3267, 8, 3609, 4, 1, 4865, 1075, 2, 6087, 71, 6, 346, 8, 5854, 3, 29546, 824, 1400, 1868, 2, 19, 160, 2, 311, 8, 5496, 2, 20920, 17, 25, 15097, 3, 24, 24, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_seed_117": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_xlm.py": {
        "tensorflow": {
            "convert_to_tensor_320": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[14, 447]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_tf_xlnet.py": {
        "tensorflow": {
            "convert_to_tensor_422": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[67, 2840, 19, 18, 1484, 20, 965, 29077, 8719, 1273, 21, 45, 273, 17, 10, 15048, 28, 27511, 21, 4185, 11, 41, 2444, 9, 32, 1025, 20, 8719, 26, 23, 673, 966, 19, 29077, 20643, 27511, 20822, 20643, 19, 17, 6616, 17511, 18, 8978, 20, 18, 777, 9, 19233, 1527, 17669, 19, 24, 673, 17, 28756, 150, 12943, 4354, 153, 27, 442, 37, 45, 668, 21, 24, 256, 20, 416, 22, 2771, 4901, 9, 12943, 4354, 153, 51, 24, 3004, 21, 28142, 23, 65, 20, 18, 416, 34, 24, 2958, 22947, 9, 1177, 45, 668, 3097, 13768, 23, 103, 28, 441, 148, 48, 20522, 19, 12943, 4354, 153, 12860, 34, 18, 326, 27, 17492, 684, 21, 6709, 9, 8585, 123, 266, 19, 12943, 4354, 153, 6872, 24, 3004, 20, 18, 9225, 2198, 19, 12717, 103, 22, 401, 24, 6348, 9, 12943, 4354, 153, 1068, 2768, 2286, 19, 33, 104, 19, 176, 24, 9313, 19, 20086, 28, 45, 10292, 9, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "perm_mask_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "target_mapping_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_seed_172": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_optimization_tf.py": {
        "tensorflow": {
            "list_physical_devices_39": {
                "variable": {
                    "value": "physical_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_logical_devices_45": {
                "variable": {
                    "value": "devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MirroredStrategy_46": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "[device.name for device in devices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[4.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "gradient_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "[-2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "[-1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_28": {
                "value": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/contrib/run_camembert.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(masked_input, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/contrib/run_openai_gpt.py": {
        "torch": {
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_161": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_209": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_210": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_213": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_214": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/contrib/run_swag.py": {
        "torch": {
            "tensor_266": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_272": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_274": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_284": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_318": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_322": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_624": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_628": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_233": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_287": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_429": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_429": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_627": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_694": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, args.max_seq_length, not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__371": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__374": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/contrib/run_transfo_xl.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/distillation/distiller.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.batch_sequences",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_111": {
                "variable": {
                    "value": "self.ce_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "self.lm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdamW_145": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in student.named_parameters() if not any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': params.weight_decay}, {'params': [p for (n, p) in student.named_parameters() if any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "params.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multinomial_216": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prob / x_prob.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.ceil(self.mlm_mask_prop * lengths.sum().item())",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_239": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_token_ids_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_407": {
                "variable": {
                    "value": "s_logits_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_409": {
                "variable": {
                    "value": "t_logits_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_60": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_62": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchSampler_68": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_114": {
                "variable": {
                    "value": "self.mse_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_116": {
                "variable": {
                    "value": "self.cosine_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_185": {
                "variable": {
                    "value": "self.tensorboard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.dump_path, 'log', 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "padding_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 * (bs1 // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, padding_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_443": {
                "variable": {
                    "value": "s_hidden_states_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_445": {
                "variable": {
                    "value": "t_hidden_states_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_603": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mdl_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.dump_path, checkpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_170": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_209": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_274": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_306": {
                "n": {
                    "value": "bs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_415": {
                "input": {
                    "value": "s_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_416": {
                "input": {
                    "value": "t_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__495": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__497": {
                "parameters": {
                    "value": "self.student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_232": {
                "input": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * max_seq_len, dtype=torch.bool, device=token_ids.device)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/distillation/grouped_batch_sampler.py": {
        "torch": {}
    },
    "transformers-master/examples/distillation/lm_seqs_dataset.py": {
        "torch": {
            "tensor_164": {
                "variable": {
                    "value": "tk_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tk_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[list(t.astype(int)) + [pad_idx] * (max_seq_len_ - len(t)) for t in token_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "lg_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[t[1] for t in batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/distillation/run_squad_w_distillation.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_320": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_98": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_142": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_146": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_325": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_447": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_722": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_726": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_101": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_101": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_725": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_829": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_233": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_481": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__260": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__262": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "input": {
                    "value": "start_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "start_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_239": {
                "input": {
                    "value": "end_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_240": {
                "input": {
                    "value": "end_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/distillation/scripts/extract.py": {
        "torch": {
            "save_102": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/distillation/scripts/extract_distilbert.py": {
        "torch": {
            "save_92": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/distillation/train.py": {
        "torch": {
            "from_numpy_271": {
                "variable": {
                    "value": "token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.maximum(counts, 1) ** (-args.mlm_smoothing)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(token_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/distillation/utils.py": {
        "torch": {
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_115": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/glue/run_pl_glue.py": {
        "torch": {
            "load_80": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_90": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_examples_to_features(examples, self.tokenizer, max_length=args.max_seq_length, label_list=self.labels, output_mode=args.glue_output_mode)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/hans/test_hans.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "all_pair_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(f.pairID) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_365": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_97": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_132": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_136": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_254": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_329": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_522": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_526": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_91": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_100": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_100": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_259": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_525": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_611": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.pad_token_id, pad_token_segment_id=tokenizer.pad_token_type_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__188": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/mm-imdb/utils_mmimdb.py": {
        "torch": {
            "zeros_92": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "text_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "tgt_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['label'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "img_start_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_start_token'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "img_end_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_end_token'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "POOLING_BREAKDOWN[args.num_image_embeds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pool(self.model(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, start_dim=2)",
                            "Call"
                        ],
                        [
                            "out.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/ner/run_ner.py": {
        "torch": {
            "CrossEntropyLoss_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/ner/run_pl_ner.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_label_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_88": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_examples_to_features(examples, self.labels, args.max_seq_length, self.tokenizer, cls_token_at_end=bool(self.config.model_type in ['xlnet']), cls_token=self.tokenizer.cls_token, cls_token_segment_id=2 if self.config.model_type in ['xlnet'] else 0, sep_token=self.tokenizer.sep_token, sep_token_extra=bool(self.config.model_type in ['roberta']), pad_on_left=bool(self.config.model_type in ['xlnet']), pad_token=self.tokenizer.pad_token_id, pad_token_segment_id=self.tokenizer.pad_token_type_id, pad_token_label_id=self.pad_token_label_id)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/ner/utils_ner.py": {
        "torch": {
            "CrossEntropyLoss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/pplm/pplm_classification_head.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/pplm/run_pplm.py": {
        "torch": {
            "ones_146": {
                "variable": {
                    "value": "ones_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "window_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "variable": {
                    "value": "window_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "single_bow",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bow_indices",
                            "Name"
                        ],
                        [
                            "list(filter(lambda x: len(x) <= 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "one_hot_bow",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_453": {
                "variable": {
                    "value": "context_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_528": {
                "variable": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_611": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_100": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_184": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_187": {
                "variable": {
                    "value": "curr_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "prediction.shape[0] * [class_label]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_270": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(params['url'])",
                            "Call"
                        ],
                        [
                            "params['path']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_491": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_531": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_533": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[class_label]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_542": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_553": {
                "variable": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_557": {
                "variable": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_560": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_96": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_99": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_131": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_177": {
                "variable": {
                    "value": "bow_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "wte.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "p_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "Name"
                        ],
                        [
                            "past",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_563": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "p_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "Name"
                        ],
                        [
                            "past",
                            "Name"
                        ]
                    ]
                }
            },
            "max_222": {
                "input": {
                    "value": "grad_norms[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_532": {
                "input": {
                    "value": "unpert_last_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unpert_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_548": {
                "input": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_177": {
                "input": {
                    "value": "one_hot_bow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "Name"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_178": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "curr_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_222": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_227": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_549": {
                "input": {
                    "value": "pert_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_178": {
                "input": {
                    "value": "bow_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/pplm/run_pplm_discrim_train.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item_info['X']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "input_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(xs, ys)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cached_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_448": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_79": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier_head(avg_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "padded_sequences",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_143": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_439": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(x, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_442": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(test_x, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_208": {
                "variable": {
                    "value": "avg_rep_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_rep.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.ne(0).unsqueeze(2).repeat(1, 1, self.embed_size).float().to(self.device).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_170": {
                "input": {
                    "value": "output_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_475": {
                "obj": {
                    "value": "discriminator.get_classifier().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_classifier_head_epoch_{}.pt'.format(dataset, epoch + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_396": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/run_bertology.py": {
        "torch": {
            "zeros_75": {
                "variable": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "attn_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "head_ranks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_138": {
                "variable": {
                    "value": "head_ranks[head_importance.view(-1).sort(descending=True)[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_156": {
                "variable": {
                    "value": "new_head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_411": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "DefaultDataCollator().collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_345": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_349": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_395": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_409": {
                "variable": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(args.data_subset, len(eval_dataset))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_348": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_399": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_410": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_410": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_122": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_count_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/run_generation.py": {
        "torch": {
            "device_191": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/run_squad.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_289": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_290": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_79": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_294": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_435": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_739": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_743": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_82": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_82": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_742": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_842": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_475": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_740": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__230": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__232": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_326": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/run_tpu_glue.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_sampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_349": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_97": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "xm.xrt_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "xm.get_ordinal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_104": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tensorboard_logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_225": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tensorboard_logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_sampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.cache_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_96": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_335": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, max_length=args.max_seq_length, label_list=label_list, output_mode=output_mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.cache_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_448": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/run_xnli.py": {
        "torch": {
            "DataLoader_86": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_365": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_82": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_129": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_265": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_339": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_525": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_529": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_85": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_85": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_270": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_528": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_614": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_351": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, max_length=args.max_seq_length, label_list=label_list, output_mode=output_mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bart/evaluate_cnn.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bart/finetune.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "avg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "avg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SummarizationDataset(self.tokenizer, type_path=type_path, **self.dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bart/test_bart_examples.py": {
        "torch": {
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SummarizationDataset(tokenizer, data_dir=tmp_dir, type_path='train', max_source_length=20, max_target_length=trunc_target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bart/utils.py": {
        "torch": {
            "stack_50": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['source_ids'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['source_mask'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "target_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['target_ids'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bertabs/convert_bertabs_original_pytorch_checkpoint.py": {
        "torch": {
            "load_89": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_checkpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "encoder_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(encoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "decoder_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample 3 \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(decoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_model - output_original_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_generator - output_original_generator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_150": {
                "variable": {
                    "value": "are_identical",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_converted_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_model(encoder_input_ids, decoder_input_ids, token_type_ids, encoder_attention_mask, decoder_attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "output_original_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "original(src, tgt, segs, clss, mask_src, mask_tgt, mask_cls)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "new_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./bertabs-finetuned-cnndm-extractive-abstractive-summarization/pytorch_model.bin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "torch.abs(original.generator[0].weight - new_model.generator[0].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_122": {
                "input": {
                    "value": "original.generator[0].weight - new_model.generator[0].weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "output_converted_model - output_original_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "output_converted_generator - output_original_generator",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bertabs/modeling_bertabs.py": {
        "torch": {
            "Embedding_71": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_85": {
                "variable": {
                    "value": "gen_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.dec_hidden_size, args.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_167": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_259": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_260": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_261": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_262": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_302": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_303": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_304": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gt_328": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_416": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_417": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_419": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_420": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_507": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn(all_input, all_input, input_norm, mask=dec_mask, layer_cache=layer_cache, type='self')",
                            "Call"
                        ],
                        [
                            "self.drop(query) + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_644": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_645": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_647": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_648": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_822": {
                "variable": {
                    "value": "batch_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key.size(0)",
                            "Call"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_823": {
                "variable": {
                    "value": "beam_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_824": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "saved_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "all_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[:, :-1], attn_masked.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_529": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_894": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "args.dec_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_628": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_777": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_796": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_1002": {
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['encoder']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_1005": {
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['decoder']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "input": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_473": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_519": {
                "input": {
                    "value": "attn_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn[:, -1] * predefined_graph_1",
                            "BinOp"
                        ],
                        [
                            "attn_masked / (torch.sum(attn_masked, 2).unsqueeze(2) + 1e-09)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_519": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_628": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, -1).transpose(0, 1).repeat(count, 1).transpose(0, 1).contiguous().view(*out_size)",
                            "Call"
                        ],
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bertabs/run_summarization.py": {
        "torch": {
            "SequentialSampler_187": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "CNNDMDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "CNNDMDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "encoded_stories",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[truncate_or_pad(story, block_size, tokenizer.pad_token_id) for (story, _) in encoded_text]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_297": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bertabs/test_utils_summarization.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 23, 23, 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 2, 3, 4, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 101, 5, 6], [1, 101, 3, 4, 101, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/summarization/bertabs/utils_summarization.py": {
        "torch": {
            "ones_like_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "data": {
                    "value": "batch_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/examples/summarization/t5/evaluate_cnn.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/transformer_base.py": {
        "torch": {
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/translation/t5/evaluate_wmt.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/examples/utils_multiple_choice.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length), task))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length), task))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/activations.py": {
        "torch": {
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_22": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_albert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_bart_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_75": {
                "variable": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "hub_interface",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "bart.large.cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "bart",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eq_110": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bart.encode(SAMPLE_TEXT).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tokens2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BartTokenizer.from_pretrained(hf_checkpoint_name).encode(SAMPLE_TEXT, return_tensors='pt').unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_dialogpt_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dialogpt_path, f'{MODEL}_ft.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_19": {
                "obj": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_electra_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_gpt2_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_marian_to_pytorch.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "sd[converter[stripped]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opus_dict[k].T",
                            "Attribute"
                        ],
                        [
                            "ln.split('(')[-1][:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_30": {
                "variable": {
                    "value": "sd[converter[stripped]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "wemb_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.wemb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "bias_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.final_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "wpos_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict['Wpos']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_openai_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_pytorch_checkpoint_to_tf2.py": {
        "torch": {
            "load_371": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(aws_model_maps[pytorch_checkpoint_path], force_download=not use_cached_models)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_roberta_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "max_absolute_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_147": {
                "variable": {
                    "value": "success",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "our_output - their_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_t5_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_xlm_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "two_levels_state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/convert_xlnet_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/data/data_collator.py": {
        "torch": {
            "full_123": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_131": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_140": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[getattr(f, k) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_109": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_135": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_139": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_135": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_139": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/data/datasets/glue.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_125": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/data/datasets/language_modeling.py": {
        "torch": {
            "tensor_74": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_bart.py": {
        "torch": {
            "triu_112": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(torch.zeros(tgt_len, tgt_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "lin_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config) for _ in range(config.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_376": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_392": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_402": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_404": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_442": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(config) for _ in range(config.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_492": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_569": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_631": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_proj(query) * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self._shape(q, tgt_len, bsz)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_648": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_649": {
                "variable": {
                    "value": "attn_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_652": {
                "variable": {
                    "value": "attn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self._shape(v, -1, bsz)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_726": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_727": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_728": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_733": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_767": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_774": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_802": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_956": {
                "variable": {
                    "value": "lm_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.final_logits_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_994": {
                "variable": {
                    "value": "all_but_token_ids_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x for x in range(self.config.vocab_size) if x not in token_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_889": {
                "variable": {
                    "value": "extra_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_num_tokens - old_num_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_890": {
                "variable": {
                    "value": "new_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_logits_bias, extra_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_959": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_1102": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, self.config.num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1140": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_702": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_705": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_711": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_876": {
                "*size": {
                    "value": "(1, self.model.shared.num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_1095": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "tgt_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_len",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_ctrl.py": {
        "torch": {
            "sin_49": {
                "variable": {
                    "value": "sines",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "cosines",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sines, cosines]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matmul_qk / np.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask[ns - nd:ns, :ns] * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((past_value, v), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "torch.nn.Linear(d_model_size, dff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_145": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_274": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_277": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop, config.output_attentions) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_283": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_413": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(seq_len + past_length, seq_len + past_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2 * (i // 2) / d_model_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "dff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_563": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_413": {
                "*size": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_distilbert.py": {
        "torch": {
            "Embedding_64": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_485": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_490": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_564": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_565": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_566": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_645": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_746": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_460": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_726": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_801": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_180": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_623": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_626": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_806": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_807": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_flaubert.py": {
        "torch": {
            "dropout_226": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor_normalized)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_mmbt.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.proj_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.modal_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "embedding_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modal_embeddings, txt_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_317": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeds.unsqueeze(1), token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embeddings, end_token_embeds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_modal.size(0), seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_236": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_244": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device), encoder_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_360": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_363": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "index_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_233": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_235": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_333": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_334": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_405": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_550": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_666": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_672": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_125": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_170": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_147": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_roberta.py": {
        "torch": {
            "Embedding_51": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_477": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_576": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_597": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_240": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_455": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_547": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_691": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_353": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_552": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_51": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_74": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_78": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_140": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_232": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels[..., 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_208": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_244": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_115": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_utils.py": {
        "torch": {
            "Linear_2044": {
                "variable": {
                    "value": "new_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_377": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_766": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1302": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1617": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_1618": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1692": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_1694": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1695": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1699": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1709": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1734": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1735": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1736": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1737": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1780": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1781": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1782": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_1965": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1976": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1980": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_313": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_981": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1066": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "decoder_start_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_start_token_id if decoder_start_token_id is not None else self.config.decoder_start_token_id",
                            "IfExp"
                        ],
                        [
                            "bos_token_id",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1080": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_1230": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1335": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1465": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_tokens.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1532": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1888": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1907": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1909": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1913": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1921": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1923": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1929": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1971": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_1978": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1982": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_2026": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_446": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_624": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_1217": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1218": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1218": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1221": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1246": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1377": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1378": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1380": {
                "variable": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_1382": {
                "variable": {
                    "value": "(next_scores, next_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1383": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_scores_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_1393": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1472": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1618": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1695": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_1761": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1815": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1896": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1974": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_1488": {
                "input": {
                    "value": "next_scores[batch_idx, :num_beams] == beam_scores.view(batch_size, num_beams)[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "topk_1613": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_like_1999": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/modeling_xlm.py": {
        "torch": {
            "arange_63": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_107": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "inputs_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "attns_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_349": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_355": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_360": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_504": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_618": {
                "variable": {
                    "value": "mask_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mask_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.mask_token_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_804": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1040": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1041": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "langs_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_353": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_470": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_519": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_567": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_569": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_like_621": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([input_ids, mask_token], dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "lang_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.lang_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_901": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1108": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_585": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.n_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_784": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_787": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1113": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_368": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_373": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1114": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/optimization.py": {
        "torch": {
            "LambdaLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_44": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_59": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_74": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_93": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_668": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_743": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_209": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "vocab_path",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_245": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_765": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/src/transformers/trainer.py": {
        "torch": {
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_75": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_131": {
                "variable": {
                    "value": "bin_boundaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "softmaxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_137": {
                "variable": {
                    "value": "(confidences, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "softmaxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "ece",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_590": {
                "variable": {
                    "value": "label_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_591": {
                "variable": {
                    "value": "score_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_222": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(self.train_dataset) if self.args.local_rank == -1 else DistributedSampler(self.train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "dataset": {
                    "value": "eval_dataset if eval_dataset is not None else self.eval_dataset",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_241": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_320": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(self.model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_324": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(self.model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_516": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_597": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_635": {
                "variable": {
                    "value": "label_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_tensors, inputs['labels'].detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_636": {
                "variable": {
                    "value": "score_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score_tensors, logits.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_202": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_220": {
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_220": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_308": {
                "f": {
                    "value": "os.path.join(model_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_309": {
                "f": {
                    "value": "os.path.join(model_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_148": {
                "input": {
                    "value": "avg_confidence_in_bin - accuracy_in_bin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__395": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__397": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_441": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/src/transformers/training_args.py": {
        "torch": {
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_147": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_148": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_153": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/templates/adding_a_new_example_script/run_xxx.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_122": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_337": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_366": {
                "variable": {
                    "value": "all_example_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_367": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_373": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_582": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_586": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_231": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_231": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_585": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_672": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__177": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/templates/adding_a_new_model/convert_xxx_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_activations.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eq_18": {
                "input": {
                    "value": "_gelu_python(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_builtin(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_19": {
                "input": {
                    "value": "_gelu_python(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "gelu_new(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_bart.py": {
        "torch": {
            "zeros_like_161": {
                "variable": {
                    "value": "useless_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_attn_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[9.0078, 10.1113, 14.4787]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[71, 82, 18, 33, 46, 91, 2], [68, 34, 26, 58, 30, 82, 2], [5, 97, 17, 39, 94, 40, 2], [76, 83, 94, 25, 70, 78, 2], [87, 59, 41, 35, 48, 66, 2], [55, 13, 16, 58, 5, 2, 1], [64, 27, 31, 51, 12, 75, 2], [52, 64, 86, 17, 83, 39, 2], [48, 61, 9, 24, 71, 82, 2], [26, 1, 60, 48, 22, 13, 2], [21, 5, 62, 28, 14, 76, 2], [45, 98, 37, 86, 59, 48, 2], [70, 70, 50, 9, 28, 0, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_386": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_392": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_423": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "variable": {
                    "value": "expected_causal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, ignore, ignore], [0, 0, ignore], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "data": {
                    "value": "tok_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_532": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_552": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_668": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4, 10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_691": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4, 10, pad, pad, pad]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_504": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "atol": {
                    "value": "atol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_245": {
                "input": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([9.0078, 10.1113, 14.4787])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]], device=torch_device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[0.1907, 1.4342, -1.0289]]).to(torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[0][0][:3]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "TOLERANCE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "eq_429": {
                "input": {
                    "value": "shifted[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_436": {},
            "Tensor_437": {},
            "eq_480": {
                "input": {
                    "value": "expected_causal_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, ignore, ignore], [0, 0, ignore], [0, 0, 0]]).to(input_ids.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_490": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(**inputs_dict)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_496": {
                "input": {
                    "value": "input_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "output_new",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_535": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([9.0078, 10.1113, 14.4787])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]], device=torch_device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[0.1907, 1.4342, -1.0289]]).to(torch_device)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "TOLERANCE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_693": {
                "input": {
                    "value": "torch.Tensor(self.desired_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "no_cache_pad_zero[:3, :5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "std_141": {
                "input": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_693": {}
        }
    },
    "transformers-master/tests/test_modeling_camembert.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 121, 11, 660, 16, 730, 25543, 110, 83, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]], device=torch_device, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_common.py": {
        "torch": {
            "tensor_749": {
                "data": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_765": {
                "data": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_797": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[8.2220991, -0.5620044, 5.23229752, 4.0386393, -6.8798378, -0.54785802, -3.2012153, 2.92777176, 1.88171953, 7.35341276, 8.43207833, -9.85711836, -5.96209236, -1.13039161, -7.1115294, -0.8369633, -5.3186408, 7.06427407, 0.81369344, -0.82023817, -5.9179796, 0.58813443, -6.99778438, 4.71551189, -0.18771637, 7.44020759, 9.38450987, 2.12662941, -9.32562038, 2.35652522], [0.58425518, 4.53139238, -5.57510464, -6.28030699, -7.19529503, -4.02122551, 1.39337037, -6.06707057, 1.59480517, -9.643119, 0.03907799, 0.67231762, -8.88206726, 6.27115922, 2.28520723, 4.82767506, 4.30421368, 8.8275313, 5.44029958, -4.4735794, 7.38579536, -2.91051663, 2.61946077, -2.5674762, -9.48959302, -4.02922645, -1.35416918, 9.67702323, -5.89478553, 1.85370467]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_868": {
                "variable": {
                    "value": "non_inf_expected_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_874": {
                "variable": {
                    "value": "non_inf_expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8.2221, 7.3534, 8.4321, 7.4402, 9.3845, 6.2712, 8.8275, 5.4403, 7.3858, 9.677]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_267": {
                "variable": {
                    "value": "head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model_tester.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_tester.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trace_213": {
                "variable": {
                    "value": "traced_gpt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(tmpdirname)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config).to(torch_device)",
                            "Call"
                        ],
                        [
                            "model_class(config).to(torch_device)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_895": {
                "input": {
                    "value": "non_inf_expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([8.2221, 7.3534, 8.4321, 7.4402, 9.3845, 6.2712, 8.8275, 5.4403, 7.3858, 9.677], dtype=torch.float, device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "non_inf_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[output != -float('inf')].to(device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_896": {
                "input": {
                    "value": "torch.eq(non_inf_expected_idx, non_inf_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_526": {
                "num_embeddings": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_896": {
                "input": {
                    "value": "non_inf_expected_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]], dtype=torch.long, device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "non_inf_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(output != -float('inf')).nonzero().to(device=torch_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "traced_gpt2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_289": {
                "input": {
                    "value": "torch.isnan(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_292": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attentions",
                            "Name"
                        ]
                    ]
                }
            },
            "isnan_289": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attentions",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_ctrl.py": {
        "torch": {
            "tensor_222": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[11859, 0, 1611, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_encoder_decoder.py": {
        "torch": {
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_gpt2.py": {
        "torch": {
            "tensor_346": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[464, 3290]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[464, 1893]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "next_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_type_ids, next_token_types]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_208": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_198": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_239": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_marian.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_openai.py": {
        "torch": {
            "tensor_230": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[481, 4735, 544]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_roberta.py": {
        "torch": {
            "as_tensor_290": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12, 31, 13, model.padding_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_291": {
                "variable": {
                    "value": "expected_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_309": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_316": {
                "variable": {
                    "value": "expected_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[expected_single_positions, expected_single_positions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_297": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_319": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_340": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_357": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_373": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.9469, 0.3913, 0.5118]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eq_297": {
                "input": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_position_ids_from_input_ids(input_ids, model.padding_idx)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_319": {
                "input": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_position_ids_from_input_ids(input_ids, model.padding_idx)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_t5.py": {
        "torch": {
            "tril_142": {
                "variable": {
                    "value": "triangular_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_labels.new_ones(lm_labels.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_142": {
                "variable": {
                    "value": "triangular_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_257": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_193": {
                "input": {
                    "value": "decoder_past[0][0] == encoder_output",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_247": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_291": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_305": {
                "input": {
                    "value": "output_with_past_cache == output_without_past_cache",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_transfo_xl.py": {
        "torch": {
            "tensor_221": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[33, 1297, 2, 1, 1009, 4, 1109, 11739, 4762, 358, 5, 25, 245, 22, 1706, 17, 20098, 5, 3215, 21, 37, 1110, 3, 13, 1041, 4, 24, 603, 490, 2, 71477, 20098, 104447, 2, 20961, 1, 2604, 4, 1, 329, 3, 6224, 831, 16002, 2, 8, 603, 78967, 29546, 23, 803, 20, 25, 416, 5, 8, 232, 4, 277, 6, 1855, 4601, 3, 29546, 54, 8, 3609, 5, 57211, 49, 4, 1, 277, 18, 8, 1755, 15691, 3, 341, 25, 416, 693, 42573, 71, 17, 401, 94, 31, 17919, 2, 29546, 7873, 18, 1, 435, 23, 11011, 755, 5, 5167, 3, 7983, 98, 84, 2, 29546, 3267, 8, 3609, 4, 1, 4865, 1075, 2, 6087, 71, 6, 346, 8, 5854, 3, 29546, 824, 1400, 1868, 2, 19, 160, 2, 311, 8, 5496, 2, 20920, 17, 25, 15097, 3, 24, 24, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_xlm.py": {
        "torch": {
            "tensor_437": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[14, 447]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_xlm_roberta.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 581, 10269, 83, 99942, 136, 60742, 23, 70, 80583, 18276, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "expected_output_values_last_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 581, 10269, 83, 99942, 136, 60742, 23, 70, 80583, 18276, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "expected_output_values_last_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_47": {
                "input": {
                    "value": "output[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_output_values_last_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_66": {
                "input": {
                    "value": "output[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_output_values_last_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_modeling_xlnet.py": {
        "torch": {
            "tensor_520": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[67, 2840, 19, 18, 1484, 20, 965, 29077, 8719, 1273, 21, 45, 273, 17, 10, 15048, 28, 27511, 21, 4185, 11, 41, 2444, 9, 32, 1025, 20, 8719, 26, 23, 673, 966, 19, 29077, 20643, 27511, 20822, 20643, 19, 17, 6616, 17511, 18, 8978, 20, 18, 777, 9, 19233, 1527, 17669, 19, 24, 673, 17, 28756, 150, 12943, 4354, 153, 27, 442, 37, 45, 668, 21, 24, 256, 20, 416, 22, 2771, 4901, 9, 12943, 4354, 153, 51, 24, 3004, 21, 28142, 23, 65, 20, 18, 416, 34, 24, 2958, 22947, 9, 1177, 45, 668, 3097, 13768, 23, 103, 28, 441, 148, 48, 20522, 19, 12943, 4354, 153, 12860, 34, 18, 326, 27, 17492, 684, 21, 6709, 9, 8585, 123, 266, 19, 12943, 4354, 153, 6872, 24, 3004, 20, 18, 9225, 2198, 19, 12717, 103, 22, 401, 24, 6348, 9, 12943, 4354, 153, 1068, 2768, 2286, 19, 33, 104, 19, 176, 24, 9313, 19, 20086, 28, 45, 10292, 9, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers-master/tests/test_optimization.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers-master/tests/test_trainer.py": {
        "torch": {}
    }
}