{
    "cleverhans/attacks.py": {
        "tensorflow": {
            "placeholder_116": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_369": {
                "variable": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_697": {
                "variable": {
                    "value": "wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_811": {
                "variable": {
                    "value": "wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_925": {
                "variable": {
                    "value": "wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1001": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1004": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_1208": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_loss(y, preds)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(x, labels)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_31": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_409": {
                "variable": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(x, labels)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_508": {
                "variable": {
                    "value": "wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_517": {
                "variable": {
                    "value": "wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1012": {
                "func": {
                    "value": "deepfool_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1212": {
                "variable": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(x, labels)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1238": {
                "variable": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "self.attack(x, labels)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_377": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_378": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_393": {
                "variable": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "FGM.generate(x + eta, **fgm_params) - x",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta, -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "eta * self.eps / norm",
                            "BinOp"
                        ],
                        [
                            "adv_x - x",
                            "BinOp"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(x), -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1209": {
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_1230": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_199": {
                "variable": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(adv_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_200": {
                "variable": {
                    "value": "original_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_202": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1001": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_377": {
                "x": {
                    "value": "model_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_397": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_200": {
                "x": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(adv_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_401": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(eta), reduction_indices=reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_397": {
                "x": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "FGM.generate(x + eta, **fgm_params) - x",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta, -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "eta * self.eps / norm",
                            "BinOp"
                        ],
                        [
                            "adv_x - x",
                            "BinOp"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(x), -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_401": {
                "input_tensor": {
                    "value": "tf.square(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_401": {
                "x": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "FGM.generate(x + eta, **fgm_params) - x",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta, -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "eta * self.eps / norm",
                            "BinOp"
                        ],
                        [
                            "adv_x - x",
                            "BinOp"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(x), -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/attacks_tf.py": {
        "tensorflow": {
            "gradients_63": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_52": {
                "variable": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_53": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_54": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_67": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads[Y_sub[ind]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_73": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_97": {
                "variable": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_254": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_535": {
                "variable": {
                    "value": "modifier",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_538": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_540": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "timg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_542": {
                "variable": {
                    "value": "self.simg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "simg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_544": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "tlab",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_546": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_550": {
                "variable": {
                    "value": "self.assign_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_552": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_554": {
                "variable": {
                    "value": "self.assign_simg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_simg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_556": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_558": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_571": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - self.other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_575": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_576": {
                "variable": {
                    "value": "other",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_588": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_589": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_599": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_601": {
                "variable": {
                    "value": "end_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_612": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_985": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_992": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "timg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_994": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "newimg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_996": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "slack",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_998": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "tlab",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_1000": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1004": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1006": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1008": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_slack",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1010": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1013": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_1016": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1017": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_1021": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1024": {
                "variable": {
                    "value": "cond1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1026": {
                "variable": {
                    "value": "cond2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1029": {
                "variable": {
                    "value": "cond3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_1032": {
                "variable": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1034": {
                "variable": {
                    "value": "lower",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1037": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_1045": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_1046": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1054": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1056": {
                "variable": {
                    "value": "self.l2dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.slack - self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1058": {
                "variable": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.newimg - self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1060": {
                "variable": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.slack - self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1068": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1069": {
                "variable": {
                    "value": "real_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_1070": {
                "variable": {
                    "value": "other",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_1072": {
                "variable": {
                    "value": "other_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output_y - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1085": {
                "variable": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1086": {
                "variable": {
                    "value": "self.loss21_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1087": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1088": {
                "variable": {
                    "value": "self.loss2_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1089": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1090": {
                "variable": {
                    "value": "self.loss1_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss1_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1091": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_1096": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1107": {
                "variable": {
                    "value": "end_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_1116": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_128": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_132": {
                "variable": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_582": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_585": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1038": {
                "x": {
                    "value": "cond2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1039": {
                "x": {
                    "value": "cond3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1042": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1077": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1078": {
                "variable": {
                    "value": "loss1_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1081": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1082": {
                "variable": {
                    "value": "loss1_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_53": {
                "x": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "preds_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "square",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_571": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1024": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_1026": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1029": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1032": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1033": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_1034": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1035": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1054": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1056": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1058": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1060": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1062": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1064": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1094": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_127": {
                "ys": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x))",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_563": {
                "x": {
                    "value": "modifier * self.mask + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_595": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1022": {
                "x": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_1024": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1026": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1029": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_1030": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_76": {
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads[Y_sub[ind]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_81": {
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads[Y_sub[ind]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_84": {
                "x": {
                    "value": "square",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_453": {
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads[Y_sub[ind]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "global_variables_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_1026": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_569": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/model.py": {
        "tensorflow": {
            "softmax_63": {
                "logits": {
                    "value": "self.get_logits(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests/test_utils_tf.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/utils.py": {
        "tensorflow": {
            "placeholder_255": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_267": {
                "variable": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/utils_mnist.py": {
        "tensorflow": {}
    },
    "cleverhans/utils_tf.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_37": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model",
                            "Name"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "global_variables_52": {
                "variable": {
                    "value": "global_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_116": {
                "variable": {
                    "value": "train_step",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[np.concatenate(x, axis=0) for x in out]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "equal_197": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_200": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=tf.rank(y) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=tf.rank(predictions) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_256": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_357": {
                "variable": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + tf.reduce_max(tf.abs(x), 1, keep_dims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_358": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + tf.reduce_max(tf.abs(x), 1, keep_dims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_360": {
                "variable": {
                    "value": "square_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_361": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_362": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + tf.reduce_max(tf.abs(x), 1, keep_dims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_371": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_softmax_372": {
                "variable": {
                    "value": "p_log",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_softmax_373": {
                "variable": {
                    "value": "q_log",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_374": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * (p_log - q_log), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_by_value_395": {
                "variable": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "minimum_410": {
                "variable": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "eps / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_55": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Saver_161": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_363": {
                "tensor": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_370": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_loss_376": {
                "loss": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(eta), reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_64": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "argmax_197": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_198": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_200": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(y) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(predictions) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_359": {
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_360": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + tf.reduce_max(tf.abs(x), 1, keep_dims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_374": {
                "input_tensor": {
                    "value": "p * (p_log - q_log)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(eta), reduc_ind, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_359": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + tf.reduce_max(tf.abs(x), 1, keep_dims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_399": {
                "input_tensor": {
                    "value": "tf.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduc_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_399": {
                "x": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_404": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(eta), reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_200": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "rank_202": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_405": {
                "input_tensor": {
                    "value": "tf.square(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduc_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_405": {
                "x": {
                    "value": "eta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/cnn.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(None, self.input_side, self.input_side, self.input_channels)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "input_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "label_shape_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(None, self.num_classes)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "labels_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/neural_network.py": {
        "tensorflow": {
            "GPUOptions_78": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_79": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_104": {
                "variable": {
                    "value": "self.grad_loss_wrt_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.training_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_105": {
                "variable": {
                    "value": "self.grad_loss_wrt_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.training_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_301": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "set_random_seed_47": {
                "seed": {
                    "value": "SEED",
                    "type": "Name",
                    "possible_values": [
                        [
                            "14",
                            "Constant"
                        ],
                        [
                            "seed",
                            "Name"
                        ]
                    ]
                }
            },
            "ConfigProto_79": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/util.py": {
        "tensorflow": {}
    }
}