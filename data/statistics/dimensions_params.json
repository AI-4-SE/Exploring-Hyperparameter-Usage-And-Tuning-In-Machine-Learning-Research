{
    "estimators/geomle.py": {
        "sklearn": {
            "Ridge_85": {
                "variable": {
                    "value": "lm",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Subset_144": {
                "variable": {
                    "value": "X_bootstrap",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(rng.randint(0, nb_examples - 1, size=nb_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X_bootstrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(full_dataset, idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "estimators/mle.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_106": {
                "variable": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_223": {
                "variable": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_165": {
                "variable": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ],
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ],
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "estimators/shortest_path.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_84": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, rand_inds)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=1000, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/data.py": {
        "torch": {
            "sqrt_63": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.batch_fns[self.current_batch_num]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataloader.py": {
        "torch": {
            "interpolate_16": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "RESIZE_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32, 32)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "squeeze_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_40": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.labels) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == int(args.class_ind)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_44": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_63": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.labels) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == int(args.class_ind)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_68": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_80": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.labels) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == int(args.class_ind)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_85": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_107": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imagenet_uids",
                            "variable"
                        ],
                        [
                            "[i for i in cls_inds if i in keep_inds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_119": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "all_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(len(dset))",
                            "Call"
                        ],
                        [
                            "np.arange(len(dset))",
                            "Call"
                        ],
                        [
                            "np.arange(N)",
                            "Call"
                        ],
                        [
                            "np.arange(len(dset))",
                            "Call"
                        ],
                        [
                            "np.arange(len(dset))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_125": {
                "variable": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_inds[-args.num_test_per_cls:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_126": {
                "variable": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x for x in all_inds if x not in test_inds])",
                            "Call"
                        ],
                        [
                            "train_inds[:args.max_num_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_176": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.labels) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == args.class_ind]",
                            "ListComp"
                        ],
                        [
                            "[i for (i, x) in enumerate(dset.targets) if x == int(args.class_ind)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_181": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileDataset(args.dset, getattr(args, 'max_num_samples', -1))",
                            "Call"
                        ],
                        [
                            "dset_(root=data_root, train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]), unique=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(data_root, download=True, train=train, transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split=split, download=True, transform=transforms.Compose([transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(in_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, keep_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, all_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ],
                        [
                            "train_dset",
                            "variable"
                        ],
                        [
                            "test_dset",
                            "variable"
                        ],
                        [
                            "TensorDataset((X, Y), transform=transforms.Compose([transforms.Grayscale(3), transforms.ToTensor(), resize_all]))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, cls_inds)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dset, rand_inds)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(all_inds, size=args.max_num_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/utils_data.py": {
        "torch": {
            "TensorDataset_245": {
                "*tensors": {
                    "value": "torch.Tensor(imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_302": {
                "*tensors": {
                    "value": "torch.Tensor(imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "estimators/twonn.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "anchor_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(full_dataset, subset_idxes)",
                            "Call"
                        ],
                        [
                            "full_dataset",
                            "variable"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "bootstrap_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_25": {
                "variable": {
                    "value": "anchor_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "subset_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:args.anchor_samples]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "estimators/utils.py": {
        "torch": {
            "cdist_46": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x_bsize, -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_bsize, -1)",
                            "Call"
                        ],
                        [
                            "x / x.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(y_bsize, -1)",
                            "Call"
                        ],
                        [
                            "y.view(y_bsize, -1)",
                            "Call"
                        ],
                        [
                            "y / y.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "compute_mode": {
                    "value": "donot_use_mm_for_euclid_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "x_idxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_50": {
                "variable": {
                    "value": "y_idxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_52": {
                "input": {
                    "value": "ignore_idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_idxes == y_idxes",
                            "Compare"
                        ]
                    ]
                }
            },
            "min_56": {
                "variable": {
                    "value": "(new_min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(x, y, p=2, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ],
                        [
                            "x.mm(y.t())",
                            "Call"
                        ],
                        [
                            "torch.cdist(x, y, p=2, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_58": {
                "variable": {
                    "value": "self.min_dists[x_idx_start:x_idx_start + x_bsize]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "new_min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(dist, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.min(dist, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_62": {
                "variable": {
                    "value": "(updated_min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cdist_102": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x_bsize, -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_bsize, -1)",
                            "Call"
                        ],
                        [
                            "x / x.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(y_bsize, -1)",
                            "Call"
                        ],
                        [
                            "y.view(y_bsize, -1)",
                            "Call"
                        ],
                        [
                            "y / y.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "compute_mode": {
                    "value": "donot_use_mm_for_euclid_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_105": {
                "variable": {
                    "value": "(new_min_dist, nn_idxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(x, y, p=2, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ],
                        [
                            "x.mm(y.t())",
                            "Call"
                        ],
                        [
                            "torch.cdist(x, y, p=2, compute_mode='donot_use_mm_for_euclid_dist')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_107": {
                "variable": {
                    "value": "self.min_dists[x_idx_start:x_idx_start + x_bsize]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "new_min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(dist, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.min(dist, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_112": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_115": {
                "variable": {
                    "value": "(sorted_dists, sorted_idxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([dist, self.min_dists[x_idx_start:x_idx_start + x_bsize]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "updated_min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_dist_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_127": {
                "variable": {
                    "value": "nn_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nn_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "self.min_dists[sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "self.min_dists[sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_172": {
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "sidxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_36": {
                "size": {
                    "value": "(sample_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_38": {
                "size": {
                    "value": "(sample_num, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(sample_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_84": {
                "size": {
                    "value": "(sample_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_86": {
                "size": {
                    "value": "(sample_num, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_87": {
                "size": {
                    "value": "(sample_num, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_156": {
                "input": {
                    "value": "equiv_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nn_computer.min_dists[anchor_start_idx:anchor_start_idx + abatch.size(0), 0] == 0) & (nn_computer.min_dists[anchor_start_idx:anchor_start_idx + abatch.size(0), 1] == 0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "generate_data/gen_images.py": {
        "torch": {
            "from_numpy_89": {
                "variable": {
                    "value": "noise_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truncated_noise_sample(truncation=args.truncation, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(noise_vector)",
                            "Call"
                        ],
                        [
                            "noise_vector.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "class_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "class_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size, NUM_IMAGENET_CLS), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "one_hot_from_names([args.class_name], batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(class_vector)",
                            "Call"
                        ],
                        [
                            "class_vector.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(noise_vector, class_vector, args.truncation)",
                            "Call"
                        ],
                        [
                            "output.to('cpu')",
                            "Call"
                        ],
                        [
                            "(output + 1) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "out_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, out_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_data/gen_images_pixels.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputsl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(output_dim, dtype='bool')",
                            "Call"
                        ],
                        [
                            "mask.reshape(image_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, size=noise_dim).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputsl, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, out_fn)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_data/resize_images.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factors",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_fp)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(images.to(torch.float), scale_factor=scale_factor, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, fn)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_data/train.py": {
        "torch": {
            "DataLoader_129": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dset, train_inds)",
                            "Call"
                        ],
                        [
                            "load_(args, cls_0, cls_1, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dset, test_inds)",
                            "Call"
                        ],
                        [
                            "load_(args, cls_0, cls_1, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConcatDataset_74": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dset_0, dset_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_81": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([dset_0, dset_1])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([dset_0, dset_1])",
                            "Call"
                        ],
                        [
                            "dset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(all_inds, size=num_train, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_82": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([dset_0, dset_1])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([dset_0, dset_1])",
                            "Call"
                        ],
                        [
                            "dset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x for x in all_inds if not x in train_inds])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.net)(width=args.width, ncls=NUM_CLS)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "VGG(args.net, ncls=NUM_CLS)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "eval(args.net)(width=args.width, depth=args.depth, in_dim=in_dim, num_classes=NUM_CLS)",
                            "Call"
                        ],
                        [
                            "eval(args.net)(ncls=NUM_CLS)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConcatDataset_111": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dset_0, dset_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'val_acc': val_acc, 'train_acc': train_acc, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "out_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.results_out_dir, out_fn)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, out_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_90": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}