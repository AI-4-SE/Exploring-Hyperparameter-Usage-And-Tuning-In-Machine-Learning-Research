{
    "caltech0_rbm.py": {
        "tensorflow": {}
    },
    "caltech0_trprtr.py": {
        "tensorflow": {
            "placeholder_85": {
                "variable": {
                    "value": "para",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_86": {
                "tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_109": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "caltech_rbm.py": {
        "tensorflow": {}
    },
    "caltech_trprtr.py": {
        "tensorflow": {
            "placeholder_85": {
                "variable": {
                    "value": "para",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_86": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_109": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_classification.py": {
        "tensorflow": {
            "Graph_41": {
                "variable": {
                    "value": "g_1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_66": {
                "variable": {
                    "value": "g_2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_88": {
                "variable": {
                    "value": "g_3",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "w3",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "b3",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "w4",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2000, 10], mean=0.0, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "b4",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 10], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_126": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "50 * 6000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "train_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "layer_1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(x, w1), b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "layer_2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, w2), b2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "variable": {
                    "value": "layer_3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, w3), b3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_138": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_3, w4)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([1, 10], dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_3, w4), b4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_one_hot, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_143": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_155": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[update_sparse, update_normal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y, axis=1), tf.argmax(y_pred, axis=1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_164": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_165": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_121": {
                "shape": {
                    "value": "[1, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_133": {
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_134": {
                "x": {
                    "value": "tf.matmul(layer_1, w2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_135": {
                "x": {
                    "value": "tf.matmul(layer_2, w3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[5], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_138": {
                "a": {
                    "value": "layer_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, w3), b3))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2000, 10], mean=0.0, stddev=0.01, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_142": {
                "labels": {
                    "value": "y_one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_3, w4), b4)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_163": {
                "x": {
                    "value": "tf.equal(tf.argmax(y, axis=1), tf.argmax(y_pred, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 784], name='input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "a": {
                    "value": "layer_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, w1), b1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[2], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "a": {
                    "value": "layer_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, w2), b2))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[4], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_149": {
                "x": {
                    "value": "masks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gv[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_163": {
                "x": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_pred, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_163": {
                "input": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_rbm.py": {
        "tensorflow": {}
    },
    "mnist_trprtr.py": {
        "tensorflow": {
            "placeholder_91": {
                "variable": {
                    "value": "para",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_92": {
                "tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_115": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_82": {
                "x": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "rbm._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ocr_letters_classification.py": {
        "tensorflow": {
            "Graph_36": {
                "variable": {
                    "value": "g_1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_58": {
                "variable": {
                    "value": "g_2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "w3",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1000, 26], mean=0.0, stddev=0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "b3",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 26], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_93": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "50 * 42154",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 26]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "train_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "layer_1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(x, w1), b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_101": {
                "variable": {
                    "value": "layer_2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, w2), b2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_104": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_2, w3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([1, 26], dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_2, w3), b3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_one_hot, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_108": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_120": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[update_sparse, update_normal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y, axis=1), tf.argmax(y_pred, axis=1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_128": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_129": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_88": {
                "shape": {
                    "value": "[1, 26]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_100": {
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_101": {
                "x": {
                    "value": "tf.matmul(layer_1, w2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "a": {
                    "value": "layer_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, w2), b2))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1000, 26], mean=0.0, stddev=0.01, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_107": {
                "labels": {
                    "value": "y_one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_2, w3), b3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_127": {
                "x": {
                    "value": "tf.equal(tf.argmax(y, axis=1), tf.argmax(y_pred, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 128], name='input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "a": {
                    "value": "layer_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, w1), b1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(weights[2], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_114": {
                "x": {
                    "value": "masks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gv[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_127": {
                "x": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_pred, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_127": {
                "input": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ocr_rbm.py": {
        "tensorflow": {}
    },
    "ocr_trprtr.py": {
        "tensorflow": {
            "placeholder_80": {
                "variable": {
                    "value": "para",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_81": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_104": {
                "tensor": {
                    "value": "rbm._w - tf.reduce_mean(rbm._w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "input_tensor": {
                    "value": "rbm._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tfrbm/base_rbm.py": {
        "tensorflow": {
            "ones_96": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_visible, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_186": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_187": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "while_loop_237": {
                "variable": {
                    "value": "(_, _, v_states, v_means, h_states, h_means)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.cast(tf.constant(0), dtype=self._dtype), tf.cast(sample_interval, dtype=self._dtype), tf.zeros_like(self._x, dtype=self._dtype), tf.zeros_like(self._x, dtype=self._dtype), h_states, tf.zeros_like(h_states)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "self._dbm_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.dbm_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_dbm_first",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_305": {
                "variable": {
                    "value": "self._dbm_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.dbm_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_dbm_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_306": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "t1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self._dbm_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_308": {
                "variable": {
                    "value": "self._propup_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.add(t1, t)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "propup_multiplier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_309": {
                "variable": {
                    "value": "t2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self._dbm_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_310": {
                "variable": {
                    "value": "self._propdown_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.add(t2, t)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "propdown_multiplier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "dW_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_visible, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "dvb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_visible]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "dhb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_387": {
                "variable": {
                    "value": "dW_positive",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._x if not self.sample_v_state else sample_bernoulli(self._x)",
                            "IfExp"
                        ]
                    ]
                },
                "b": {
                    "value": "h0_means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._h_means_given_v(x0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_394": {
                "variable": {
                    "value": "dhb",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h0_means - h_means",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_414": {
                "variable": {
                    "value": "dW_update",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "dW_update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dw.assign(self._momentum * self._dw + self._learning_rate * dW)",
                            "Call"
                        ],
                        [
                            "self._dw.assign(self._learning_rate * dW)",
                            "Call"
                        ],
                        [
                            "tf.multiply(dW_update, self._mask)",
                            "Call"
                        ],
                        [
                            "tf.multiply(dW_update, self._w_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_610": {
                "variable": {
                    "value": "cond_w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(self._w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "threshold_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_w[tf.cast(tf.cast(tf.size(sorted_w), dtype=self._dtype) * sparsity_ratio, tf.int32)]",
                            "Subscript"
                        ],
                        [
                            "threshold",
                            "Name"
                        ]
                    ]
                }
            },
            "where_611": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(tf.abs(self._w), threshold_w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(self._w, dtype=self._dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_642": {
                "variable": {
                    "value": "vb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_visible]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_643": {
                "variable": {
                    "value": "hb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_653": {
                "variable": {
                    "value": "cond_zero",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(0, dtype=self._dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_662": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'w': self._w, 'vb': self._vb, 'hb': self._hb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Saver_673": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'w': self._w, 'vb': self._vb, 'hb': self._hb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Saver_685": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'w': self._w, 'vb': self._vb, 'hb': self._hb, 'mask': self._mask}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Saver_699": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{'w': self._w, 'vb': self._vb, 'hb': self._hb, 'mask': self._mask}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_314": {
                "variable": {
                    "value": "self._x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_visible]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "self._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_316": {
                "variable": {
                    "value": "self._momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_317": {
                "variable": {
                    "value": "self._n_gibbs_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_gibbs_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_318": {
                "variable": {
                    "value": "self._hidden_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_319": {
                "variable": {
                    "value": "self._w_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_visible, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dropconnect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_323": {
                "variable": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.W_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_328": {
                "variable": {
                    "value": "vb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.vb_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "vb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_visible]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_333": {
                "variable": {
                    "value": "hb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hb_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "hb_init",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_338": {
                "variable": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.W_init, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.n_visible, self.n_hidden], mean=0.0, stddev=0.01, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.n_visible, self.n_hidden], mean=0.0, stddev=0.01, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_339": {
                "variable": {
                    "value": "self._vb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "vb_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.vb_init, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, self.n_visible], dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, self.n_visible], dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_340": {
                "variable": {
                    "value": "self._hb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "hb_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.hb_init, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, self.n_hidden], dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, self.n_hidden], dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_351": {
                "variable": {
                    "value": "self._dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "dW_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([self.n_visible, self.n_hidden], dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_352": {
                "variable": {
                    "value": "self._dvb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "dvb_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([1, self.n_visible], dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dvb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_353": {
                "variable": {
                    "value": "self._dhb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "dhb_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([1, self.n_hidden], dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dhb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_364": {
                "variable": {
                    "value": "self._q_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=self._dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_means",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_373": {
                "variable": {
                    "value": "h0_states",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h0_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sample_h(h0_means)",
                            "Call"
                        ],
                        [
                            "tf.multiply(h0_states, self._hidden_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._hidden_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_377": {
                "variable": {
                    "value": "dW_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "self._v_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "h_means",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_378": {
                "variable": {
                    "value": "dvb",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x0 - self._v_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_397": {
                "variable": {
                    "value": "q_means",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_means",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_416": {
                "variable": {
                    "value": "dW_update",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "dW_update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dw.assign(self._momentum * self._dw + self._learning_rate * dW)",
                            "Call"
                        ],
                        [
                            "self._dw.assign(self._learning_rate * dW)",
                            "Call"
                        ],
                        [
                            "tf.multiply(dW_update, self._mask)",
                            "Call"
                        ],
                        [
                            "tf.multiply(dW_update, self._w_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._w_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_422": {
                "variable": {
                    "value": "self._train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "W_update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._w.assign_add(dW_update)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "vb_update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._vb.assign_add(dvb_update)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_425": {
                "variable": {
                    "value": "self._msre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self._x - self._v_means)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_426": {
                "variable": {
                    "value": "self._cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.multiply(self._x, tf.log(self._v_means)) + tf.multiply(1 - self._x, tf.log(1 - self._v_means)), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_437": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self._x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_439": {
                "variable": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.round(self._x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_442": {
                "variable": {
                    "value": "ind",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "[tf.range(batch_size), pll_rand]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_443": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int64(ind)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(pll_rand, dtype=self._dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.to_int64(tf.shape(x_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_444": {
                "variable": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x_, -tf.sparse_tensor_to_dense(m, default_value=-1))",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(x_, m)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_, name='x_corrupted')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-tf.sparse_tensor_to_dense(m, default_value=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_add_445": {
                "variable": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x_, -tf.sparse_tensor_to_dense(m, default_value=-1))",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(x_, m)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_, name='x_corrupted')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=tf.to_int64(ind), values=tf.ones_like(pll_rand, dtype=self._dtype), dense_shape=tf.to_int64(tf.shape(x_)))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_446": {
                "variable": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x_, -tf.sparse_tensor_to_dense(m, default_value=-1))",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(x_, m)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_, name='x_corrupted')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x_corrupted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_448": {
                "variable": {
                    "value": "self._pll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.n_visible, dtype=self._dtype) * -tf.nn.softplus(self._get_free_energy(x) - self._get_free_energy(x_))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_451": {
                "variable": {
                    "value": "self._free_energy_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._get_free_energy(self._x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_603": {
                "variable": {
                    "value": "sorted_w",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.reshape(tf.abs(self._w), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_201": {
                "x": {
                    "value": "tf.matmul(v, tf.multiply(self._w, self._w_mask)) + self._hb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "x": {
                    "value": "tf.matmul(v, self._w) + self._hb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_207": {
                "x": {
                    "value": "tf.matmul(h, tf.multiply(self._w, self._w_mask), transpose_b=True) + self._vb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "x": {
                    "value": "tf.matmul(h, self._w, transpose_b=True) + self._vb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_308": {
                "x": {
                    "value": "t1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(self._dbm_first, dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=self._dtype, name='1')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_310": {
                "x": {
                    "value": "t2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(self._dbm_last, dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1.0, dtype=self._dtype, name='1')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "input_data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_337": {
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_350": {
                "name": {
                    "value": "derivatives",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_384": {
                "variable": {
                    "value": "dW_negative",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_samples",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "h_means",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_385": {
                "variable": {
                    "value": "dvb",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x0 - v_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_388": {
                "x": {
                    "value": "tf.shape(x0)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_421": {
                "name": {
                    "value": "training_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_424": {
                "name": {
                    "value": "mean_square_reconstruction_error",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_436": {
                "name": {
                    "value": "pseudo_loglik",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_450": {
                "name": {
                    "value": "free_energy_operation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_610": {
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_611": {
                "input": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_613": {
                "condition": {
                    "value": "cond_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(tf.abs(self._w), threshold_w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(self._w, dtype=self._dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_644": {
                "x": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.W_init, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.n_visible, self.n_hidden], mean=0.0, stddev=0.01, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.n_visible, self.n_hidden], mean=0.0, stddev=0.01, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_653": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_218": {
                "x": {
                    "value": "self._sample_h(h1_means)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._hidden_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_425": {
                "x": {
                    "value": "self._x - self._v_means",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "input_tensor": {
                    "value": "tf.multiply(self._x, tf.log(self._v_means)) + tf.multiply(1 - self._x, tf.log(1 - self._v_means))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_440": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.round(self._x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_603": {
                "tensor": {
                    "value": "tf.abs(self._w)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_604": {
                "x": {
                    "value": "tf.size(sorted_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_613": {
                "input": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_626": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_630": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_650": {
                "shape": {
                    "value": "[self.n_visible, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_654": {
                "condition": {
                    "value": "cond_zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(self._w, tf.cast(0, dtype=self._dtype))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(self._mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.multiply(self._w, self._w_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_207": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.multiply(self._w, self._w_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_238": {
                "x": {
                    "value": "tf.constant(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "x": {
                    "value": "sample_interval",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_240": {
                "input": {
                    "value": "self._x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "input": {
                    "value": "self._x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "input": {
                    "value": "h_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sample_h(self._h_means_given_v(v_states))",
                            "Call"
                        ],
                        [
                            "self._sample_h(self._h_means_given_v(v_states))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._x if not self.sample_v_state else sample_bernoulli(self._x)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "to_int64_443": {
                "x": {
                    "value": "tf.shape(x_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_443": {
                "input": {
                    "value": "pll_rand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size], minval=0, maxval=self.n_visible, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_448": {
                "x": {
                    "value": "self.n_visible",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_603": {
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_617": {
                "input_tensor": {
                    "value": "self._w[:, col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_654": {
                "input": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_201": {
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._w_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_207": {
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._w_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_238": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_393": {
                "x": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_426": {
                "x": {
                    "value": "1 - self._x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(1 - self._v_means)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_443": {
                "input": {
                    "value": "x_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(x_, -tf.sparse_tensor_to_dense(m, default_value=-1))",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(x_, m)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_, name='x_corrupted')",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_448": {
                "features": {
                    "value": "self._get_free_energy(x) - self._get_free_energy(x_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_618": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_426": {
                "x": {
                    "value": "1 - self._v_means",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_604": {
                "input": {
                    "value": "sorted_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.framework.sort(tf.reshape(tf.abs(self._w), [-1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tfrbm/rbm.py": {
        "tensorflow": {
            "constant_25": {
                "variable": {
                    "value": "self._sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._sigma_tmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "self._sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_32": {
                "variable": {
                    "value": "T1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(self._vb, [1, self.n_visible])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "T2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(v, T1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "fe",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "T3 + T4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "tf.matmul(v, self._vb, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_16": {
                "input_tensor": {
                    "value": "tf.nn.softplus(tf.matmul(v, self._w) + self._hb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "tensor": {
                    "value": "self._vb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.n_visible]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_33": {
                "x": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "T1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.matmul(v, self._vb, transpose_b=True), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.divide(tf.reshape(self._vb, [1, self.n_visible]), self._sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "T2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.nn.softplus(tf.matmul(v, self._w) + self._hb), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.square(tf.subtract(v, T1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "tf.nn.softplus(self._propup(v) + self._hb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self._vb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_16": {
                "features": {
                    "value": "tf.matmul(v, self._w) + self._hb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_35": {
                "features": {
                    "value": "self._propup(v) + self._hb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_16": {
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tfrbm/rbm_ais.py": {
        "tensorflow": {
            "Variable_21": {
                "variable": {
                    "value": "count_int",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "count_int_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([1, n_visible], dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_visible]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "negdata_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np_sample_bernoulli(1.0 / (1 + np.exp(-vb_base)))",
                            "Call"
                        ],
                        [
                            "np_sample_bernoulli(1.0 / (1 + np.exp(-vb_base)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "logww",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "logww_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([num_run, 1], dtype=type)",
                            "Call"
                        ],
                        [
                            "np.zeros([num_run, 1], dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "Bv_base",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "Bv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vb",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "bb",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_64": {
                "variable": {
                    "value": "expWh",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bb * Wh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "T",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 - bb) * vb_base + bb * (tf.matmul(poshidstates, w, transpose_b=True) + vb)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "negdata_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np_sample_bernoulli(1.0 / (1 + np.exp(-vb_base)))",
                            "Call"
                        ],
                        [
                            "np_sample_bernoulli(1.0 / (1 + np.exp(-vb_base)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_101": {
                "variable": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "logww",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "logww_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([num_run, 1], dtype=type)",
                            "Call"
                        ],
                        [
                            "np.zeros([num_run, 1], dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "Bv_base",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "Bv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vb",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "bb",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_113": {
                "variable": {
                    "value": "expWh",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bb * Wh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "T",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 - bb) * vb_base + bb * (tf.matmul(poshidstates, w, transpose_b=True) + vb)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "p_un",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros((), dtype=type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_visible]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "variable": {
                    "value": "delta_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(x, vb, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "delta_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(tf.matmul(x, w) + hb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_170": {
                "variable": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros((), dtype=type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "h_state",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "logZ_state",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variables_initializer_23": {
                "var_list": {
                    "value": "[count_int]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "tensor": {
                    "value": "tf.reduce_sum(x, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_visible]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_34": {
                "x": {
                    "value": "1 - p_int",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variables_initializer_57": {
                "var_list": {
                    "value": "[negdata, logww]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.log(1 + expWh), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_run, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.log(1 + expWh), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_run, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "tf.nn.softplus(log_base_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "input_tensor": {
                    "value": "logww",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(logww_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(logww_init, dtype=type)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_89": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(logww - alpha_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variables_initializer_106": {
                "var_list": {
                    "value": "[negdata, logww]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "a": {
                    "value": "negdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(negdata_init, dtype=type)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.log(1 + expWh), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_run, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.log(1 + expWh), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_run, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "tf.nn.softplus(log_base_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_137": {
                "input_tensor": {
                    "value": "logww",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(logww_init, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.Variable(logww_init, dtype=type)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_138": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(logww - alpha_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variables_initializer_148": {
                "var_list": {
                    "value": "[p_un]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vb",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_152": {
                "features": {
                    "value": "tf.matmul(x, w) + hb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variables_initializer_171": {
                "var_list": {
                    "value": "[Z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "input_tensor": {
                    "value": "tf.nn.softplus(tf.matmul(h_state, w, transpose_b=True) + vb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_197": {
                "input_tensor": {
                    "value": "tf.exp(logZ_state - alpha_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "input_tensor": {
                    "value": "tf.log(1 + expWh)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "tf.log(1 + expWh)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_87": {
                "features": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_87": {
                "x": {
                    "value": "tf.log(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "np.finfo(type).max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "num_run",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.log(1 + expWh)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.log(1 + expWh)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_136": {
                "features": {
                    "value": "log_base_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(p_int) - tf.log(1 - p_int)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "tf.constant(log_base_rate, dtype=type)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ],
                        [
                            "base_rate(sess, data_x, type, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_136": {
                "x": {
                    "value": "tf.log(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_137": {
                "x": {
                    "value": "np.finfo(type).max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_138": {
                "value": {
                    "value": "num_run",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "p_un",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros((), dtype=type))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "a": {
                    "value": "h_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(type, [None, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_176": {
                "features": {
                    "value": "tf.matmul(h_state, w, transpose_b=True) + vb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_189": {
                "input_tensor": {
                    "value": "logZ_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(op, feed_dict={h_state: h_states_array}).reshape([2 ** 20, 1])",
                            "Call"
                        ],
                        [
                            "sess.run(op, feed_dict={h_state: h_states_array}).reshape([2 ** 20, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_196": {
                "x": {
                    "value": "np.finfo(type).max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_197": {
                "x": {
                    "value": "logZ_state - alpha_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_206": {
                "x": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros((), dtype=type))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_228": {
                "input_tensor": {
                    "value": "approximation + entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_66": {
                "x": {
                    "value": "1 + expWh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "x": {
                    "value": "1 + expWh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "tf.exp(logww - alpha_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "1 + expWh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_117": {
                "x": {
                    "value": "1 + expWh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_136": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "tf.exp(logww - alpha_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=type, shape=[None, n_visible])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "poshidstates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_bernoulli(poshidprobs)",
                            "Call"
                        ],
                        [
                            "sample_bernoulli(poshidprobs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_89": {
                "x": {
                    "value": "logww - alpha_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "poshidstates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_bernoulli(poshidprobs)",
                            "Call"
                        ],
                        [
                            "sample_bernoulli(poshidprobs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_138": {
                "x": {
                    "value": "logww - alpha_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tfrbm/utils.py": {
        "tensorflow": {
            "equal_39": {
                "variable": {
                    "value": "elements_equal_to_value",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "val",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "as_ints",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "elements_equal_to_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(t, val)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "variable": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "as_ints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(elements_equal_to_value, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_33": {
                "features": {
                    "value": "tf.sign(probs - tf.random_uniform(tf.shape(probs), dtype=probs.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_33": {
                "x": {
                    "value": "probs - tf.random_uniform(tf.shape(probs), dtype=probs.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}