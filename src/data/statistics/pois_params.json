{
    "baselines/common/distributions.py": {
        "tensorflow": {
            "get_default_session_509": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_509": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "pd.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{M: Mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "one_hot_171": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_179": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_180": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_186": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_187": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_220": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_223": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_264": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_267": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_305": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_308": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "layer_lens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_309": {
                "variable": {
                    "value": "self.logstds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "layer_lens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_315": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.layer_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_368": {
                "variable": {
                    "value": "(mean, std_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[size, l - size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scatter_nd_372": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu_indices(size)",
                            "Call"
                        ],
                        [
                            "mask[0] * size + mask[1]",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "std_params",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_376": {
                "variable": {
                    "value": "self.cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_388": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - self.mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_399": {
                "variable": {
                    "value": "trace_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.matmul(std_mix, std_mix, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_401": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x - self.mean, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.mean - other.mean",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(delta, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.mean - other.mean",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(delta, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_403": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_420": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x - self.mean, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.mean - other.mean",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(delta, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.mean - other.mean",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(delta, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_422": {
                "variable": {
                    "value": "mix_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mix_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * other.cov + (1 - alpha) * self.cov",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_424": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "half_quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(stds, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(other.std, delta, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(mix_std, delta, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_439": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_166": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_172": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_204": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_206": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_208": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_210": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_240": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_313": {
                "values": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_316": {
                "values": {
                    "value": "[0.5 * tf.reduce_sum(tf.square((x - selfmean) / tf.exp(selflogstd)), axis=-1) + 0.5 * np.log(2.0 * np.pi) * tf.to_float(tf.shape(x)[-1]) + tf.reduce_sum(selflogstd, axis=-1) for (selfmean, selflogstd, x) in zip(self.means, self.logstds, xs)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_322": {
                "values": {
                    "value": "[tf.reduce_sum(otherlogstd - selflogstd + (tf.exp(2 * selflogstd) + tf.square(selfmean - othermean)) / (2.0 * tf.exp(2 * otherlogstd)) - 0.5, axis=-1) for (selfmean, selflogstd, othermean, otherlogstd) in zip(self.means, self.logstds, other.means, other.logstds)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_326": {
                "values": {
                    "value": "[tf.reduce_sum(selflogstd + 0.5 * np.log(2.0 * np.pi * np.e), axis=-1) for selflogstd in self.logstds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_344": {
                "values": {
                    "value": "renyis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_443": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_445": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_449": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_452": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_176": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_177": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_185": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_191": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_204": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_212": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_231": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_244": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_288": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_331": {
                "input": {
                    "value": "self.flat_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_378": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(self.std))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_399": {
                "a": {
                    "value": "std_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(other.std, self.std, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "std_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(other.std, self.std, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_410": {
                "equation": {
                    "value": "n,nm->m",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.flat_mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_425": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(mix_std))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_445": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_447": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_449": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_451": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_452": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_476": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_192": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_200": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_250": {
                "x": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "tf.square(self.mean - other.mean) / (var_alpha + tol)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_293": {
                "x": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "otherlogstd - selflogstd + (tf.exp(2 * selflogstd) + tf.square(selfmean - othermean)) / (2.0 * tf.exp(2 * otherlogstd)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_326": {
                "input_tensor": {
                    "value": "selflogstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_329": {
                "x": {
                    "value": "self.flat_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_375": {
                "num_rows": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_375": {
                "x": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_378": {
                "x": {
                    "value": "tf.matrix_diag_part(self.std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_413": {
                "equation": {
                    "value": "n,nm->m",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.flat_mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_414": {
                "equation": {
                    "value": "n,nm->m",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.shape(self.flat_mean))",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ],
                        [
                            "tf.random_normal([self.size])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_425": {
                "x": {
                    "value": "tf.matrix_diag_part(mix_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_447": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_183": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_189": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_229": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_230": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_242": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_273": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_286": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_296": {
                "x": {
                    "value": "var_alpha + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_318": {
                "input_tensor": {
                    "value": "selflogstd",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_329": {
                "input": {
                    "value": "self.flat_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_332": {
                "x": {
                    "value": "self.flat_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_339": {
                "x": {
                    "value": "2 * selflogstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_374": {
                "shape": {
                    "value": "[self.size, self.size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_374": {
                "num_rows": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_394": {
                "x": {
                    "value": "2 * tf.constant(np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_445": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_206": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_229": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_233": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_251": {
                "x": {
                    "value": "self.mean - other.mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_252": {
                "x": {
                    "value": "tf.reduce_prod(var_alpha, axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_254": {
                "x": {
                    "value": "tf.reduce_prod(tf.square(other.std), axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_277": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_282": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_340": {
                "input_tensor": {
                    "value": "tf.square(selfmean - othermean) / (var_alpha + tol)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_380": {
                "x": {
                    "value": "tf.constant(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_230": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_238": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_253": {
                "x": {
                    "value": "tf.reduce_prod(tf.square(self.std), axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_294": {
                "x": {
                    "value": "self.mean - other.mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_316": {
                "input_tensor": {
                    "value": "tf.square((x - selfmean) / tf.exp(selflogstd))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_317": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_380": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_394": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_252": {
                "input_tensor": {
                    "value": "var_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * tf.square(other.std) + (1.0 - alpha) * tf.square(self.std)",
                            "BinOp"
                        ],
                        [
                            "alpha * tf.square(other.std) + (1.0 - alpha) * tf.square(self.std)",
                            "BinOp"
                        ],
                        [
                            "alpha * tf.exp(2 * otherlogstd) + (1.0 - alpha) * tf.exp(2 * selflogstd)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_254": {
                "input_tensor": {
                    "value": "tf.square(other.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_316": {
                "x": {
                    "value": "(x - selfmean) / tf.exp(selflogstd)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_340": {
                "x": {
                    "value": "selfmean - othermean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_341": {
                "x": {
                    "value": "tf.reduce_prod(var_alpha, axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_343": {
                "x": {
                    "value": "tf.reduce_prod(tf.exp(otherlogstd), axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_prod_253": {
                "input_tensor": {
                    "value": "tf.square(self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_254": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_317": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_322": {
                "x": {
                    "value": "2 * otherlogstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_322": {
                "x": {
                    "value": "selfmean - othermean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_342": {
                "x": {
                    "value": "tf.reduce_prod(tf.exp(2 * selflogstd), axis=-1) + tol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_253": {
                "x": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_316": {
                "x": {
                    "value": "selflogstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_prod_341": {
                "input_tensor": {
                    "value": "var_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * tf.square(other.std) + (1.0 - alpha) * tf.square(self.std)",
                            "BinOp"
                        ],
                        [
                            "alpha * tf.square(other.std) + (1.0 - alpha) * tf.square(self.std)",
                            "BinOp"
                        ],
                        [
                            "alpha * tf.exp(2 * otherlogstd) + (1.0 - alpha) * tf.exp(2 * selflogstd)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_343": {
                "input_tensor": {
                    "value": "tf.exp(otherlogstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_342": {
                "input_tensor": {
                    "value": "tf.exp(2 * selflogstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_343": {
                "x": {
                    "value": "otherlogstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_342": {
                "x": {
                    "value": "2 * selflogstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_75": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_55": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_215": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "grad_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "aggregation_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "colocate_gradients_with_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_293": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_294": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_41": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_81": {
                "main": {
                    "value": "tf.variables_initializer(new_variables)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_176": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_218": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_233": {
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_248": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_255": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(tf.reshape(v, [numel(v)]), tf.float32) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_269": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_295": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_311": {
                "x": {
                    "value": "reduce_var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_61": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_63": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_81": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_92": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_251": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_259": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_42": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_43": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_111": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_117": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_session_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_195": {
                "main": {
                    "value": "self.outputs_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "clip_by_norm_217": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assign_231": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(values[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_118": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "tensor": {
                    "value": "values[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_246": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_255": {
                "x": {
                    "value": "tf.reshape(v, [numel(v)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_219": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ddpg/ddpg.py": {
        "tensorflow": {
            "reduce_mean_29": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_30": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "x": {
                    "value": "reduce_var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_60": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.obs0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.obs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.terminals1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + action_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "normalized_obs0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs0, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "normalized_obs1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs1, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_166": {
                "variable": {
                    "value": "self.adaptive_policy_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.actor_tf - adaptive_actor_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_181": {
                "variable": {
                    "value": "normalized_critic_target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.critic_target, self.ret_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.normalized_critic_tf - normalized_critic_target_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "self.old_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.old_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_44": {
                "*inputs": {
                    "value": "*soft_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_40": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            },
            "assign_41": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1.0 - tau) * target_var + tau * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_129": {
                "t": {
                    "value": "self.normalized_critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "t": {
                    "value": "self.normalized_critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "tf.square(self.actor_tf - adaptive_actor_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_182": {
                "x": {
                    "value": "self.normalized_critic_tf - normalized_critic_target_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "self.critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "self.actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_55": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(tf.shape(var), mean=0.0, stddev=param_noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_58": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "obs_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "ret_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "self.actor_tf - adaptive_actor_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "input_tensor": {
                    "value": "self.obs_rms.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "self.perturbed_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ddpg/main.py": {
        "tensorflow": {
            "reset_default_graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ddpg/models.py": {
        "tensorflow": {
            "get_collection_11": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.nb_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_44": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_71": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ddpg/training.py": {
        "tensorflow": {
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/logger.py": {
        "tensorflow": {
            "summary_iterator_406": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "as_bytes_153": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/pbpois/parallel_sampler.py": {
        "tensorflow": {}
    },
    "baselines/pois1/pois1.py": {
        "tensorflow": {
            "placeholder_350": {
                "variable": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "horizon * n_episodes",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "disc_rew_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "horizon * n_episodes",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_rew",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_352": {
                "variable": {
                    "value": "gradient_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_parameters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_360": {
                "variable": {
                    "value": "disc_rew_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(disc_rew_ * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "log_ratio_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(log_ratio * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_362": {
                "variable": {
                    "value": "target_log_pdf_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(target_log_pdf * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_363": {
                "variable": {
                    "value": "mask_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_366": {
                "variable": {
                    "value": "emp_d2_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(pi.pd.renyi(oldpi.pd, 2) * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "variable": {
                    "value": "emp_d2_cum_split",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "emp_d2_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(pi.pd.renyi(oldpi.pd, 2) * mask_, n_episodes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "empirical_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(emp_d2_cum_split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_371": {
                "variable": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_split * disc_rew_split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_375": {
                "variable": {
                    "value": "return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_377": {
                "variable": {
                    "value": "return_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_min_378": {
                "variable": {
                    "value": "return_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_379": {
                "variable": {
                    "value": "return_abs_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(ep_return)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_426": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_427": {
                "variable": {
                    "value": "target_logpdf_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_log_pdf_split * mask_split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_429": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_logprob * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_360": {
                "value": {
                    "value": "disc_rew_ * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_361": {
                "value": {
                    "value": "log_ratio * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_362": {
                "value": {
                    "value": "target_log_pdf * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_363": {
                "value": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=max_samples, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_366": {
                "value": {
                    "value": "pi.pd.renyi(oldpi.pd, 2) * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_368": {
                "x": {
                    "value": "emp_d2_cum_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(emp_d2_split, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_379": {
                "x": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_384": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratio_split, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_419": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_419": {
                "input_tensor": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_419": {
                "input_tensor": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_min_420": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_420": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_373": {
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iwn * ep_return",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_384": {
                "input_tensor": {
                    "value": "log_ratio_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(log_ratio * mask_, n_episodes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_390": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iwn * ep_return",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_400": {
                "tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_428": {
                "input": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_434": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_393": {
                "variable": {
                    "value": "mean_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_395": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw * ep_return - beta * (iw - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_399": {
                "tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_408": {
                "x": {
                    "value": "(1 - delta) / (delta * ess_renyi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_410": {
                "x": {
                    "value": "(1 - delta) / (delta * ess_renyi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_394": {
                "input_tensor": {
                    "value": "(iw - mean_iw) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_412": {
                "x": {
                    "value": "(1 - delta) / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_414": {
                "x": {
                    "value": "(1 - delta) / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/pois1/run_gym.py": {
        "tensorflow": {}
    },
    "baselines/pois1/run_rllab.py": {
        "tensorflow": {}
    },
    "baselines/pois2/pois2.py": {
        "tensorflow": {
            "placeholder_310": {
                "variable": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "horizon * n_episodes",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "disc_rew_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "horizon * n_episodes",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "disc_rew",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "gradient_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_parameters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "disc_rew_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(disc_rew_ * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_321": {
                "variable": {
                    "value": "log_ratio_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(log_ratio * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_322": {
                "variable": {
                    "value": "target_log_pdf_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(target_log_pdf * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_323": {
                "variable": {
                    "value": "mask_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "emp_d2_split",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(pi.pd.renyi(oldpi.pd, 2) * mask_, n_episodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_327": {
                "variable": {
                    "value": "emp_d2_cum_split",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "emp_d2_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(pi.pd.renyi(oldpi.pd, 2) * mask_, n_episodes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_328": {
                "variable": {
                    "value": "empirical_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(emp_d2_cum_split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_331": {
                "variable": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_split * disc_rew_split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_335": {
                "variable": {
                    "value": "return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_337": {
                "variable": {
                    "value": "return_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_min_338": {
                "variable": {
                    "value": "return_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_339": {
                "variable": {
                    "value": "return_abs_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(ep_return)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_386": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "target_logpdf_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_log_pdf_split * mask_split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_logprob * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_320": {
                "value": {
                    "value": "disc_rew_ * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_321": {
                "value": {
                    "value": "log_ratio * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_322": {
                "value": {
                    "value": "target_log_pdf * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_323": {
                "value": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=max_samples, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_326": {
                "value": {
                    "value": "pi.pd.renyi(oldpi.pd, 2) * mask_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_episodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_328": {
                "x": {
                    "value": "emp_d2_cum_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(emp_d2_split, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_339": {
                "x": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_344": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratio_split, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_379": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_379": {
                "input_tensor": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_379": {
                "input_tensor": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_min_380": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_380": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_333": {
                "input_tensor": {
                    "value": "ep_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask_split * disc_rew_split, axis=1)",
                            "Call"
                        ],
                        [
                            "ep_return - tf.reduce_mean(ep_return)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_347": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iwn * ep_return",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_344": {
                "input_tensor": {
                    "value": "log_ratio_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(log_ratio * mask_, n_episodes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_350": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iwn * ep_return",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_360": {
                "tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_388": {
                "input": {
                    "value": "iwn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ],
                        [
                            "iw / tf.reduce_sum(iw)",
                            "BinOp"
                        ],
                        [
                            "iw / n_episodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_394": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_353": {
                "variable": {
                    "value": "mean_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_355": {
                "variable": {
                    "value": "w_return_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw * ep_return - beta * (iw - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_359": {
                "tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "(1 - delta) / (delta * ess_renyi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_349": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(log_ratio_split, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_370": {
                "x": {
                    "value": "(1 - delta) / (delta * ess_renyi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_354": {
                "input_tensor": {
                    "value": "(iw - mean_iw) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_372": {
                "x": {
                    "value": "(1 - delta) / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_374": {
                "x": {
                    "value": "(1 - delta) / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/pois2/run_gym.py": {
        "tensorflow": {}
    },
    "baselines/pois2/run_rllab.py": {
        "tensorflow": {}
    },
    "baselines/policy/cnn_policy.py": {
        "tensorflow": {
            "placeholder_74": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "self.flat_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "variable": {
                    "value": "self.fisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "detSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_130": {
                "variable": {
                    "value": "detOtherSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(other.logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_132": {
                "variable": {
                    "value": "detMixSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mixSigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "order * tf.exp(self.logstd) + (1 - order) * tf.exp(other.logstd)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_135": {
                "variable": {
                    "value": "e_renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "order / 2 * (self.mean - other.mean) / mixSigma * (self.mean - other.mean) - 1.0 / (2 * (order - 1)) * (tf.log(detMixSigma) - (1 - order) * tf.log(detSigma) - order * tf.log(detOtherSigma))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_386": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * horizon, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_387": {
                "variable": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.rew",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lens)",
                            "Call"
                        ],
                        [
                            "lens_or_batch_size",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_388": {
                "variable": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.rew, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(rews_by_episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumprod_390": {
                "variable": {
                    "value": "disc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma + 0 * rews_by_episode",
                            "BinOp"
                        ],
                        [
                            "tf.cumprod(disc, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_392": {
                "variable": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_513": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_535": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_537": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_36": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_49": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nature_cnn(ob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "output_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(0.01)",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pol_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "output_b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_64": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nature_cnn(ob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "output_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(0.01)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "input_tensor": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_396": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_397": {
                "variable": {
                    "value": "grad_avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_398": {
                "variable": {
                    "value": "grad_var_J",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_399": {
                "variable": {
                    "value": "avg_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_400": {
                "variable": {
                    "value": "var_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_401": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_406": {
                "variable": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_407": {
                "variable": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_408": {
                "variable": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lens)",
                            "Call"
                        ],
                        [
                            "lens_or_batch_size",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_409": {
                "variable": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_458": {
                "variable": {
                    "value": "(avg_ret, var_ret)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_459": {
                "variable": {
                    "value": "max_ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_501": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_504": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_505": {
                "variable": {
                    "value": "fisher",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fisher",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(iw, fisher)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_512": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_126": {
                "x": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_131": {
                "x": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_289": {
                "x": {
                    "value": "self._var_J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_326": {
                "x": {
                    "value": "self._var_J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_412": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cumsum(log_ratios_by_episode, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_430": {
                "variable": {
                    "value": "(avg_iw, var_iw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "eff_iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_rets / rets",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_431": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eff_iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_rets / rets",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_434": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratios_by_episode, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_451": {
                "variable": {
                    "value": "ess",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iw) ** 2 / tf.reduce_sum(iw ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_452": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_53": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nature_cnn(ob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "hidden_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_415": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "truncate_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_416": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(disc_rews, iw)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_417": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(rets, iw)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_421": {
                "variable": {
                    "value": "avg_J_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disc_rews * iw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_423": {
                "variable": {
                    "value": "avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "avg_J_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(disc_rews * iw, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_428": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(disc_rews, iw)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_437": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "truncate_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_438": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(disc_rews, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_439": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(rets, iw)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_440": {
                "variable": {
                    "value": "(avg_iw, var_iw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_441": {
                "variable": {
                    "value": "ess",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iw) ** 2 / tf.reduce_sum(iw ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_445": {
                "variable": {
                    "value": "avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rets * iw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_448": {
                "variable": {
                    "value": "avg_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_458": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_459": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_504": {
                "input_tensor": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dense_52": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nature_cnn(ob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "hidden_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_134": {
                "x": {
                    "value": "detSigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(self.logstd))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_412": {
                "x": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_434": {
                "input_tensor": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_416": {
                "x": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_420": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_424": {
                "input_tensor": {
                    "value": "disc ** 2 * tf.reduce_mean(iw ** 2 * (rews_by_episode - avg_J_t) ** 2, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_428": {
                "x": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_444": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_446": {
                "input_tensor": {
                    "value": "iw ** 2 * (rets - avg_J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_449": {
                "input_tensor": {
                    "value": "(iw - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_451": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_441": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_424": {
                "input_tensor": {
                    "value": "iw ** 2 * (rews_by_episode - avg_J_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/policy/mlp_policy.py": {
        "tensorflow": {
            "placeholder_81": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "self.flat_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "self.fisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_143": {
                "variable": {
                    "value": "detSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_144": {
                "variable": {
                    "value": "detOtherSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(other.logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_146": {
                "variable": {
                    "value": "detMixSigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mixSigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "order * tf.exp(self.logstd) + (1 - order) * tf.exp(other.logstd)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_149": {
                "variable": {
                    "value": "e_renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "order / 2 * (self.mean - other.mean) / mixSigma * (self.mean - other.mean) - 1.0 / (2 * (order - 1)) * (tf.log(detMixSigma) - (1 - order) * tf.log(detSigma) - order * tf.log(detOtherSigma))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_60": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_101": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_400": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * horizon, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_401": {
                "variable": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.rew",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lens)",
                            "Call"
                        ],
                        [
                            "lens_or_batch_size",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_402": {
                "variable": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rews_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.rew, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(rews_by_episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumprod_404": {
                "variable": {
                    "value": "disc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma + 0 * rews_by_episode",
                            "BinOp"
                        ],
                        [
                            "tf.cumprod(disc, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_406": {
                "variable": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_527": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_549": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_551": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_40": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_52": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value((ob - self.ob_rms.mean) / self.ob_rms.std, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "output_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(0.01)",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pol_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "output_b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_71": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value((ob - self.ob_rms.mean) / self.ob_rms.std, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "output_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(0.01)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_410": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_411": {
                "variable": {
                    "value": "grad_avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_412": {
                "variable": {
                    "value": "grad_var_J",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "avg_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "var_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_415": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_420": {
                "variable": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_421": {
                "variable": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_422": {
                "variable": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lens)",
                            "Call"
                        ],
                        [
                            "lens_or_batch_size",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_423": {
                "variable": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_472": {
                "variable": {
                    "value": "(avg_ret, var_ret)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_473": {
                "variable": {
                    "value": "max_ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(disc_rews, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_515": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_518": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_519": {
                "variable": {
                    "value": "fisher",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fisher",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(iw, fisher)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_526": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_140": {
                "x": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_145": {
                "x": {
                    "value": "other.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_303": {
                "x": {
                    "value": "self._var_J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_340": {
                "x": {
                    "value": "self._var_J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_426": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cumsum(log_ratios_by_episode, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_444": {
                "variable": {
                    "value": "(avg_iw, var_iw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "eff_iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_rets / rets",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_445": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eff_iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_rets / rets",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_448": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(log_ratios_by_episode, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_465": {
                "variable": {
                    "value": "ess",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iw) ** 2 / tf.reduce_sum(iw ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_466": {
                "variable": {
                    "value": "max_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_56": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value((ob - self.ob_rms.mean) / self.ob_rms.std, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "hidden_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_62": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value((ob - self.ob_rms.mean) / self.ob_rms.std, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "hidden_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_410": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_429": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "truncate_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_430": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(disc_rews, iw)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_431": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(rets, iw)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_435": {
                "variable": {
                    "value": "avg_J_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "disc_rews * iw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_437": {
                "variable": {
                    "value": "avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "avg_J_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(disc_rews * iw, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_442": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(disc_rews, iw)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_451": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "truncate_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ],
                        [
                            "np.infty",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_452": {
                "variable": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(disc_rews, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_453": {
                "variable": {
                    "value": "(avg_J, var_J)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_rets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(disc_rews, iw), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(rets, iw)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_454": {
                "variable": {
                    "value": "(avg_iw, var_iw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_455": {
                "variable": {
                    "value": "ess",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iw) ** 2 / tf.reduce_sum(iw ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_459": {
                "variable": {
                    "value": "avg_J",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rets * iw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_462": {
                "variable": {
                    "value": "avg_iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_472": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_473": {
                "input_tensor": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_518": {
                "input_tensor": {
                    "value": "log_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(log_ratios, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(log_ratios, self.mask)",
                            "Call"
                        ],
                        [
                            "self.logprobs - behavioral.pd.logp(self.ac_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dense_55": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value((ob - self.ob_rms.mean) / self.ob_rms.std, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size[i], name='fc%i' % (i + 1), kernel_initializer=hidden_W_init, use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "hidden_W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.normc_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_148": {
                "x": {
                    "value": "detSigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(self.logstd))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_426": {
                "x": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_448": {
                "input_tensor": {
                    "value": "log_ratios_by_episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(log_ratios, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.stack(log_ratios_by_episode)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_430": {
                "x": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_434": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_438": {
                "input_tensor": {
                    "value": "disc ** 2 * tf.reduce_mean(iw ** 2 * (rews_by_episode - avg_J_t) ** 2, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_442": {
                "x": {
                    "value": "disc_rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rews_by_episode * disc",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_458": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_460": {
                "input_tensor": {
                    "value": "iw ** 2 * (rets - avg_J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_463": {
                "input_tensor": {
                    "value": "(iw - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_465": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_455": {
                "input_tensor": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.cumsum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios_by_episode, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(iw, 0, truncate_at)",
                            "Call"
                        ],
                        [
                            "batch_size * iw / tf.reduce_sum(iw, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.reduce_sum(log_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_438": {
                "input_tensor": {
                    "value": "iw ** 2 * (rews_by_episode - avg_J_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/policy/neuron_hyperpolicy.py": {
        "tensorflow": {
            "moments_148": {
                "variable": {
                    "value": "(ret_mean, ret_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "rets_in",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_153": {
                "variable": {
                    "value": "self._det_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.higher_logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_156": {
                "variable": {
                    "value": "mean_fisher_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2 * self.higher_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "self._fisher_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean_fisher_diag, cov_fisher_diag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_340": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batchsize",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_343": {
                "variable": {
                    "value": "unn_iws",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pd.logp(self._actor_params_in) - behavioral.pd.logp(self._actor_params_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_379": {
                "variable": {
                    "value": "self._ppf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "penal_coeff",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_83": {
                "variable": {
                    "value": "self.actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "self.flat_actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in self.actor_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_94": {
                "variable": {
                    "value": "higher_mean_init",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(self.flat_actor_weights, tf.constant(0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal(shape=[n_actor_weights.value], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros(shape=[n_actor_weights])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "self.higher_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "higher_mean",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "higher_mean_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(self.flat_actor_weights, tf.constant(0, dtype=tf.float32)), tf.random_normal(shape=[n_actor_weights.value], stddev=0.01), tf.zeros(shape=[n_actor_weights]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_117": {
                "variable": {
                    "value": "actor_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_133": {
                "variable": {
                    "value": "self._higher_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "self.flat_higher_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in self._higher_params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_225": {
                "main": {
                    "value": "self._use_sampled_actor_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_351": {
                "variable": {
                    "value": "ret_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(self._rets_in, -1) * iws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_353": {
                "variable": {
                    "value": "ret_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iws ** 2 * (tf.expand_dims(self._rets_in, -1) - ret_mean) ** 2) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_356": {
                "variable": {
                    "value": "unn_ret_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(self._rets_in, -1) * unn_iws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_358": {
                "variable": {
                    "value": "unn_ret_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((unn_iws * tf.expand_dims(self._rets_in, -1) - ret_mean) ** 2) / (batch_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_364": {
                "variable": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(renyi)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(np.inf, shape=renyi.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pd.renyi(other.pd, alpha=2)",
                            "Call"
                        ],
                        [
                            "self.pd.renyi(behavioral.pd)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(renyi), tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ],
                        [
                            "tf.where(renyi < 0.0, tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_365": {
                "variable": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "renyi < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(np.inf, shape=renyi.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pd.renyi(other.pd, alpha=2)",
                            "Call"
                        ],
                        [
                            "self.pd.renyi(behavioral.pd)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(renyi), tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ],
                        [
                            "tf.where(renyi < 0.0, tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_370": {
                "variable": {
                    "value": "iws2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unn_iws / tf.reduce_sum(unn_iws, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "self._rmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "R_max",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_376": {
                "variable": {
                    "value": "(on_ret_mean, on_ret_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_23": {
                "main": {
                    "value": "self._use_sampled_actor_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "self.actor_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "higher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "self.higher_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "higher_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_actor_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[higher_mean, higher_mean * 0.0 + higher_logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "higher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "input_tensor": {
                    "value": "self.higher_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "input_tensor": {
                    "value": "unn_iws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.pd.logp(self._actor_params_in) - behavioral.pd.logp(self._actor_params_in))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_94": {
                "x": {
                    "value": "self.flat_actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "shape": {
                    "value": "[n_actor_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_364": {
                "x": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pd.renyi(other.pd, alpha=2)",
                            "Call"
                        ],
                        [
                            "self.pd.renyi(behavioral.pd)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(renyi), tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ],
                        [
                            "tf.where(renyi < 0.0, tf.constant(np.inf, shape=renyi.shape), renyi)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_364": {
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "renyi.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_365": {
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "renyi.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_62": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_69": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_351": {
                "input": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "input_tensor": {
                    "value": "iws ** 2 * (tf.expand_dims(self._rets_in, -1) - ret_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_356": {
                "input": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_358": {
                "input_tensor": {
                    "value": "(unn_iws * tf.expand_dims(self._rets_in, -1) - ret_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_61": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_85": {
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_383": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_385": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_385": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_389": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_353": {
                "input": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_358": {
                "input": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_389": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_391": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_393": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_393": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_397": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_397": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/policy/weight_hyperpolicy.py": {
        "tensorflow": {
            "moments_156": {
                "variable": {
                    "value": "(ret_mean, ret_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "rets_in",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "score_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.flatgrad(one_logprob, higher_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_177": {
                "variable": {
                    "value": "self._probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_182": {
                "variable": {
                    "value": "self._one_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "one_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pd.logp(one_actor_param_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_185": {
                "variable": {
                    "value": "self._det_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.higher_logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_188": {
                "variable": {
                    "value": "mean_fisher_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2 * self.higher_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "self._fisher_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean_fisher_diag, cov_fisher_diag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_519": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batchsize",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_523": {
                "variable": {
                    "value": "unn_iws",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.pd.independent_logps(self._actor_params_in) - behavioral.pd.independent_logps(self._actor_params_in), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_530": {
                "variable": {
                    "value": "ret_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._rets_in * iws",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_531": {
                "variable": {
                    "value": "unn_ret_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._rets_in * unn_iws",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_533": {
                "variable": {
                    "value": "ret_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(iws ** 2 * (self._rets_in - ret_mean) ** 2) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_548": {
                "variable": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_nan(renyi)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(np.inf)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : renyi",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_549": {
                "variable": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "renyi < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(np.inf)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : renyi",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "norm_552": {
                "variable": {
                    "value": "iws2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ravel(self._get_iws(actor_params)[0])",
                            "Call"
                        ],
                        [
                            "unn_iws / tf.reduce_sum(unn_iws)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_555": {
                "variable": {
                    "value": "self._rmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "R_max",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_556": {
                "variable": {
                    "value": "(on_ret_mean, on_ret_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self._rets_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_559": {
                "variable": {
                    "value": "self._ppf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "penal_coeff",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_82": {
                "variable": {
                    "value": "self.actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "self.flat_actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in self.actor_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_90": {
                "variable": {
                    "value": "higher_mean_init",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(self.flat_actor_weights, tf.constant(0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal(shape=[n_actor_weights.value], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros(shape=[n_actor_weights])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "self.higher_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "higher_mean",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "higher_mean_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(self.flat_actor_weights, tf.constant(0, dtype=tf.float32)), tf.random_normal(shape=[n_actor_weights.value], stddev=0.01), tf.zeros(shape=[n_actor_weights]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_124": {
                "variable": {
                    "value": "actor_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_140": {
                "variable": {
                    "value": "self._higher_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "self.flat_higher_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(w, [-1]) for w in self._higher_params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_257": {
                "main": {
                    "value": "self._use_sampled_actor_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "self._renyi_order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "renyi_order",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_23": {
                "main": {
                    "value": "self._use_sampled_actor_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "self.actor_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "higher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "self.higher_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "higher_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_actor_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[higher_mean, higher_mean * 0.0 + higher_logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "self.higher_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "higher_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_actor_weights * (n_actor_weights + 1) // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[higher_mean, higher_logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "actor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "higher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "input_tensor": {
                    "value": "self.higher_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_523": {
                "input_tensor": {
                    "value": "self.pd.independent_logps(self._actor_params_in) - behavioral.pd.independent_logps(self._actor_params_in)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_525": {
                "input_tensor": {
                    "value": "unn_iws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.reduce_sum(self.pd.independent_logps(self._actor_params_in) - behavioral.pd.independent_logps(self._actor_params_in), axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_548": {
                "x": {
                    "value": "renyi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pd.renyi(other.pd, alpha=self._renyi_order)",
                            "Call"
                        ],
                        [
                            "self.pd.renyi(behavioral.pd)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.is_nan(renyi), lambda : tf.constant(np.inf), lambda : renyi)",
                            "Call"
                        ],
                        [
                            "tf.cond(renyi < 0.0, lambda : tf.constant(np.inf), lambda : renyi)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_90": {
                "x": {
                    "value": "self.flat_actor_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[n_actor_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_533": {
                "input_tensor": {
                    "value": "iws ** 2 * (self._rets_in - ret_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_548": {
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_549": {
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_61": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_68": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_537": {
                "input": {
                    "value": "iws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ravel(self._get_iws(actor_params)[0])",
                            "Call"
                        ],
                        [
                            "unn_iws / tf.reduce_sum(unn_iws)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_564": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_566": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_568": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_570": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ],
                        [
                            "len(rets)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_60": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "ob",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1), use_bias=use_bias))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_99": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_563": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_564": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_566": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_567": {
                "x": {
                    "value": "on_ret_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_568": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_570": {
                "x": {
                    "value": "0.5 * renyi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "dense_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_38": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_26": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "placeholder_96": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_113": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_114": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_124": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/policies.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Ob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pi, pi * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "unscaled_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, actdim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/ppo2.py": {
        "tensorflow": {
            "get_default_session_14": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "OLDNEGLOGPAC",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "OLDVPRED",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_32": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "OLDNEGLOGPAC - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(pg_losses, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "clipfrac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.greater(tf.abs(ratio - 1.0), CLIPRANGE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_44": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_48": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_43": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_46": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_84": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_31": {
                "t": {
                    "value": "train_model.vf - OLDVPRED",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-CLIPRANGE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.maximum(vf_losses1, vf_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_37": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(OLDNEGLOGPAC - neglogpac)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "x": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * ratio",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "tf.square(neglogpac - OLDNEGLOGPAC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "x": {
                    "value": "tf.greater(tf.abs(ratio - 1.0), CLIPRANGE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_34": {
                "x": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - R)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - R)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "x": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_40": {
                "x": {
                    "value": "tf.abs(ratio - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_40": {
                "x": {
                    "value": "ratio - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/run_atari.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_20": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ppo2/run_mujoco.py": {
        "tensorflow": {
            "ConfigProto_15": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Session_18": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/trpo_mpi/nosharing_cnn_policy.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_28": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_36": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_126": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_131": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "Name"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_156": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_129": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_159": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_mpi/trpo_mpi_per_episode.py": {
        "tensorflow": {
            "placeholder_112": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_126": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_142": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "Name"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_151": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_124": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_154": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}