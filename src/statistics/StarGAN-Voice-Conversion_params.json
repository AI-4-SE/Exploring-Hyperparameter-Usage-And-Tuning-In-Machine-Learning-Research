{
    "preprocess.py": {
        "sklearn": {
            "train_test_split_42": {
                "variable": {
                    "value": "(train_indices, test_indices)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "np.arange(len(paths))",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "test_size",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1234",
                    "possible_values": []
                }
            }
        }
    },
    "convert.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "G_path",
                    "possible_values": [
                        [
                            "join(config.model_save_dir, f'{config.resume_iters}-G.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "MyDataset_47": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "MyDataset(data_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "mode == 'train'",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "Down2d_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_12": {
                    "variable": {
                        "value": "self.c1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "kernel",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_13": {
                    "variable": {
                        "value": "self.n1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "True",
                        "possible_values": []
                    },
                    "track_running_stats": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "GLU_14": {
                    "variable": {
                        "value": "self.glu",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Up2d_24": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ConvTranspose2d_28": {
                    "variable": {
                        "value": "self.c1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "kernel",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_29": {
                    "variable": {
                        "value": "self.n1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "True",
                        "possible_values": []
                    },
                    "track_running_stats": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "GLU_30": {
                    "variable": {
                        "value": "self.glu",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Generator_40": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_44": {
                    "variable": {
                        "value": "self.downsample",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Down2d(1, 32, (3, 9), (1, 1), (1, 4))",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_58": {
                    "variable": {
                        "value": "self.deconv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "86",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(3, 9)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 4)",
                        "possible_values": []
                    }
                }
            },
            "Discriminator_90": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_100": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "86",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(36, 5)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(36, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(0, 2)",
                        "possible_values": []
                    }
                },
                "AvgPool2d_101": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 64)",
                        "possible_values": []
                    }
                }
            },
            "DomainClassifier_132": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_136": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Down2d(1, 8, (4, 4), (2, 2), (5, 1))",
                        "possible_values": []
                    }
                }
            },
            "device_153": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c5], dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c5], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c5], dim=1)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c2], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c4], dim=1)",
                            "Call"
                        ],
                        [
                            "self.d4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, c5], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "70",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            },
            "AvgPool2d_142": {
                "kernel_size": {
                    "value": "(1, 16)",
                    "possible_values": []
                }
            },
            "Softmax_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.g_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.g_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.d_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.d_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "self.c_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.C.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.c_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "possible_values": []
                }
            },
            "ones_134": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "variable": {
                    "value": "dydx_l2norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "mean_144": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "possible_values": []
                }
            },
            "cross_entropy_160": {
                "input": {
                    "value": "logit",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "mean_242": {
                "variable": {
                    "value": "d_loss_fake",
                    "possible_values": []
                },
                "input": {
                    "value": "out_src",
                    "possible_values": [
                        [
                            "self.D(mc_real, spk_c_org)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake.detach(), spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(x_hat, spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake, spk_c_trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_245": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "mc_real.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "G_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "D_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "C_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-C.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-C.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "grad_135": {
                "outputs": {
                    "value": "y",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "dydx ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_283": {
                "variable": {
                    "value": "g_loss_rec",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_real - mc_reconst)",
                    "possible_values": []
                }
            },
            "mean_287": {
                "variable": {
                    "value": "g_loss_id_rec",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_real - mc_reconst_id)",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_229": {
                "input": {
                    "value": "out_src",
                    "possible_values": [
                        [
                            "self.D(mc_real, spk_c_org)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake.detach(), spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(x_hat, spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake, spk_c_trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_355": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_356": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_357": {
                "obj": {
                    "value": "self.C.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "C_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-C.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-C.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_276": {
                "input": {
                    "value": "out_src",
                    "possible_values": [
                        [
                            "self.D(mc_real, spk_c_org)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake.detach(), spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(x_hat, spk_c_trg)",
                            "Call"
                        ],
                        [
                            "self.D(mc_fake, spk_c_trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_283": {
                "input": {
                    "value": "mc_real - mc_reconst",
                    "possible_values": []
                }
            },
            "abs_287": {
                "input": {
                    "value": "mc_real - mc_reconst_id",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "solver_cumulant.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.g_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.g_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.d_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.d_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "possible_values": []
                }
            },
            "sqrt_134": {
                "variable": {
                    "value": "dydx_l2norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "possible_values": []
                }
            },
            "cross_entropy_151": {
                "input": {
                    "value": "logit",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "rand_240": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "mc_real.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "G_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "D_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "grad_126": {
                "outputs": {
                    "value": "y",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "dydx ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_222": {
                "variable": {
                    "value": "max_val",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.beta * out_src",
                    "possible_values": []
                }
            },
            "mean_234": {
                "variable": {
                    "value": "d_loss_fake",
                    "possible_values": []
                },
                "input": {
                    "value": "out_src",
                    "possible_values": []
                }
            },
            "max_236": {
                "variable": {
                    "value": "max_val",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gamma * out_src",
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "g_loss_rec",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_real - mc_reconst)",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_270": {
                "variable": {
                    "value": "max_val",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gamma * out_src",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_345": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_220": {
                "input": {
                    "value": "out_src",
                    "possible_values": []
                }
            },
            "abs_277": {
                "input": {
                    "value": "mc_real - mc_reconst",
                    "possible_values": []
                }
            },
            "no_grad_311": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_223": {
                "input": {
                    "value": "torch.mean(torch.exp(-self.beta * out_src - max_val))",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "torch.mean(torch.exp(self.gamma * out_src - max_val))",
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "out_src",
                    "possible_values": []
                }
            },
            "mean_223": {
                "input": {
                    "value": "torch.exp(-self.beta * out_src - max_val)",
                    "possible_values": []
                }
            },
            "mean_237": {
                "input": {
                    "value": "torch.exp(self.gamma * out_src - max_val)",
                    "possible_values": []
                }
            },
            "log_271": {
                "input": {
                    "value": "torch.mean(torch.exp(self.gamma * out_src - max_val))",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "-self.beta * out_src - max_val",
                    "possible_values": []
                }
            },
            "exp_237": {
                "input": {
                    "value": "self.gamma * out_src - max_val",
                    "possible_values": []
                }
            },
            "mean_271": {
                "input": {
                    "value": "torch.exp(self.gamma * out_src - max_val)",
                    "possible_values": []
                }
            },
            "exp_271": {
                "input": {
                    "value": "self.gamma * out_src - max_val",
                    "possible_values": []
                }
            }
        }
    }
}