{
    "util/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/ade20k_dataset.py": {
        "torch": {
            "from_numpy_90": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label_foreground)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_foreground)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_418": {
                "variable": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label_foreground)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_foreground)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_429": {
                "variable": {
                    "value": "retrival_labellist_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "retrival_labellist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_451": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fine_label_tensor.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "label_np - 1",
                            "BinOp"
                        ],
                        [
                            "fine_label_tensor.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "label_np - 1",
                            "BinOp"
                        ],
                        [
                            "pickle.load(open(box_path, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_386": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(1), fine_label_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_tensor.size(0), fine_label_tensor.size(1)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 151, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/cityscapes_dataset.py": {
        "torch": {
            "from_numpy_89": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(box_path, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(box_path, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_444": {
                "variable": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_foreground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label_foreground)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_451": {
                "variable": {
                    "value": "retrival_labellist_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "retrival_labellist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ],
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_415": {
                "variable": {
                    "value": "label_back_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35) + ins_np.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 35, fine_label_retrival_tensor.size(1), fine_label_retrival_tensor.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_483": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(box_path, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(box_path, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/pix2pix_dataset.py": {
        "torch": {}
    },
    "models/__init__.py": {
        "torch": {}
    },
    "models/networks/__init__.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/architecture.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_36": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_91": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_92": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_147": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_94": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_158": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_161": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/base_network.py": {
        "torch": {}
    },
    "models/networks/discriminator.py": {
        "torch": {
            "avg_pool2d_47": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/encoder.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ndf * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/generator.py": {
        "torch": {
            "LogSoftmax_59": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_63": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.encode_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.opt.semantic_nc, self.opt.semantic_nc, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.memory_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.opt.semantic_nc, self.opt.semantic_nc, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1_1_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_88": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_91": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "seg_and_retrivallabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg, retrival_label_list]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_287": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "variable": {
                    "value": "self.conv_img_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.opt.label_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_292": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_368": {
                "variable": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_403": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_404": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_406": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_407": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_412": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_413": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_415": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.opt.label_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_418": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_435": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_436": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_437": {
                "variable": {
                    "value": "self.conv_img_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_438": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.opt.label_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_440": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_473": {
                "variable": {
                    "value": "fcn_box_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg",
                            "Name"
                        ],
                        [
                            "self.relu1_1(self.conv1_1(h))",
                            "Call"
                        ],
                        [
                            "self.relu1_2(self.conv1_2(h))",
                            "Call"
                        ],
                        [
                            "self.pool1(h)",
                            "Call"
                        ],
                        [
                            "self.relu2_1(self.conv2_1(h))",
                            "Call"
                        ],
                        [
                            "self.relu2_2(self.conv2_2(h))",
                            "Call"
                        ],
                        [
                            "self.pool2(h)",
                            "Call"
                        ],
                        [
                            "self.drop2(h)",
                            "Call"
                        ],
                        [
                            "self.upscore(h)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(seg, fcn_box_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_528": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_532": {
                "variable": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_555": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_596": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.fc_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_323": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "m_1 + actv[:, 0, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((seg, fcn_box_out), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_325": {
                "variable": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fine",
                            "Name"
                        ],
                        [
                            "input_fine",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "(self.opt.semantic_nc - 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "variable": {
                    "value": "self.fc_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_487": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "m_1 + actv[:, 0, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((seg, fcn_box_out), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_489": {
                "variable": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fine",
                            "Name"
                        ],
                        [
                            "input_fine",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_200": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg[:, 0:self.opt.semantic_nc, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "m_1 + actv[:, 0, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((seg, fcn_box_out), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_237": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_240": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_317": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_360": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_363": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_367": {
                "input": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_481": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_524": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_527": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg[:, 0:self.opt.semantic_nc, :, :], size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_531": {
                "input": {
                    "value": "x_fine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_fine, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc_fine(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.up(x_fine)",
                            "Call"
                        ],
                        [
                            "self.conv_img_fine(F.leaky_relu(x_fine, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x_fine)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_560": {
                "padding": {
                    "value": "opt.resnet_initial_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_592": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_593": {
                "in_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.output_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_594": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_561": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.label_nc + (1 if opt.contain_dontcare_label else 0) + (0 if opt.no_instance else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.resnet_initial_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_569": {
                "in_channels": {
                    "value": "opt.ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_585": {
                "in_channels": {
                    "value": "nc_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/loss.py": {
        "torch": {
            "L1Loss_106": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/normalization.py": {
        "torch": {
            "Sequential_89": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_106": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_44": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "models/networks/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_dual_segspademodel.py": {
        "torch": {
            "Adam_86": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "D_params + list(self.netD_fine.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_340": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_341": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_32": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "input_semantics_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics_fine, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "seg_fcn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "seg_fcn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_dualmodel.py": {
        "torch": {
            "Adam_88": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "D_params + list(self.netD_fine.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_313": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_314": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_32": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(seg_out, dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_dualunpair.py": {
        "torch": {
            "Adam_88": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "D_params + list(self.netD_fine.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_313": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_314": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_32": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(seg_out, dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "seg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_model.py": {
        "torch": {
            "Adam_139": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_472": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_473": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_33": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_184": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-fid/fid_score.py": {
        "torch": {
            "from_numpy_163": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(temp)",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_172": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-fid/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/process_box.py": {
        "torch": {}
    },
    "scripts/retrival_ious_ade20k_halfset/retrival_seg_ade20k.py": {
        "torch": {
            "from_numpy_280": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_308": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/retrival_seg_ade20k.py": {
        "torch": {
            "from_numpy_265": {
                "variable": {
                    "value": "label_onehot_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 151) + label_np.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_293": {
                "variable": {
                    "value": "save_label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "save_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_label.reshape((1, 1) + save_label.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "util/util.py": {
        "torch": {
            "load_215": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_206": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}