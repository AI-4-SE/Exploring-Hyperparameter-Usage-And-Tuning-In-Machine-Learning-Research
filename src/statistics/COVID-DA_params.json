{
    "code/utils.py": {
        "sklearn": {
            "confusion_matrix_38": {
                "variable": {
                    "value": "(t_open, f_narrow, f_open, t_narrow)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_list",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p_list",
                    "possible_values": []
                }
            },
            "f1_score_42": {
                "variable": {
                    "value": "F1",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_list",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p_list",
                    "possible_values": []
                }
            },
            "roc_auc_score_32": {
                "variable": {
                    "value": "AUROC",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_list",
                    "possible_values": []
                },
                "y_score": {
                    "value": "p_list",
                    "possible_values": []
                }
            }
        }
    },
    "code/dataset.py": {
        "torch": {}
    },
    "code/functions.py": {
        "torch": {}
    },
    "code/loss_define.py": {
        "torch": {
            "KLDivLoss_24": {
                "variable": {
                    "value": "KLDivLoss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "softmax_11": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "p_output",
                    "possible_values": []
                },
                "input": {
                    "value": "p_output",
                    "possible_values": [
                        [
                            "F.softmax(p_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "q_output",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output",
                    "possible_values": [
                        [
                            "F.softmax(q_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_67": {
                "variable": {
                    "value": "preds_logsoft",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_softmax",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds_softmax.gather(1, labels.view(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_72": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "possible_values": []
                },
                "other": {
                    "value": "loss.t()",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "domain_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits ** 2",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "domain_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits - 1) ** 2",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "-y_pred * torch.log(y_pred)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "torch.sum(-y_pred * torch.log(y_pred), dim=1)",
                            "Call"
                        ],
                        [
                            "-torch.mul(torch.pow(1 - preds_softmax, self.gamma), preds_logsoft)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mul(self.alpha, loss.t())",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "self.alpha",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "self.alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_71": {
                "input": {
                    "value": "torch.pow(1 - preds_softmax, self.gamma)",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_logsoft",
                    "possible_values": [
                        [
                            "torch.log(preds_softmax)",
                            "Call"
                        ],
                        [
                            "preds_logsoft.gather(1, labels.view(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_71": {
                "input": {
                    "value": "1 - preds_softmax",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "DataParallel_125": {
                "variable": {
                    "value": "my_net",
                    "possible_values": []
                },
                "module": {
                    "value": "my_net",
                    "possible_values": [
                        [
                            "COVID_DA_with_resnet18(args)",
                            "Call"
                        ],
                        [
                            "DataParallel(my_net, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "possible_values": []
                }
            }
        }
    },
    "code/model_compat_CovidDA.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "all_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_flatten, target_flatten]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.shared_encoder_pred_domain",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.shared_encoder_pred_fc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.shared_classifier_pred_fc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.discrminator_pre_domain",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "discrminator_pre_domain_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shared_encoder_pred_domain, shared_classifier_pred_domain]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "shared_source_label",
                    "possible_values": [
                        [
                            "shared_class_label[:source_sample_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "input": {
                    "value": "shared_target_label",
                    "possible_values": [
                        [
                            "shared_class_label[source_sample_num:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "code/net/resnet.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            }
        }
    },
    "code/test_only.py": {
        "torch": {
            "DataParallel_175": {
                "variable": {
                    "value": "my_net",
                    "possible_values": []
                },
                "module": {
                    "value": "my_net",
                    "possible_values": [
                        [
                            "torch.load(args.model_path)",
                            "Call"
                        ],
                        [
                            "DataParallel(my_net, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "my_net.module",
                            "Attribute"
                        ],
                        [
                            "my_net.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "torch": {
            "SGD_107": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "list(my_net.module.shared_encoder_conv.parameters()) + list(my_net.module.shared_classifier.parameters()) + list(my_net.module.source_specific_classifier.parameters()) + list(my_net.module.target_specific_classifier.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "optimizer_D2",
                    "possible_values": []
                },
                "params": {
                    "value": "list(my_net.module.shared_classifier.parameters()) + list(my_net.module.source_specific_classifier.parameters()) + list(my_net.module.target_specific_classifier.parameters()) + list(my_net.module.discriminator2.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "optimizer_D1",
                    "possible_values": []
                },
                "params": {
                    "value": "list(my_net.module.shared_encoder_conv.parameters()) + list(my_net.module.discriminator1.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            }
        }
    }
}