{
    "tests/integrations/test_full_pipeline.py": {
        "sklearn": {
            "Pipeline_48": {
                "variable": {
                    "value": "pipe",
                    "type": "Name",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('relevant_augmenter', relevant_augmenter)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/units/transformers/test_per_column_imputer.py": {
        "sklearn": {}
    },
    "tests/units/transformers/test_relevant_feature_augmenter.py": {
        "sklearn": {
            "Pipeline_232": {
                "variable": {
                    "value": "pipeline",
                    "type": "Name",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('augmenter', augmenter), ('classifier', RandomForestClassifier(random_state=1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_val_score_239": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Pipeline([('augmenter', augmenter), ('classifier', RandomForestClassifier(random_state=1))])",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pd.DataFrame(index=index)",
                            "Call"
                        ],
                        [
                            "pd.DataFrame()",
                            "Call"
                        ],
                        [
                            "pd.DataFrame()",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[10, 500])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[10, 500])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=np.unique(df.id))",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[1])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=np.unique(df.id))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pd.Series(data=[0] * (n // 2) + [1] * (n // 2), index=index)",
                            "Call"
                        ],
                        [
                            "pd.Series(dtype='float64')",
                            "Call"
                        ],
                        [
                            "pd.Series({10: 1, 500: 0})",
                            "Call"
                        ],
                        [
                            "pd.Series({10: 1, 500: 0})",
                            "Call"
                        ],
                        [
                            "pd.Series([0, 1])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_235": {
                "random_state": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tsfresh/transformers/feature_augmenter.py": {
        "sklearn": {}
    },
    "tsfresh/transformers/feature_selector.py": {
        "sklearn": {}
    },
    "tsfresh/transformers/per_column_imputer.py": {
        "sklearn": {}
    },
    "tsfresh/transformers/relevant_feature_augmenter.py": {
        "sklearn": {}
    }
}