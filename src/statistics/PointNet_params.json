{
    "dataset/dataset.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "point_set",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "point_set[choice, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[2]).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "seg[choice]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "cls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "possible_values": []
                }
            }
        }
    },
    "model/pointnet.py": {
        "torch": {
            "empty_131": {
                "variable": {
                    "value": "sim_data",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 3, 2500)",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.layer1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.layer2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "iden",
                    "possible_values": []
                }
            },
            "Conv1d_60": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "MaxPool1d_66": {
                "variable": {
                    "value": "self.mp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.mp(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, self.num_points)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, self.num_points, self.k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "possible_values": [
                        [
                            "TransLayer()",
                            "Call"
                        ],
                        [
                            "self.stn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1088, 512, 1)",
                    "possible_values": []
                }
            },
            "log_softmax_125": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, self.k)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Conv1d_26": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool1d_35": {
                "kernel_size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ],
                        [
                            "2500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_102": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.mp(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, self.num_points)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, self.num_points, self.k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Conv1d_110": {
                "in_channels": {
                    "value": "1088",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_113": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_116": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm1d_117": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train/show_seg.py": {
        "torch": {
            "load_56": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_cls.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainLoader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "pointdata.PartDataset(root='../data/shapenetcore_partanno_segmentation_benchmark_v0', npoints=opt.num_points, classification=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "testLoader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "pointdata.PartDataset(root='../data/shapenetcore_partanno_segmentation_benchmark_v0', npoints=opt.num_points, classification=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "opt.manualSeed",
                    "possible_values": []
                }
            },
            "nll_loss_77": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels[:, 0]",
                            "Subscript"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "labels[:, 0]",
                            "Subscript"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cls_model_%d.pth' % (opt.outdir, epoch)",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            }
        }
    },
    "train/train_seg.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainLoader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "pointdata.PartDataset(root='../data/shapenetcore_partanno_segmentation_benchmark_v0', npoints=opt.num_points, classification=False, class_choice=['Chair'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "testLoader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "pointdata.PartDataset(root='../data/shapenetcore_partanno_segmentation_benchmark_v0', npoints=opt.num_points, classification=False, train=False, class_choice=['Chair'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "opt.manualSeed",
                    "possible_values": []
                }
            },
            "nll_loss_78": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "preds.view(-1, num_classes)",
                            "Call"
                        ],
                        [
                            "preds.view(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "labels.view(-1, 1)[:, 0] - 1",
                            "BinOp"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "labels.view(-1, 1)[:, 0] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_104": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/seg_model_%d.pth' % (opt.outdir, epoch)",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            }
        }
    }
}