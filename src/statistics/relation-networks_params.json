{
    "define_flags.py": {
        "tensorflow": {
            "DEFINE_string_15": {
                "name": {
                    "value": "mode",
                    "possible_values": []
                },
                "default": {
                    "value": "rn",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_16": {
                "name": {
                    "value": "log_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "logs/",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_float_17": {
                "name": {
                    "value": "lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0003",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "bs",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_19": {
                "name": {
                    "value": "num_shapes",
                    "possible_values": []
                },
                "default": {
                    "value": "15",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "num_vae_samples",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "subsample",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "k",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "possible_values": []
                },
                "help": {
                    "value": "num components",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "vae_k",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "num components",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "z_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "vae_z_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "tqdm_n",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "save_path",
                    "possible_values": []
                },
                "default": {
                    "value": "weights/model.weights",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "load_path",
                    "possible_values": []
                },
                "default": {
                    "value": "weights/model.weights",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_bool_29": {
                "name": {
                    "value": "plot_shapes",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_bool_30": {
                "name": {
                    "value": "plot_samples",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "log_format",
                    "possible_values": []
                },
                "default": {
                    "value": "stdout,log,tensorboard",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "samplers",
                    "possible_values": []
                },
                "default": {
                    "value": "uniform,cluster1,cluster2",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "suffix",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "InteractiveSession_26": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_28": {
                "variable": {
                    "value": "train_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS['log_path'] + '/train'",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "InteractiveSession_64": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_67": {
                "variable": {
                    "value": "train_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS['log_path'] + '/train'",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "InteractiveSession_93": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_96": {
                "variable": {
                    "value": "train_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS['log_path'] + '/train'",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "possible_values": []
                }
            },
            "global_variables_initializer_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "rns/building_blocks.py": {
        "tensorflow": {
            "map_fn_42": {
                "variable": {
                    "value": "g_sum",
                    "possible_values": []
                },
                "fn": {
                    "value": "do_g_sum",
                    "possible_values": []
                },
                "elems": {
                    "value": "objs_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "objsT",
                    "possible_values": []
                },
                "a": {
                    "value": "objs",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "map_fn_62": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "fn": {
                    "value": "do_g",
                    "possible_values": []
                },
                "elems": {
                    "value": "objsT",
                    "possible_values": [
                        [
                            "tf.transpose(objs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "g_sum",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "g",
                    "possible_values": [
                        [
                            "relation_net(ijs)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(do_g, objsT, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "relation_net(ijs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv1",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv1",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv3",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv4",
                    "possible_values": []
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "structure": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_107": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_mu",
                    "possible_values": []
                }
            },
            "dense_108": {
                "variable": {
                    "value": "log_scale",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_log_var",
                    "possible_values": []
                }
            },
            "softplus_109": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "features": {
                    "value": "log_scale + softplus_inverse(1.0)",
                    "possible_values": []
                }
            },
            "shape_113": {
                "variable": {
                    "value": "original_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "codes",
                    "possible_values": []
                }
            },
            "dense_115": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4 * 256",
                    "possible_values": []
                },
                "name": {
                    "value": "fc",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 4 * 256]",
                    "possible_values": []
                }
            },
            "conv2d_transpose_117": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "deconv1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "deconv2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_119": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "6",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "deconv3",
                    "possible_values": []
                }
            },
            "conv2d_transpose_120": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "6",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv4",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(h, FLAGS['k'], activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 1, 6, strides=2, activation=None, name='deconv4')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, shape=tf.concat([original_shape[:-1], IMAGE_SHAPE], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([original_shape[:-1], IMAGE_SHAPE], axis=0)",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                },
                "name": {
                    "value": "loc",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS['vae_k'], FLAGS['z_size']]",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "raw_scale_diag",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_scale_diag",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS['vae_k'], FLAGS['z_size']]",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "mixture_logits",
                    "possible_values": []
                },
                "name": {
                    "value": "mixture_logits",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS['vae_k']]",
                    "possible_values": []
                }
            },
            "dense_15": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dense_17": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dense_26": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "oij",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=None)",
                            "Call"
                        ],
                        [
                            "g_sum",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "range_34": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "ijs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(objs, idxs)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, 2]",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "ijs",
                    "possible_values": []
                },
                "values": {
                    "value": "[ijs[:, 0], ijs[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "range_53": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "ijs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(batch_ij, idxs)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, 2]",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "ijs",
                    "possible_values": []
                },
                "values": {
                    "value": "[ijs[:, 0], ijs[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "locs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.layers.dense(h, 2 * FLAGS['k'], activation=None)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, FLAGS['k'], 2]",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "scales",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.layers.dense(h, 2 * FLAGS['k'], activation=tf.exp)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, FLAGS['k'], 2]",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS['k']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "tf.math.expm1(x)",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'g'",
                            "MethodArgument"
                        ],
                        [
                            "'f'",
                            "MethodArgument"
                        ],
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'g'",
                            "MethodArgument"
                        ],
                        [
                            "'f'",
                            "MethodArgument"
                        ],
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "g",
                    "possible_values": [
                        [
                            "relation_net(ijs)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(do_g, objsT, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "relation_net(ijs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "mdn",
                    "possible_values": []
                }
            },
            "expm1_87": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(objs)[0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(tf.shape(batch_ij)[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_37": {
                "params": {
                    "value": "objs",
                    "possible_values": []
                },
                "indices": {
                    "value": "idxs",
                    "possible_values": [
                        [
                            "cartesian_product(x, x)",
                            "Call"
                        ],
                        [
                            "cartesian_product(x, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_55": {
                "params": {
                    "value": "batch_ij",
                    "possible_values": []
                },
                "indices": {
                    "value": "idxs",
                    "possible_values": [
                        [
                            "cartesian_product(x, x)",
                            "Call"
                        ],
                        [
                            "cartesian_product(x, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_68": {
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2 * FLAGS['k']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "dense_69": {
                "inputs": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 32, 4, strides=2, activation=activation, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 64, 4, strides=2, activation=activation, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 128, 4, strides=2, activation=activation, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 256, 4, strides=2, activation=activation, name='conv4')",
                            "Call"
                        ],
                        [
                            "encoder_conv(images, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(h)",
                            "Call"
                        ],
                        [
                            "codes",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(h, 4 * 256, name='fc')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, 1, 1, 4 * 256])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 128, 5, strides=2, activation=activation, name='deconv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 64, 5, strides=2, activation=activation, name='deconv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(h, 32, 6, strides=2, activation=activation, name='deconv3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2 * FLAGS['k']",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.exp",
                    "possible_values": []
                }
            },
            "unstack_75": {
                "value": {
                    "value": "tf.transpose(scales, [1, 0, 2])",
                    "possible_values": []
                }
            },
            "concat_121": {
                "values": {
                    "value": "[original_shape[:-1], IMAGE_SHAPE]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "objs",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "batch_ij",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "a": {
                    "value": "scales",
                    "possible_values": [
                        [
                            "tf.reshape(tf.layers.dense(h, 2 * FLAGS['k'], activation=tf.exp), [-1, FLAGS['k'], 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "softplus_133": {
                "features": {
                    "value": "raw_scale_diag",
                    "possible_values": [
                        [
                            "tf.get_variable(name='raw_scale_diag', shape=[FLAGS['vae_k'], FLAGS['z_size']])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rns/data.py": {
        "tensorflow": {
            "cast_7": {
                "variable": {
                    "value": "backset",
                    "possible_values": []
                },
                "x": {
                    "value": "(FLAGS['subsample'] + 1) * tf.random.uniform([])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "to_float_13": {
                "variable": {
                    "value": "state[state]",
                    "possible_values": []
                },
                "x": {
                    "value": "state['state']",
                    "possible_values": []
                }
            },
            "uniform_7": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_50": {
                "dims": {
                    "value": "[None, None, 1]",
                    "possible_values": []
                }
            }
        }
    },
    "rns/models.py": {
        "tensorflow": {
            "transpose_42": {
                "variable": {
                    "value": "tstate",
                    "possible_values": []
                },
                "a": {
                    "value": "self.state",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "AdamOptimizer_45": {
                "variable": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.FLAGS['lr']",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.pred_plot_ph",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "decode_png_55": {
                "variable": {
                    "value": "pred_plot",
                    "possible_values": []
                },
                "contents": {
                    "value": "self.pred_plot_ph",
                    "possible_values": []
                },
                "channels": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "pred_plot",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_plot",
                    "possible_values": [
                        [
                            "tf.image.decode_png(self.pred_plot_ph, channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_plot, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "merge_60": {
                "variable": {
                    "value": "self.plot_summaries",
                    "possible_values": []
                },
                "inputs": {
                    "value": "plot_summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_70": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "inputs": {
                    "value": "eval_summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_squared_error_101": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "images",
                    "possible_values": [
                        [
                            "self.state['image']",
                            "Subscript"
                        ],
                        [
                            "self.state['image']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.forward(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_103": {
                "variable": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.FLAGS['lr']",
                    "possible_values": []
                }
            },
            "merge_all_117": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "scope": {
                    "value": "train",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "self.elbo",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elbo_local",
                    "possible_values": [
                        [
                            "-(rate + distortion)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_165": {
                "variable": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.FLAGS['lr']",
                    "possible_values": []
                }
            },
            "merge_all_184": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "scope": {
                    "value": "train",
                    "possible_values": []
                }
            },
            "tile_192": {
                "variable": {
                    "value": "coor",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims([float(int(i / d)) / d, i % d / d], axis=0)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.FLAGS['bs'], 1]",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "o",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, tf.to_float(coor)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "meshgrid_49": {
                "variable": {
                    "value": "(self.X, self.Y)",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.linspace(-1.0, 1.0, 100)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.linspace(-1.0, 1.0, 100)",
                    "possible_values": []
                }
            },
            "round_175": {
                "variable": {
                    "value": "recon_clean",
                    "possible_values": []
                },
                "x": {
                    "value": "recon_mean",
                    "possible_values": [
                        [
                            "vae_vals['p'].mean()[:1, :8]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_199": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "possible_values": []
                }
            },
            "conv2d_200": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "possible_values": []
                }
            },
            "conv2d_201": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "possible_values": []
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(h, 24, 3, strides=2, activation=tf.nn.relu, name='conv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "all_g",
                    "possible_values": []
                },
                "values": {
                    "value": "all_g",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(all_g, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(all_g, axis=0, name='all_g')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "all_g",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_g",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(all_g, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(all_g, axis=0, name='all_g')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "all_g",
                    "possible_values": []
                }
            },
            "dense_223": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                },
                "inputs": {
                    "value": "f_out",
                    "possible_values": [
                        [
                            "f_net(g_sum)",
                            "Call"
                        ],
                        [
                            "f_net(all_g)",
                            "Call"
                        ],
                        [
                            "f_net(g_sum)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_mu",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "log_scale",
                    "possible_values": []
                },
                "inputs": {
                    "value": "f_out",
                    "possible_values": [
                        [
                            "f_net(g_sum)",
                            "Call"
                        ],
                        [
                            "f_net(all_g)",
                            "Call"
                        ],
                        [
                            "f_net(g_sum)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_log_var",
                    "possible_values": []
                }
            },
            "softplus_225": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "features": {
                    "value": "log_scale + softplus_inverse(1.0)",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                },
                "inputs": {
                    "value": "f_out",
                    "possible_values": [
                        [
                            "f_net(g_sum)",
                            "Call"
                        ],
                        [
                            "f_net(all_g)",
                            "Call"
                        ],
                        [
                            "f_net(g_sum)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_mu",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "log_scale",
                    "possible_values": []
                },
                "inputs": {
                    "value": "f_out",
                    "possible_values": [
                        [
                            "f_net(g_sum)",
                            "Call"
                        ],
                        [
                            "f_net(all_g)",
                            "Call"
                        ],
                        [
                            "f_net(g_sum)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.FLAGS['z_size']",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_log_var",
                    "possible_values": []
                }
            },
            "softplus_252": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "features": {
                    "value": "log_scale + softplus_inverse(1.0)",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "map_fn_43": {
                "fn": {
                    "value": "self.mdn['mixture'].log_prob",
                    "possible_values": []
                },
                "elems": {
                    "value": "tstate",
                    "possible_values": [
                        [
                            "tf.transpose(self.state, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "eval",
                    "possible_values": []
                }
            },
            "image_59": {
                "name": {
                    "value": "mdn_contour",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_plot",
                    "possible_values": [
                        [
                            "tf.image.decode_png(self.pred_plot_ph, channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_plot, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "train",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "train",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "name_scope_168": {
                "name": {
                    "value": "train",
                    "possible_values": []
                }
            },
            "scalar_169": {
                "name": {
                    "value": "mean_distortion",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(distortion)",
                    "possible_values": []
                }
            },
            "scalar_170": {
                "name": {
                    "value": "mean_rate",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(rate)",
                    "possible_values": []
                }
            },
            "scalar_171": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "[float(int(i / d)) / d, i % d / d]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "linspace_49": {
                "start": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "possible_values": []
                },
                "num": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "stack_50": {
                "values": {
                    "value": "[self.X, self.Y]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "min_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(self.mdn['logits'][0])",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "max_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(self.mdn['logits'][0])",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "median_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "tfd.percentile(self.mdn['logits'], 50.0)",
                    "possible_values": []
                }
            },
            "to_float_108": {
                "x": {
                    "value": "images",
                    "possible_values": [
                        [
                            "self.state['image']",
                            "Subscript"
                        ],
                        [
                            "self.state['image']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_109": {
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.forward(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_110": {
                "x": {
                    "value": "tf.to_float(outputs)",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "distortion",
                    "possible_values": [
                        [
                            "-vae_vals['p'].log_prob(images)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "rate",
                    "possible_values": [
                        [
                            "vae_vals['q'].log_prob(vae_vals['q_sample']) - latent_prior.log_prob(vae_vals['q_sample'])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_172": {
                "x": {
                    "value": "images",
                    "possible_values": [
                        [
                            "self.state['image']",
                            "Subscript"
                        ],
                        [
                            "self.state['image']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_173": {
                "x": {
                    "value": "vae_vals['p'].sample()[:1, :8]",
                    "possible_values": []
                }
            },
            "to_float_181": {
                "x": {
                    "value": "random_image.sample()",
                    "possible_values": []
                }
            },
            "to_float_193": {
                "x": {
                    "value": "coor",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims([float(int(i / d)) / d, i % d / d], axis=0), [self.FLAGS['bs'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_211": {
                "variable": {
                    "value": "oij",
                    "possible_values": []
                },
                "values": {
                    "value": "[o_i, o_j]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_min_65": {
                "input_tensor": {
                    "value": "self.mdn['logits'][0]",
                    "possible_values": []
                }
            },
            "reduce_max_66": {
                "input_tensor": {
                    "value": "self.mdn['logits'][0]",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.forward(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rns/trainer.py": {
        "tensorflow": {}
    },
    "rns/util.py": {
        "tensorflow": {
            "shape_13": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "possible_values": []
                }
            },
            "minimum_19": {
                "variable": {
                    "value": "rows",
                    "possible_values": []
                },
                "x": {
                    "value": "rows",
                    "possible_values": [
                        [
                            "tf.minimum(rows, batch)",
                            "Call"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_20": {
                "variable": {
                    "value": "cols",
                    "possible_values": []
                },
                "x": {
                    "value": "batch // rows",
                    "possible_values": []
                },
                "y": {
                    "value": "cols",
                    "possible_values": [
                        [
                            "tf.minimum(batch // rows, cols)",
                            "Call"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rows, cols, width, height, depth)",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, rows * width, cols * height, depth]",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "prod",
                    "possible_values": []
                },
                "values": {
                    "value": "[b + tf.zeros_like(a), tf.zeros_like(b) + a]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "prod",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prod",
                    "possible_values": [
                        [
                            "tf.concat([b + tf.zeros_like(a), tf.zeros_like(b) + a], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prod, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "merge_9": {
                "inputs": {
                    "value": "summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "image_28": {
                "name": {
                    "value": "name",
                    "possible_values": []
                },
                "data": {
                    "value": "pack_images(tensor, rows, cols)",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "tf.reshape(images, (-1, width, height, depth))",
                            "Call"
                        ],
                        [
                            "images[:rows * cols]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, (rows, cols, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [1, rows * width, cols * height, depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_6": {
                "name": {
                    "value": "key",
                    "possible_values": [
                        [
                            "sd.keys()",
                            "Call"
                        ],
                        [
                            "id.keys()",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "sd[key]",
                    "possible_values": []
                }
            },
            "image_8": {
                "name": {
                    "value": "key",
                    "possible_values": [
                        [
                            "sd.keys()",
                            "Call"
                        ],
                        [
                            "id.keys()",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "id[key]",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "b",
                    "possible_values": []
                }
            }
        }
    }
}