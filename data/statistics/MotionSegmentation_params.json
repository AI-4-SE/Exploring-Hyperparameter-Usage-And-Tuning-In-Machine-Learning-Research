{
    "asset/utils.py": {
        "torch": {
            "from_numpy_386": {
                "variable": {
                    "value": "tImg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "finalImg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(imgs_combArrey)",
                            "Call"
                        ],
                        [
                            "(finalImg - mid) * -1 + mid",
                            "BinOp"
                        ],
                        [
                            "(finalImg - mid) * -1 + mid",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_424": {
                "variable": {
                    "value": "t1re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_425": {
                "variable": {
                    "value": "t1im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_426": {
                "variable": {
                    "value": "t2re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_427": {
                "variable": {
                    "value": "t2im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_437": {
                "variable": {
                    "value": "t1re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_438": {
                "variable": {
                    "value": "t1im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_439": {
                "variable": {
                    "value": "t2re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_440": {
                "variable": {
                    "value": "t2im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_445": {
                "variable": {
                    "value": "iTre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iT",
                            "Method Argument"
                        ],
                        [
                            "iT",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=iT.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_446": {
                "variable": {
                    "value": "iTim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iT",
                            "Method Argument"
                        ],
                        [
                            "iT",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=iT.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_451": {
                "variable": {
                    "value": "iTre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iT",
                            "Method Argument"
                        ],
                        [
                            "iT",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=iT.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_452": {
                "variable": {
                    "value": "iTim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iT",
                            "Method Argument"
                        ],
                        [
                            "iT",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=iT.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_453": {
                "variable": {
                    "value": "outR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iTre ** 2 + iTim ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_460": {
                "variable": {
                    "value": "t1re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_461": {
                "variable": {
                    "value": "t1im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_462": {
                "variable": {
                    "value": "t2re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([0], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_463": {
                "variable": {
                    "value": "t2im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor([1], device=t1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_504": {
                "variable": {
                    "value": "x_cord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resolution",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_507": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_564": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotTFG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotTFG",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_565": {
                "variable": {
                    "value": "res[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_565": {
                "variable": {
                    "value": "res[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_566": {
                "variable": {
                    "value": "res[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_566": {
                "variable": {
                    "value": "res[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_570": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp0",
                            "Method Argument"
                        ],
                        [
                            "inp0",
                            "Method Argument"
                        ],
                        [
                            "inp0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_571": {
                "variable": {
                    "value": "hf0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp0, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_573": {
                "variable": {
                    "value": "hf1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_583": {
                "variable": {
                    "value": "hfP_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp, torch.zeros_like(inp, dtype=torch.float))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_591": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp0",
                            "Method Argument"
                        ],
                        [
                            "inp0",
                            "Method Argument"
                        ],
                        [
                            "inp0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_592": {
                "variable": {
                    "value": "hf0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp0, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_594": {
                "variable": {
                    "value": "hf1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_618": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.moveaxis(data, 1, -1)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], data.shape[1], dimsqrt, dimsqrt, data.shape[4]))",
                            "Call"
                        ],
                        [
                            "data / maxAbsVal / 2 + 0.5",
                            "BinOp"
                        ],
                        [
                            "data / maxAbsVal",
                            "BinOp"
                        ],
                        [
                            "mData",
                            "variable"
                        ],
                        [
                            "roll_n(data, axis=dim, n=data.size(dim) // 2)",
                            "Call"
                        ],
                        [
                            "roll_n(data, axis=dim, n=data.size(dim) // 2)",
                            "Call"
                        ],
                        [
                            "torch.fft(data, dim, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, dim, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "dim in range(1, len(data.size()) - 1)",
                            "Call"
                        ],
                        [
                            "dim in range(1, len(data.size()) - 1)",
                            "Call"
                        ],
                        [
                            "len(img.shape)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ifft_622": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.moveaxis(data, 1, -1)",
                            "Call"
                        ],
                        [
                            "data.reshape((data.shape[0], data.shape[1], dimsqrt, dimsqrt, data.shape[4]))",
                            "Call"
                        ],
                        [
                            "data / maxAbsVal / 2 + 0.5",
                            "BinOp"
                        ],
                        [
                            "data / maxAbsVal",
                            "BinOp"
                        ],
                        [
                            "mData",
                            "variable"
                        ],
                        [
                            "roll_n(data, axis=dim, n=data.size(dim) // 2)",
                            "Call"
                        ],
                        [
                            "roll_n(data, axis=dim, n=data.size(dim) // 2)",
                            "Call"
                        ],
                        [
                            "torch.fft(data, dim, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, dim, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "dim in range(1, len(data.size()) - 1)",
                            "Call"
                        ],
                        [
                            "dim in range(1, len(data.size()) - 1)",
                            "Call"
                        ],
                        [
                            "len(img.shape)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ],
                        [
                            "normalized",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "atan2_635": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp[:, :, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp[:, :, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_636": {
                "variable": {
                    "value": "absol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp[:, :, 1:2, :, :] * tmp[:, :, 1:2, :, :] + tmp[:, :, 0:1, :, :] * tmp[:, :, 0:1, :, :] + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_716": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_726": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_727": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_329": {
                "variable": {
                    "value": "imgConcat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "(2 + len(relDataArray)) * data.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "data.shape[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_417": {
                "tensors": {
                    "value": "[back, front]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "[numeratorRe / denominator, numeratorIm / denominator]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_441": {
                "tensors": {
                    "value": "[t1re * t2re - t1im * t2im, t1re * t2im + t1im * t2re]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_447": {
                "tensors": {
                    "value": "[iTre, -iTim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "[outR, torch.zeros_like(outR)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_467": {
                "tensors": {
                    "value": "[numeratorRe / denominator, numeratorIm / denominator]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_470": {
                "tensors": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_470": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_424": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_425": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_437": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_438": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "iT.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "iT.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "iT.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "iT.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_460": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_461": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_516": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2.0 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_627": {
                "input": {
                    "value": "-5 + a * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_691": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - gainEst) * rot + gainEst * newEs",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst * newEsr",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst / 2.0 * newEs + gainEst / 2.0 * newEsr",
                            "BinOp"
                        ],
                        [
                            "complex_div(rot, complex_abs(rot))",
                            "Call"
                        ],
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_691": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_702": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - gainEst) * rot + gainEst * newEs",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst * newEsr",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst / 2.0 * newEs + gainEst / 2.0 * newEsr",
                            "BinOp"
                        ],
                        [
                            "complex_div(rot, complex_abs(rot))",
                            "Call"
                        ],
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_704": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - gainEst) * rot + gainEst * newEs",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst * newEsr",
                            "BinOp"
                        ],
                        [
                            "(1 - gainEst) * rot + gainEst / 2.0 * newEs + gainEst / 2.0 * newEsr",
                            "BinOp"
                        ],
                        [
                            "complex_div(rot, complex_abs(rot))",
                            "Call"
                        ],
                        [
                            "rot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_733": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_734": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_735": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "window",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "img1.size()",
                            "Call"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_454": {
                "input": {
                    "value": "outR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(iTre ** 2 + iTim ** 2 + 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_522": {
                "input": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2.0 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_583": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_693": {
                "input": {
                    "value": "newEs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "complex_mul(rot.roll(-step, dims=dims[axis]), amm)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_695": {
                "input": {
                    "value": "newEsr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "complex_mul(rot.roll(step, dims=dims[axis]), ammr)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_695": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_497": {
                "input": {
                    "value": "-1.0 / 2.0 * ((i_ - center - 0.5) ** 2.0 + (j_ - center - 0.5) ** 2.0) / sigma ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_517": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_406": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}