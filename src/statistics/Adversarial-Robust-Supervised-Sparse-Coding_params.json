{
    "adversarial_sparse_toolbox.py": {
        "sklearn": {
            "normalize_189": {
                "X": {
                    "value": "x.numpy()",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "normalize_237": {
                "X": {
                    "value": "x.numpy()",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "normalize_300": {
                "X": {
                    "value": "x.numpy()",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "normalize_343": {
                "X": {
                    "value": "x.numpy()",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SSC_Model_separable_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.D": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "self.mu": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "np.sqrt((m - n) / n / (m - 1))",
                            "Call"
                        ]
                    ]
                },
                "randn_24": {
                    "variable": {
                        "value": "w",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "m",
                        "possible_values": []
                    }
                },
                "self.lambd": {
                    "value": "lambd",
                    "possible_values": []
                },
                "self.margin": {
                    "value": "margin",
                    "possible_values": [
                        [
                            "torch.min(torch.abs(scores)).numpy()",
                            "Call"
                        ]
                    ]
                },
                "self.k": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(Iter)",
                            "Call"
                        ]
                    ]
                },
                "self.x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                },
                "self.labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SSC_Model_NonSep_58": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.D": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "self.mu": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "np.sqrt((m - n) / n / (m - 1))",
                            "Call"
                        ]
                    ]
                },
                "randn_65": {
                    "variable": {
                        "value": "w",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "m",
                        "possible_values": []
                    }
                },
                "self.lambd": {
                    "value": "lambd",
                    "possible_values": []
                },
                "self.margin": {
                    "value": "margin",
                    "possible_values": [
                        [
                            "torch.min(torch.abs(scores)).numpy()",
                            "Call"
                        ]
                    ]
                },
                "self.k": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(Iter)",
                            "Call"
                        ]
                    ]
                },
                "self.x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                },
                "self.labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SSC_Model_100": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_105": {
                    "variable": {
                        "value": "self.D",
                        "possible_values": []
                    },
                    "data": {
                        "value": "D",
                        "possible_values": [
                            [
                                "model.D.detach()",
                                "Call"
                            ],
                            [
                                "torch.randn(n, m)",
                                "Call"
                            ],
                            [
                                "D / torch.norm(D, dim=0)",
                                "BinOp"
                            ],
                            [
                                "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                                "Call"
                            ],
                            [
                                "model.D / torch.norm(model.D, dim=0).detach()",
                                "BinOp"
                            ]
                        ]
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "self.mu": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "np.sqrt((m - n) / n / (m - 1))",
                            "Call"
                        ]
                    ]
                },
                "randn_107": {
                    "variable": {
                        "value": "w",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "m",
                        "possible_values": []
                    }
                },
                "Parameter_108": {
                    "variable": {
                        "value": "self.w",
                        "possible_values": []
                    },
                    "data": {
                        "value": "w / torch.norm(w)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "self.lambd": {
                    "value": "lambd",
                    "possible_values": []
                },
                "self.margin": {
                    "value": "margin",
                    "possible_values": [
                        [
                            "torch.min(torch.abs(scores)).numpy()",
                            "Call"
                        ]
                    ]
                },
                "self.k": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(Iter)",
                            "Call"
                        ]
                    ]
                },
                "self.x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                },
                "self.labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.sign(proj)",
                            "Call"
                        ],
                        [
                            "labels[0:N0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_367": {
                "variable": {
                    "value": "Dtx",
                    "possible_values": []
                },
                "input": {
                    "value": "D.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(model.D, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(normalize(x.numpy(), axis=0))",
                            "Call"
                        ],
                        [
                            "x[:, 0:N0]",
                            "Subscript"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "softshrink_368": {
                "variable": {
                    "value": "z_",
                    "possible_values": []
                },
                "input": {
                    "value": "model.eta * Dtx",
                    "possible_values": []
                },
                "lambd": {
                    "value": "lambd_eta",
                    "possible_values": []
                }
            },
            "sign_380": {
                "variable": {
                    "value": "SIGNS",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_397": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_398": {
                "variable": {
                    "value": "margin",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(scores)",
                    "possible_values": []
                }
            },
            "matmul_405": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_411": {
                "variable": {
                    "value": "smax",
                    "possible_values": []
                },
                "input": {
                    "value": "scoresf",
                    "possible_values": [
                        [
                            "scores",
                            "Name"
                        ]
                    ]
                }
            },
            "randn_427": {
                "variable": {
                    "value": "D",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "matmul_429": {
                "variable": {
                    "value": "Gram",
                    "possible_values": []
                },
                "input": {
                    "value": "D.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "Res",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Iter, 3)",
                    "possible_values": []
                }
            },
            "Tensor_459": {
                "variable": {
                    "value": "thresh",
                    "possible_values": []
                }
            },
            "max_461": {
                "variable": {
                    "value": "mu_G",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Gram - torch.eye(m))",
                    "possible_values": []
                }
            },
            "svd_464": {
                "variable": {
                    "value": "(u, s, v)",
                    "possible_values": []
                },
                "input": {
                    "value": "Gram",
                    "possible_values": [
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ],
                        [
                            "torch.mm(u, torch.mm(s.diag(), v.t()))",
                            "Call"
                        ],
                        [
                            "G_tmp.t() / eng",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_465": {
                "variable": {
                    "value": "D",
                    "possible_values": []
                },
                "input": {
                    "value": "s[:n].diag().sqrt()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v[:, :n].t()",
                    "possible_values": []
                }
            },
            "sort_478": {
                "variable": {
                    "value": "(proj_sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "min_479": {
                "variable": {
                    "value": "(proj_mins, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_sorted",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_490": {
                "variable": {
                    "value": "Gram",
                    "possible_values": []
                },
                "input": {
                    "value": "D.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_491": {
                "variable": {
                    "value": "(GS, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Gram)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "variable": {
                    "value": "mus",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(GS) - 1",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(N, 1), -y.view(N, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(N, 1), -y.view(N, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(N, 1), -y.view(N, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "Gamma",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Gamma * Signs",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_189": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "proj",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_194": {
                "variable": {
                    "value": "N_pass",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "possible_values": [
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "int(np.round(dd1 * (m ** 2 - m)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_205": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "Gamma",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Gamma * Signs",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_237": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "matmul_242": {
                "variable": {
                    "value": "proj",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma_",
                    "possible_values": [
                        [
                            "Gamma + 0.1 * torch.randn((m, N))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_244": {
                "variable": {
                    "value": "N_pass",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "possible_values": [
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "int(np.round(dd1 * (m ** 2 - m)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_254": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_283": {
                "variable": {
                    "value": "Gamma",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Gamma * Signs",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "variable": {
                    "value": "proj",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_288": {
                "variable": {
                    "value": "N_pass",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "possible_values": [
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "int(np.round(dd1 * (m ** 2 - m)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_300": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "sign_302": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_326": {
                "variable": {
                    "value": "Gamma",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "proj",
                    "possible_values": []
                },
                "input": {
                    "value": "model.w",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_331": {
                "variable": {
                    "value": "N_pass",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "possible_values": [
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "torch.abs(proj) > model.margin",
                            "Compare"
                        ],
                        [
                            "int(np.round(dd1 * (m ** 2 - m)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_342": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "other": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma * Signs).float()",
                            "Call"
                        ],
                        [
                            "np.zeros((m, N))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Gamma).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_343": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "sign_345": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_371": {
                "variable": {
                    "value": "Dtres",
                    "possible_values": []
                },
                "input": {
                    "value": "D.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "possible_values": [
                        [
                            "torch.matmul(D, z_) - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softshrink_372": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z_ - model.eta * Dtres",
                    "possible_values": []
                },
                "lambd": {
                    "value": "model.lambd * model.eta",
                    "possible_values": []
                }
            },
            "Tensor_440": {
                "variable": {
                    "value": "thresh",
                    "possible_values": []
                }
            },
            "svd_445": {
                "variable": {
                    "value": "(u, s, v)",
                    "possible_values": []
                },
                "input": {
                    "value": "Gram",
                    "possible_values": [
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ],
                        [
                            "torch.mm(u, torch.mm(s.diag(), v.t()))",
                            "Call"
                        ],
                        [
                            "G_tmp.t() / eng",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_447": {
                "input": {
                    "value": "s.diag()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.t()",
                    "possible_values": []
                }
            },
            "Tensor_455": {
                "variable": {
                    "value": "thresh",
                    "possible_values": []
                }
            },
            "max_494": {
                "variable": {
                    "value": "mus[i - 2]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(GS[-i:-1, :], dim=0)",
                    "possible_values": []
                }
            },
            "matmul_386": {
                "variable": {
                    "value": "Gs",
                    "possible_values": []
                },
                "input": {
                    "value": "model.D[:, S].t()",
                    "possible_values": []
                },
                "other": {
                    "value": "model.D[:, S]",
                    "possible_values": []
                }
            },
            "matmul_388": {
                "variable": {
                    "value": "alfa[S, i]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(Gs)",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "possible_values": [
                        [
                            "torch.matmul(model.D[:, S].t(), x[:, i]) - model.lambd * SIGNS[S, i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_428": {
                "input": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "abs_461": {
                "input": {
                    "value": "Gram - torch.eye(m)",
                    "possible_values": []
                }
            },
            "abs_477": {
                "input": {
                    "value": "torch.matmul(model.D.t(), x - torch.matmul(model.D, z))",
                    "possible_values": []
                }
            },
            "norm_489": {
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "abs_491": {
                "input": {
                    "value": "Gram",
                    "possible_values": [
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ],
                        [
                            "torch.mm(u, torch.mm(s.diag(), v.t()))",
                            "Call"
                        ],
                        [
                            "G_tmp.t() / eng",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(D.t(), D)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_25": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_66": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_193": {
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_243": {
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_287": {
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_330": {
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, Gamma)",
                            "Call"
                        ],
                        [
                            "model.lambd - torch.abs(torch.matmul(model.D.t(), x - torch.matmul(model.D, z)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_370": {
                "input": {
                    "value": "D",
                    "possible_values": [
                        [
                            "model.D.detach()",
                            "Call"
                        ],
                        [
                            "torch.randn(n, m)",
                            "Call"
                        ],
                        [
                            "D / torch.norm(D, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(s[:n].diag().sqrt(), v[:, :n].t())",
                            "Call"
                        ],
                        [
                            "model.D / torch.norm(model.D, dim=0).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z_",
                    "possible_values": [
                        [
                            "F.softshrink(model.eta * Dtx, lambd_eta)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ]
                    ]
                }
            },
            "norm_373": {
                "input": {
                    "value": "z - z_",
                    "possible_values": []
                }
            },
            "abs_460": {
                "input": {
                    "value": "Gram - 1",
                    "possible_values": []
                }
            },
            "matmul_477": {
                "input": {
                    "value": "model.D",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x.t())",
                            "Call"
                        ],
                        [
                            "F.softshrink(z_ - model.eta * Dtres, lambd=model.lambd * model.eta)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, model.x)",
                            "Call"
                        ],
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ],
                        [
                            "encode(self, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_494": {
                "input": {
                    "value": "GS[-i:-1, :]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ],
                        [
                            "torch.randn(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_241": {
                "*size": {
                    "value": "(m, N)",
                    "possible_values": []
                }
            },
            "matmul_387": {
                "input": {
                    "value": "model.D[:, S].t()",
                    "possible_values": []
                },
                "other": {
                    "value": "x[:, i]",
                    "possible_values": []
                }
            },
            "inverse_388": {
                "input": {
                    "value": "Gs",
                    "possible_values": [
                        [
                            "torch.matmul(model.D[:, S].t(), model.D[:, S])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_398": {
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.w, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_441": {
                "input": {
                    "value": "Gram - 1",
                    "possible_values": []
                }
            },
            "abs_456": {
                "input": {
                    "value": "Gram - 1",
                    "possible_values": []
                }
            },
            "eye_461": {
                "n": {
                    "value": "m",
                    "possible_values": []
                }
            }
        }
    },
    "sparse_learnable_dictionary.py": {
        "torch": {
            "DictLearn_27": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.SC": {
                    "value": "SC",
                    "possible_values": []
                },
                "self.lambd": {
                    "value": "lambd",
                    "possible_values": []
                },
                "self.FistaIter": {
                    "value": "Fista_Iter",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_34": {
                    "variable": {
                        "value": "self.W",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(28 * 28, m, requires_grad=False)",
                        "possible_values": []
                    }
                }
            },
            "DictLearnCIFAR_65": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.SC": {
                    "value": "SC",
                    "possible_values": []
                },
                "self.lambd": {
                    "value": "lambd",
                    "possible_values": []
                },
                "self.FistaIter": {
                    "value": "Fista_Iter",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_72": {
                    "variable": {
                        "value": "self.W",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(32 * 32 * 3, m, requires_grad=False)",
                        "possible_values": []
                    }
                }
            },
            "DictLearn_supervised_104": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.SC": {
                    "value": "SC",
                    "possible_values": []
                },
                "self.FistaIter": {
                    "value": "Fiter",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_110": {
                    "variable": {
                        "value": "self.lambd",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, 1)",
                        "possible_values": []
                    }
                },
                "Parameter_112": {
                    "variable": {
                        "value": "self.W",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(28 * 28, m, requires_grad=True)",
                        "possible_values": []
                    }
                },
                "Linear_113": {
                    "variable": {
                        "value": "self.Wclass",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "m",
                        "possible_values": [
                            [
                                "X.data.shape[1]",
                                "Subscript"
                            ],
                            [
                                "W.shape[1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "10",
                        "possible_values": []
                    }
                }
            },
            "DictLearn_supervised_CIFAR_159": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.SC": {
                    "value": "SC",
                    "possible_values": []
                },
                "self.FistaIter": {
                    "value": "Fiter",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_166": {
                    "variable": {
                        "value": "self.lambd",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, 1)",
                        "possible_values": []
                    }
                },
                "Parameter_168": {
                    "variable": {
                        "value": "self.W",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(32 * 32 * 3, m, requires_grad=True)",
                        "possible_values": []
                    }
                },
                "Linear_169": {
                    "variable": {
                        "value": "self.Wclass",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "m",
                        "possible_values": [
                            [
                                "X.data.shape[1]",
                                "Subscript"
                            ],
                            [
                                "W.shape[1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "10",
                        "possible_values": []
                    }
                }
            },
            "sign_243": {
                "variable": {
                    "value": "SIGNS",
                    "possible_values": []
                },
                "input": {
                    "value": "Gamma.detach()",
                    "possible_values": []
                }
            },
            "sort_287": {
                "variable": {
                    "value": "(proj_sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "model.lambd - torch.abs(torch.matmul(model.W.t(), x.t() - torch.matmul(model.W, z))).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "min_288": {
                "variable": {
                    "value": "(proj_mins, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_sorted",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "PD",
                    "possible_values": []
                },
                "*size": {
                    "value": "NC",
                    "possible_values": [
                        [
                            "W.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "NC",
                    "possible_values": [
                        [
                            "W.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_305": {
                "variable": {
                    "value": "C",
                    "possible_values": []
                },
                "input": {
                    "value": "PD",
                    "possible_values": [
                        [
                            "torch.zeros(NC, NC)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "Gram",
                    "possible_values": []
                },
                "input": {
                    "value": "W.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "W",
                    "possible_values": [
                        [
                            "model.Wclass.weight",
                            "Attribute"
                        ],
                        [
                            "model.W.detach()",
                            "Call"
                        ],
                        [
                            "W.div(Wn.expand_as(W))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "Gram",
                    "possible_values": []
                },
                "input": {
                    "value": "model.W.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "model.W",
                    "possible_values": []
                }
            },
            "sort_327": {
                "variable": {
                    "value": "(GS, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Gram)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "mus",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(GS) - 1",
                    "possible_values": []
                }
            },
            "sort_341": {
                "variable": {
                    "value": "(a, _)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mm_342": {
                "variable": {
                    "value": "T",
                    "possible_values": []
                },
                "input": {
                    "value": "a[:, k].unsqueeze(1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.Tensor(np.ones((1, m))).to(X.device)",
                    "possible_values": []
                }
            },
            "mm_390": {
                "variable": {
                    "value": "DtY",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "possible_values": []
                },
                "mat2": {
                    "value": "eta * W",
                    "possible_values": []
                }
            },
            "norm_415": {
                "variable": {
                    "value": "Wn",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "possible_values": [
                        [
                            "model.Wclass.weight",
                            "Attribute"
                        ],
                        [
                            "model.W.detach()",
                            "Call"
                        ],
                        [
                            "W.div(Wn.expand_as(W))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "randn_424": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "possible_values": [
                        [
                            "X.data.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_51": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "input": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "Gamma * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sign(X) * F.relu(torch.abs(X) - lamda)",
                            "BinOp"
                        ],
                        [
                            "hard_threshold_k(torch.mm(Y, eta * W), lambd)",
                            "Call"
                        ],
                        [
                            "hard_threshold_k(Gamma - eta * torch.mm(residual, W), lambd)",
                            "Call"
                        ],
                        [
                            "soft_threshold(DtY, lamda)",
                            "Call"
                        ],
                        [
                            "soft_threshold(Z - eta * torch.mm(residual, W), lamda / c)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "mm_89": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "input": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "Gamma * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sign(X) * F.relu(torch.abs(X) - lamda)",
                            "BinOp"
                        ],
                        [
                            "hard_threshold_k(torch.mm(Y, eta * W), lambd)",
                            "Call"
                        ],
                        [
                            "hard_threshold_k(Gamma - eta * torch.mm(residual, W), lambd)",
                            "Call"
                        ],
                        [
                            "soft_threshold(DtY, lamda)",
                            "Call"
                        ],
                        [
                            "soft_threshold(Z - eta * torch.mm(residual, W), lamda / c)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "model.Wclass(z)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_210": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "model.Wclass(z)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_330": {
                "variable": {
                    "value": "mus[i - 2]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(GS[-i:-1, :], dim=0)",
                    "possible_values": []
                }
            },
            "mm_426": {
                "variable": {
                    "value": "Dgamma",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "torch.randn(1, m).type(W.type()).to(W.device)",
                            "Call"
                        ],
                        [
                            "torch.mm(Dgamma, W)",
                            "Call"
                        ],
                        [
                            "X / nm",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "mm_427": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "input": {
                    "value": "Dgamma",
                    "possible_values": [
                        [
                            "torch.mm(X, W.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W",
                    "possible_values": [
                        [
                            "model.Wclass.weight",
                            "Attribute"
                        ],
                        [
                            "model.W.detach()",
                            "Call"
                        ],
                        [
                            "W.div(Wn.expand_as(W))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_428": {
                "variable": {
                    "value": "nm",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "torch.randn(1, m).type(W.type()).to(W.device)",
                            "Call"
                        ],
                        [
                            "torch.mm(Dgamma, W)",
                            "Call"
                        ],
                        [
                            "X / nm",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "Gs",
                    "possible_values": []
                },
                "input": {
                    "value": "D[:, S].t()",
                    "possible_values": []
                },
                "other": {
                    "value": "D[:, S]",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "alfa[i, S]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(Gs)",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "possible_values": [
                        [
                            "torch.matmul(D[:, S].t(), Y[i, :]) - model.lambd * SIGNS[i, S]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_260": {
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "model.Wclass(z)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Wclass(Gamma)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "abs_286": {
                "input": {
                    "value": "torch.matmul(model.W.t(), x.t() - torch.matmul(model.W, z))",
                    "possible_values": []
                }
            },
            "norm_304": {
                "variable": {
                    "value": "PD[i, j]",
                    "possible_values": []
                },
                "input": {
                    "value": "W[i, :] - W[j, :]",
                    "possible_values": []
                }
            },
            "abs_327": {
                "input": {
                    "value": "Gram",
                    "possible_values": [
                        [
                            "torch.matmul(W.t(), W).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.matmul(model.W.t(), model.W).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_342": {},
            "sign_353": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "torch.randn(1, m).type(W.type()).to(W.device)",
                            "Call"
                        ],
                        [
                            "torch.mm(Dgamma, W)",
                            "Call"
                        ],
                        [
                            "X / nm",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_353": {
                "input": {
                    "value": "torch.abs(X) - lamda",
                    "possible_values": []
                }
            },
            "mm_365": {
                "input": {
                    "value": "Y",
                    "possible_values": []
                },
                "mat2": {
                    "value": "eta * W",
                    "possible_values": []
                }
            },
            "mm_366": {
                "input": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "Gamma * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sign(X) * F.relu(torch.abs(X) - lamda)",
                            "BinOp"
                        ],
                        [
                            "hard_threshold_k(torch.mm(Y, eta * W), lambd)",
                            "Call"
                        ],
                        [
                            "hard_threshold_k(Gamma - eta * torch.mm(residual, W), lambd)",
                            "Call"
                        ],
                        [
                            "soft_threshold(DtY, lamda)",
                            "Call"
                        ],
                        [
                            "soft_threshold(Z - eta * torch.mm(residual, W), lamda / c)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "28 * 28",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "possible_values": [
                        [
                            "X.data.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "32 * 32 * 3",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "possible_values": [
                        [
                            "X.data.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_112": {
                "*size": {
                    "value": "28 * 28",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "possible_values": [
                        [
                            "X.data.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_168": {
                "*size": {
                    "value": "32 * 32 * 3",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "possible_values": [
                        [
                            "X.data.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "S",
                    "possible_values": [
                        [
                            "alfa[i, :] != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_330": {
                "input": {
                    "value": "GS[-i:-1, :]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mm_373": {
                "input": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "Gamma * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sign(X) * F.relu(torch.abs(X) - lamda)",
                            "BinOp"
                        ],
                        [
                            "hard_threshold_k(torch.mm(Y, eta * W), lambd)",
                            "Call"
                        ],
                        [
                            "hard_threshold_k(Gamma - eta * torch.mm(residual, W), lambd)",
                            "Call"
                        ],
                        [
                            "soft_threshold(DtY, lamda)",
                            "Call"
                        ],
                        [
                            "soft_threshold(Z - eta * torch.mm(residual, W), lamda / c)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "mm_399": {
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "Gamma.clone()",
                            "Call"
                        ],
                        [
                            "Gamma + (t_1 - 1) / t * (Gamma - Gamma_1)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "input": {
                    "value": "D[:, S].t()",
                    "possible_values": []
                },
                "other": {
                    "value": "Y[i, :]",
                    "possible_values": []
                }
            },
            "inverse_251": {
                "input": {
                    "value": "Gs",
                    "possible_values": [
                        [
                            "torch.matmul(D[:, S].t(), D[:, S])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_274": {
                "input": {
                    "value": "si[torch.arange(len(si)) != y[i]]",
                    "possible_values": []
                }
            },
            "abs_341": {
                "input": {
                    "value": "Gamma",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "Gamma * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sign(X) * F.relu(torch.abs(X) - lamda)",
                            "BinOp"
                        ],
                        [
                            "hard_threshold_k(torch.mm(Y, eta * W), lambd)",
                            "Call"
                        ],
                        [
                            "hard_threshold_k(Gamma - eta * torch.mm(residual, W), lambd)",
                            "Call"
                        ],
                        [
                            "soft_threshold(DtY, lamda)",
                            "Call"
                        ],
                        [
                            "soft_threshold(Z - eta * torch.mm(residual, W), lamda / c)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ],
                        [
                            "encode(self, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_343": {},
            "abs_353": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "torch.randn(1, m).type(W.type()).to(W.device)",
                            "Call"
                        ],
                        [
                            "torch.mm(Dgamma, W)",
                            "Call"
                        ],
                        [
                            "X / nm",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(Gamma, self.W.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_403": {
                "input": {
                    "value": "1 + 4 * t ** 2",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "input": {
                    "value": "model.W",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "possible_values": [
                        [
                            "encode(model, x)",
                            "Call"
                        ],
                        [
                            "encode(model, x).detach().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_372": {
                "input": {
                    "value": "residual",
                    "possible_values": [
                        [
                            "torch.mm(Gamma, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Z, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W",
                    "possible_values": [
                        [
                            "model.Wclass.weight",
                            "Attribute"
                        ],
                        [
                            "model.W.detach()",
                            "Call"
                        ],
                        [
                            "W.div(Wn.expand_as(W))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_400": {
                "input": {
                    "value": "residual",
                    "possible_values": [
                        [
                            "torch.mm(Gamma, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Gamma, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(Z, W.transpose(1, 0)) - Y",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W",
                    "possible_values": [
                        [
                            "model.Wclass.weight",
                            "Attribute"
                        ],
                        [
                            "model.W.detach()",
                            "Call"
                        ],
                        [
                            "W.div(Wn.expand_as(W))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_274": {
                "start": {
                    "value": "len(si)",
                    "possible_values": []
                }
            }
        }
    }
}