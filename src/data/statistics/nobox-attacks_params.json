{
    "attack.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Normalize()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(2 * n_imgs, 2, nChannels, 224, 224)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tar_img, size=(56, 56))",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(n_decoders, 2, nChannels, decoder_size, decoder_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "tar_img.repeat(1, n_imgs * 2, 1, 1, 1, 1).reshape(n_imgs * 2 * n_decoders, 2, nChannels, decoder_size, decoder_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(2 * n_imgs, 2, nChannels, 224, 224)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tar_img, size=(56, 56))",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(n_decoders, 2, nChannels, decoder_size, decoder_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "tar_img.repeat(1, n_imgs * 2, 1, 1, 1, 1).reshape(n_imgs * 2 * n_decoders, 2, nChannels, decoder_size, decoder_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OUR_dataset(data_dir='data/ILSVRC2012_img_val', data_csv_dir='data/selected_data.csv', mode='attack', img_num=n_imgs, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_imgs * 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_83": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img > ori_img + eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_84": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img < ori_img - eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_85": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * n_imgs * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_119": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img > ori_img + eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_120": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img < ori_img - eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_137": {
                "variable": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(2 * n_imgs, 2, nChannels, 224, 224)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_img, dim=0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tar_img, size=(56, 56))",
                            "Call"
                        ],
                        [
                            "tar_img.reshape(n_decoders, 2, nChannels, decoder_size, decoder_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "tar_img.repeat(1, n_imgs * 2, 1, 1, 1, 1).reshape(n_imgs * 2 * n_decoders, 2, nChannels, decoder_size, decoder_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs[0].unsqueeze(1).repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).unsqueeze(1).repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([0] * n_imgs + [1] * n_imgs) * n_decoders",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img > ori_img + eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_159": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img < ori_img - eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ori_img - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_160": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "ori_img.clone()",
                            "Call"
                        ],
                        [
                            "img.data + 1.0 / 255 * input_grad",
                            "BinOp"
                        ],
                        [
                            "torch.where(img > ori_img + eps, ori_img + eps, img)",
                            "Call"
                        ],
                        [
                            "torch.where(img < ori_img - eps, ori_img - eps, img)",
                            "Call"
                        ],
                        [
                            "torch.clamp(img, min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_169": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_185": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_198": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_200": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_110": {
                "dim": {
                    "value": "(2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_149": {
                "dim": {
                    "value": "(2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_225": {
                "f": {
                    "value": "'{}/models/{}.pth'.format(ae_dir, data_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_110": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_149": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_autoencoder.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_60": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_17": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_31": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_101": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_19": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_33": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prep_dataset.py": {
        "torch": {
            "randperm_60": {
                "variable": {
                    "value": "label_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Normalize()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OUR_dataset(data_dir='data/ILSVRC2012_img_val', data_csv_dir='data/selected_data.csv', mode='train', img_num=n_imgs, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_imgs * 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "img_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[tar_ind_ls]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img_tar, (56, 56))",
                            "Call"
                        ],
                        [
                            "img.clone()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "rand_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.randint(0, n_imgs, size=(1,)), torch.randint(n_imgs, 2 * n_imgs, size=(1,)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "gen_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + '/models/{}.pth'.format(iter_ind)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_50": {
                "low": {
                    "value": "n_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_imgs // 2",
                            "BinOp"
                        ]
                    ]
                },
                "high": {
                    "value": "2 * n_imgs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "randint_16": {
                "variable": {
                    "value": "rand_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_30": {
                "variable": {
                    "value": "rand_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_32": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "torch.flip(img, dims=[3]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img.permute(0, 1, 3, 2), dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "img.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_1, 1 - rand_shuffle_1]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ],
                        [
                            "img.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_2, 1 - rand_shuffle_2]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "tar_ind_ls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(int(2 * n_imgs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "tar_ind_ls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_69": {
                "variable": {
                    "value": "tar_ind_ls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "tar_ind_ls_ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "tar_ind_ls",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tar_ind_ls, tar_ind_ls_ex)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_42": {
                "variable": {
                    "value": "rand_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "img_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval('patch_{}'.format(rand_ind[0])), eval('patch_{}'.format(rand_ind[1])))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "img_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval('patch_{}'.format(rand_ind[2])), eval('patch_{}'.format(rand_ind[3])))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_52": {
                "variable": {
                    "value": "rand_shuffle_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_57": {
                "variable": {
                    "value": "rand_shuffle_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_21": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "torch.flip(img, dims=[3]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img.permute(0, 1, 3, 2), dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "img.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_1, 1 - rand_shuffle_1]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ],
                        [
                            "img.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_2, 1 - rand_shuffle_2]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_21": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "(img_0, img_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_23": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "torch.flip(img, dims=[3]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img.permute(0, 1, 3, 2), dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "img.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_1, 1 - rand_shuffle_1]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ],
                        [
                            "img.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_2, 1 - rand_shuffle_2]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_24": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "torch.flip(img, dims=[3]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img.permute(0, 1, 3, 2), dims=[3])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, dims=[3])",
                            "Call"
                        ],
                        [
                            "img.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_1, 1 - rand_shuffle_1]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ],
                        [
                            "img.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "img.reshape(2, 112, 224, 3)",
                            "Call"
                        ],
                        [
                            "img[[rand_shuffle_2, 1 - rand_shuffle_2]]",
                            "Subscript"
                        ],
                        [
                            "img.reshape(224, 224, 3)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_26": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "tar_ind_ls_ex",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tar_ind_ls_ex)[torch.randperm(len(tar_ind_ls_ex))].reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_75": {
                "n": {
                    "value": "len(tar_ind_ls_ex)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}