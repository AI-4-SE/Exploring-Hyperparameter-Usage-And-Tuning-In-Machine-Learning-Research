{
    "utils_data.py": {
        "sklearn": {
            "train_test_split_26": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "args.train_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(test_x, val_x, test_y, val_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "test_y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_blobs_17": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "args.n_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "centers": {
                    "value": "[args.mu_1, args.mu_2]",
                    "type": "List",
                    "possible_values": []
                },
                "cluster_std": {
                    "value": "[args.std_1, args.std_2]",
                    "type": "List",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_28": {
                "variable": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(train_x)",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_30": {
                "variable": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(val_x)",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_32": {
                "variable": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(test_x)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(train_x), torch.LongTensor(train_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(val_x), torch.LongTensor(val_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(test_x), torch.LongTensor(test_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_86": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_87": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['val'], data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_144": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_145": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['val'], data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_199": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_200": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=True, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['train'], data_transforms['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.SubsetRandomSampler(val_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(paths['val'], data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ensemble_model.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_56": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "path_to_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.pretrained, 'model_final.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.pretrained, 'model_best.torch')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_100": {
                "f": {
                    "value": "path_to_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.pretrained, 'model_final.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.pretrained, 'model_best.torch')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate_model.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_58": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "path_to_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.pretrained, 'model_final.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.pretrained, 'model_best.torch')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_109": {
                "f": {
                    "value": "path_to_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.pretrained, 'model_final.torch')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.pretrained, 'model_best.torch')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_36": {
                "variable": {
                    "value": "ttx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method=self.solver_method, options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='stoch_rk4', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='rk4_noise_after_step', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method=self.solver_method, options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='stoch_rk4', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='rk4_noise_after_step', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "self.time_interval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "time_interval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.time_interval.numpy()",
                            "Call"
                        ],
                        [
                            "range(n_blocks)",
                            "Call"
                        ],
                        [
                            "range(n_blocks)",
                            "Call"
                        ],
                        [
                            "range(n_blocks)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_166": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(x.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_182": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_233": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_239": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_264": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_269": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_292": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_297": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, padding=2, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_344": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, padding=2, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_379": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method=self.solver_method, options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='stoch_rk4', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='rk4_noise_after_step', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(t, out)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method=self.solver_method, options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='stoch_rk4', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "self.odeint(self.odefunc, x, self.time_interval, rtol=self.tol, atol=self.tol, method='rk4_noise_after_step', options=self.solver_options)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.res1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.res2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.res3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.res4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.down1(self.ode1(out))",
                            "Call"
                        ],
                        [
                            "self.down2(self.ode2(out))",
                            "Call"
                        ],
                        [
                            "self.down3(self.ode3(out))",
                            "Call"
                        ],
                        [
                            "self.avg(self.ode4(out))",
                            "Call"
                        ],
                        [
                            "self.fc(self.flatten(out))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_24": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "x[:, :1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_333": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_334": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_368": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_369": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/adams.py": {
        "torch": {
            "empty_30": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "k + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "error_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(local_error, tolerance)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_127": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_127": {
                "input": {
                    "value": "y1_",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/adjoint.py": {
        "torch": {
            "is_tensor_113": {
                "obj": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y0,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "adj_params",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_flatten(func.parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "adj_time",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "time_vjps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "time_vjps[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_41": {
                "variable": {
                    "value": "(vjp_t, *vjp_y_and_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "func_eval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "func(t, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(t,) + y + f_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "tuple((-adj_y_ for adj_y_ in adj_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "vjp_params",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.to(y[0].device).detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "adj_params",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[t[i], t[i - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "y_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dot_71": {
                "input": {
                    "value": "func_i_.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output_i_.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/dopri5.py": {
        "torch": {
            "mul_49": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_102": {
                "input": {
                    "value": "y0_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "data": {
                    "value": "mean_sq_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_compute_error_ratio(y1_error, atol=self.atol, rtol=self.rtol, y0=y0, y1=y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchdiffeq/_impl/fixed_grid.py": {
        "torch": {
            "randn_like_50": {
                "input": {
                    "value": "y_",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/hamiltonianint.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_46": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_53": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_60": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/interp.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/misc.py": {
        "torch": {
            "sqrt_167": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(mean_error_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "exponent",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(a)",
                            "Call"
                        ],
                        [
                            "a.type(dtype)",
                            "Call"
                        ],
                        [
                            "a.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "h0",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1e-06).to(h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_143": {
                "input": {
                    "value": "100 * h0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_175": {
                "obj": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y0,)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_7": {
                "tensors": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_7": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.contiguous().view(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_51": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "input": {
                    "value": "sum((x_.norm() ** 2 for x_ in x)) / sum((x_.numel() for x_ in x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_169": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "y0_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "is_floating_point_192": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-t",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "y0_ - y1_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_156": {
                "input": {
                    "value": "error_ratio_ * error_ratio_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_floating_point_190": {
                "input": {
                    "value": "y0_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "max_35": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "y0_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ],
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_35": {
                "input": {
                    "value": "y1_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_152": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "y1_",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/rk_common.py": {
        "torch": {
            "randn_like_83": {
                "input": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torchdiffeq/_impl/solvers.py": {
        "torch": {
            "ceil_62": {
                "variable": {
                    "value": "niters",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(end_time - start_time) / step_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_63": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "niters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ceil((end_time - start_time) / step_size + 1).item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchdiffeq/_impl/tsit5.py": {
        "torch": {
            "sqrt_56": {
                "variable": {
                    "value": "error_ratio",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_error_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((torch.sum(sq_error_ratio_) for sq_error_ratio_ in sq_error_ratio)) / sum((sq_error_ratio_.numel() for sq_error_ratio_ in sq_error_ratio))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "exponent",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "variable": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / ifactor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "min_58": {
                "input": {
                    "value": "error_ratio ** exponent / safety",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "y0_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0",
                            "Name"
                        ]
                    ]
                }
            },
            "mul_122": {
                "input": {
                    "value": "tensor_error_ratio_",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor_error_ratio_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "sq_error_ratio_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_119": {
                "input": {
                    "value": "torch.abs(y0_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "y1_",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "train_model.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_139": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adamax(parameters, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=args.nesterov)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "args.lr_decay_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.lr_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "args.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.min_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_97": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model_init.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model_final.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'optimizer_final.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adamax_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_207": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_146": {
                "f": {
                    "value": "os.path.join(args.pretrained, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_147": {
                "f": {
                    "value": "os.path.join(args.pretrained, 'optimizer.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model_best.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'optimizer_best.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "{'save_epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'save_epoch.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "softmax_227": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ens_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.mean(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_227": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_56": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_71": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_244": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_55": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "tonp(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_134": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_134": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "model[-1](torch.FloatTensor(grid).to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_157": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}